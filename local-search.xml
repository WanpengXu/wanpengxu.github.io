<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>这是一个测试</title>
    <link href="/2021/12/06/test/"/>
    <url>/2021/12/06/test/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7d9684abd59c4bced27909c3ae060230ab026265298bd5c199d3bed6dc991073">29af482fc8172052401d16c7cd49fda16f97d2ff7afd5427bd76f4feb8a994c65cd506f862a8d6ff007ac5c9b9d45606869a75f4b3b28e372c3b826c5f9fafde</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">这里的内容可能是未结课的作业。「FBI WARNING」</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>homework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Java语言及网络编程》课后小结</title>
    <link href="/2021/11/29/%E3%80%8AJava%E8%AF%AD%E8%A8%80%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BE%E5%90%8E%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/11/29/%E3%80%8AJava%E8%AF%AD%E8%A8%80%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BE%E5%90%8E%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="《Java语言及网络编程》课后小结"><a href="#《Java语言及网络编程》课后小结" class="headerlink" title="《Java语言及网络编程》课后小结"></a>《Java语言及网络编程》课后小结</h1><h1 id="11-29"><a href="#11-29" class="headerlink" title="11.29"></a>11.29</h1><ol><li><p>发现java17中的<code>java &lt;file&gt;.java</code>似乎只能编译单个类</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291010551.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291011178.png" alt=""></p><p>另外，想要从指令路径中运行class，需要使用<code>java -classpath &lt;dir&gt; &lt;file&gt;</code>命令</p><p>所以vscode中java对应的task.json可以这样配置</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span><br>    <span class="hljs-comment">// for the documentation about the tasks.json format</span><br>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;tasks&quot;</span>: [<br>     &#123;<br>      <span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;javac&quot;</span>,<br>      <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;javac $&#123;file&#125; -d $&#123;fileDirname&#125;\\bin&quot;</span>,<br>      <span class="hljs-comment">// &quot;command&quot;: &quot;javac $&#123;file&#125;&quot;,</span><br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,<br>      <span class="hljs-attr">&quot;group&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;kind&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,<br>          <span class="hljs-attr">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;presentation&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,<br>          <span class="hljs-attr">&quot;panel&quot;</span>: <span class="hljs-string">&quot;new&quot;</span>,<br>          <span class="hljs-attr">&quot;focus&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;<br>     &#125;,<br>     &#123;<br>      <span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;run&quot;</span>,<br>      <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;java -classpath $&#123;fileDirname&#125;\\bin $&#123;fileBasenameNoExtension&#125;&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,<br>      <span class="hljs-attr">&quot;dependsOn&quot;</span>: <span class="hljs-string">&quot;javac&quot;</span>,<span class="hljs-comment">// 加入这个依赖就会先javac生成class文件</span><br>      <span class="hljs-attr">&quot;group&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;kind&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>          <span class="hljs-attr">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;presentation&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,<br>          <span class="hljs-attr">&quot;panel&quot;</span>: <span class="hljs-string">&quot;new&quot;</span>,<br>          <span class="hljs-attr">&quot;focus&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;<br>     &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>java先把所有的类加载到正文段，同时静态初始化（static执行的时机），类似于预编译</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291017517.png" alt=""></p></li><li><p>Math库中都是静态方法，都不需要生成对象(eg. random)，静态方法可以通过import引入</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291015737.png" alt=""></p></li><li><p>单例设计模式：创建型模式，提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。</p><ul><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291020289.png" alt=""></p><p>单例模式事实上有6种，课上介绍的这种叫做“线程安全的懒汉式”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程安全的懒汉式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">T</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> T obj;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">null</span>)<br>            obj = <span class="hljs-keyword">new</span> T();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">signle</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        T t1 = T.getInstance();<br>        T t2 = T.getInstance();<br>        System.out.println(t1 == t2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291023640.png" alt=""></p><p>这体现出两次获取的都是同一对象</p></li><li><p>关于==和equals</p><p>== 对于基本类型来是值比较，对于引用类型是引用比较；</p><p>equals默认情况下是引用比较，很多类重写了 equals 方法把它变成了值比较，如 String、Integer。</p><p>所以一般情况下 equals 比较的是值是否相等。</p></li><li><p>父类引用不能被强制转换为子类引用，子类引用可以隐式转换/强制转换成父类引用（指针）</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291027333.png" alt=""></p><p>子类引用按需隐式转换到父类引用</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291028360.png" alt=""></p></li><li><p>switch可以接收字符串（包括空串””），不能接收null，因为java的switch实现基于hashCode，null的hashCode值为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">switchTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s=<span class="hljs-keyword">null</span>; <span class="hljs-comment">// NullPointerException</span><br>        <span class="hljs-comment">// String s = &quot;&quot;;</span><br><br>        <span class="hljs-comment">// if (s != null)  // 若禁止传递空指针时的一种解决方法</span><br>        <span class="hljs-comment">// switch (s) &#123;</span><br>        <span class="hljs-keyword">switch</span> (s == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;null&quot;</span> : s) &#123;  <span class="hljs-comment">// 若必须检测空指针时的一种解决方法</span><br>            <span class="hljs-comment">// //null in switch cases 是预览功能，默认情况下禁用</span><br>            <span class="hljs-comment">// case null :</span><br>            <span class="hljs-comment">//     System.out.println(&quot;This is a nullptr?&quot;);</span><br>            <span class="hljs-comment">//     break;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;null&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;This is a \&quot;null\&quot;!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;This is a blank string!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;This is a other string!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>instanceof，二元操作符，使用方式类似于==</p><p>作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291030193.png" alt=""></p></li><li><p>实例和引用是两回事！一个实例如果不是被本类的引用所调用，可能无法调用实例的方法</p><p>例如父类引用调用子类实例便无法使用子类的方法</p><p>使用instanceof将实例和其本类的引用配套</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291032952.png" alt=""></p></li><li><p>java11后的instanceof可以在判断为true后直接赋给本类引用，引用名为最后的参数</p><p>这可能是个语法糖，因为它不是三元运算符</p></li></ol><h1 id="12-1"><a href="#12-1" class="headerlink" title="12.1"></a>12.1</h1><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112011108665.png" alt=""></p><ol><li><p>编译时类型和运行时类型</p><p>Java中的许多对象（一般都是具有父子类关系的父类对象）在运行时都会出现两种类型：编译时类型和运行时类型。</p><p>例如：<code>Person person = new Student();</code>这行代码将会生成一个person变量，该变量的编译时类型是Person，运行时类型是Student。</p><p>编译时类型由声明该变量时使用的类型（引用的类型）决定，运行时类型由实际赋给该变量的对象的类型（实例的类型）决定。</p><p>变量在编译阶段只能调用其编译时类型所具有的方法，在运行阶段执行它运行时类型所具有的方法。即变量只能引用所在的类里的方法。</p><p>另外通过引用来访问对象包含的实例属性时，系统总是试图访问它编译时类所定义的属性，而不是它运行时所定义的属性。</p><p><strong>因为有编译时类型的限制，所以变量所调用的方法只能来自编译时类型的方法</strong></p><p>举两个例子：访问方法和访问属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(Father obj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in Father class, receive Father obj.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(Father obj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in Son class, receive Father obj.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(Son obj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in Son class, receive Son obj.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(GrandSon obj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in Son class, receive GrandSon obj.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GrandSon</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Son</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inheritance1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Father father = <span class="hljs-keyword">new</span> Son();<br>        GrandSon grandSon = <span class="hljs-keyword">new</span> GrandSon();<br>        father.Show(grandSon);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112011131246.png" alt=""></p><p>继承链(inheritance chain)：</p></li></ol><p>网上找的一份第二次作业第一题的答案，不小心粘在这了</p><p>①②③比较好理解，一般不会出错。④⑤就有点糊涂了，为什么输出的不是”B and B”呢？！！先来回顾一下多态性。         </p><p>运行时多态性是面向对象程序设计代码重用的一个最强大机制，动态性的概念也可以被说成“一个接口，多个方法”。Java实现运行时多态性的基础是动态方法调度，它是一种在运行时而不是在编译期调用重载方法的机制。         方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写(Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。         </p><p>当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。 （但是如果强制把超类转换成子类的话，就可以调用子类中新添加而超类没有的方法了。）         </p><p>好了，先温习到这里，言归正传！实际上这里涉及方法调用的优先问题 ，优先级由高到低依次为：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。让我们来看看它是怎么工作的。         </p><p>比如④，a2.show(b)，a2是一个引用变量，类型为A，则this为a2，b是B的一个实例，于是它到类A里面找show(B obj)方法，没有找到，于是到A的super(超类)找，而A没有超类，因此转到第三优先级this.show((super)O)，this仍然是a2，这里O为B，(super)O即(super)B即A，因此它到类A里面找show(A obj)的方法，类A有这个方法，但是由于a2引用的是类B的一个对象，B覆盖了A的show(A obj)方法，因此最终锁定到类B的show(A obj)，输出为”B and A”。         再比如⑧，b.show(c)，b是一个引用变量，类型为B，则this为b，c是C的一个实例，于是它到类B找show(C obj)方法，没有找到，转而到B的超类A里面找，A里面也没有，因此也转到第三优先级this.show((super)O)，this为b，O为C，(super)O即(super)C即B，因此它到B里面找show(B obj)方法，找到了，由于b引用的是类B的一个对象，因此直接锁定到类B的show(B obj)，输出为”B and B”。         按照上面的方法，可以正确得到其他的结果。</p><h1 id="12-8"><a href="#12-8" class="headerlink" title="12.8"></a>12.8</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是对希望符合这个接口的类的一组<strong>需求</strong>。</p><p>接口没有实例。</p><p>接口中的所有方法都是<code>public</code>，所有字段都是<code>public static final</code></p><blockquote><p>注：Java语言规范建议不要提供多余的关键字</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112091930957.png" alt=""></p><p>实现接口的类若非抽象类，则必须实现接口中的所有方法</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112091933259.png" alt=""></p><p>实现接口时必须将方法声明为<code>public</code>，因为缺省访问权限为包内权限，编译器会报错，认为你试图提供更严格的（更弱的）访问权限</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112091937376.png" alt=""></p><p>测试用到的代码</p><p>类图:</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112092021983.png" alt=""></p><p>代码：</p><ol><li>Person.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String n)</span> </span>&#123;  <span class="hljs-comment">// Java不支持默认值参数</span><br>        name = n;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// 但可以使用重载实现类似的功能</span><br>        <span class="hljs-keyword">this</span>(<span class="hljs-string">&quot;路人甲&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// getMethods()只能获取父类中public权限的方法！如果不加public会出现虽然能调用但是反射获取不到的情况。</span><br>        System.out.println(<span class="hljs-string">&quot;The person is eating.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>CanFight.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CanFight</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> numberOfWins = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>CanSwim.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CanSwim</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Hero.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CanFight</span>, <span class="hljs-title">CanSwim</span> </span>&#123;<br>    String title;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hero</span><span class="hljs-params">(String n, String t)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(n);<br>        title = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hero</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        title = <span class="hljs-string">&quot;无证骑士&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;The hero is fighting.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;The hero is swimming.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person h1 = <span class="hljs-keyword">new</span> Hero();<br>        Hero h2 = <span class="hljs-keyword">new</span> Hero(<span class="hljs-string">&quot;琦玉&quot;</span>, <span class="hljs-string">&quot;秃头披风侠&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Hero is a subtype of Person? &quot;</span> + (h2 <span class="hljs-keyword">instanceof</span> Person));<br>        System.out.println(<span class="hljs-string">&quot;Hero is a subtype of CanSwim? &quot;</span> + (h2 <span class="hljs-keyword">instanceof</span> CanSwim));<br>        System.out.println(<span class="hljs-string">&quot;Hero is a subtype of CanFight? &quot;</span> + (h2 <span class="hljs-keyword">instanceof</span> CanFight));<br><br>        System.out.println();<br>        Class&lt;? extends Person&gt; h1RuntimeClass = h1.getClass();<br>        System.out.println(h1RuntimeClass);<br>        Method[] methods = h1RuntimeClass.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods)<br>            System.out.println(method);<br><br>        System.out.println();<br>        Class&lt;? extends Person&gt; h2RuntimeClass = h2.getClass();<br>        System.out.println(h2RuntimeClass);<br>        Method[] methods2 = h2RuntimeClass.getMethods();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> method : methods2)<br>            System.out.println(method);<br><br>        System.out.println();<br>        System.out.println(h1.name);<br><span class="hljs-comment">//        System.out.println(h1.title);  // ERROR</span><br>        h1.eat();<br><span class="hljs-comment">//        h1.fight();  // ERROR</span><br><span class="hljs-comment">//        h1.swim();  // ERROR</span><br><br>        System.out.println();<br>        System.out.println(h2.name);<br>        System.out.println(h2.title);<br>        h2.eat();<br>        h2.fight();<br>        h2.swim();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>output.out</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs processing">Hero is a subtype of Person? <span class="hljs-keyword">true</span><br>Hero is a subtype of CanSwim? <span class="hljs-keyword">true</span><br>Hero is a subtype of CanFight? <span class="hljs-keyword">true</span><br><br>class edu.wanpengxu.course.Hero<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Hero.fight()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Hero.swim()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Person.eat()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait(<span class="hljs-keyword">long</span>,<span class="hljs-built_in">int</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait() <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait(<span class="hljs-keyword">long</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> java.lang.<span class="hljs-keyword">Object</span>.equals(java.lang.<span class="hljs-keyword">Object</span>)<br><span class="hljs-keyword">public</span> java.lang.<span class="hljs-keyword">String</span> java.lang.<span class="hljs-keyword">Object</span>.toString()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-built_in">int</span> java.lang.<span class="hljs-keyword">Object</span>.hashCode()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> java.lang.Class java.lang.<span class="hljs-keyword">Object</span>.getClass()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.notify()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.notifyAll()<br><br>class edu.wanpengxu.course.Hero<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Hero.fight()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Hero.swim()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Person.eat()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait(<span class="hljs-keyword">long</span>,<span class="hljs-built_in">int</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait() <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait(<span class="hljs-keyword">long</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> java.lang.<span class="hljs-keyword">Object</span>.equals(java.lang.<span class="hljs-keyword">Object</span>)<br><span class="hljs-keyword">public</span> java.lang.<span class="hljs-keyword">String</span> java.lang.<span class="hljs-keyword">Object</span>.toString()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-built_in">int</span> java.lang.<span class="hljs-keyword">Object</span>.hashCode()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> java.lang.Class java.lang.<span class="hljs-keyword">Object</span>.getClass()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.notify()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.notifyAll()<br><br>路人甲<br>The person is eating.<br><br>琦玉<br>秃头披风侠<br>The person is eating.<br>The hero is fighting.<br>The hero is swimming.<br></code></pre></td></tr></table></figure></li></ol><p><strong>反射只能获取public方法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112092018603.png" alt=""></p><h3 id="接口的属性"><a href="#接口的属性" class="headerlink" title="接口的属性"></a>接口的属性</h3><p>可以使用接口引用变量，变量必须是实现了接口的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparable x;<br>x = <span class="hljs-keyword">new</span> Employee(...);<br></code></pre></td></tr></table></figure><p>可以使用<code>instanceof</code>检查一个对象是否实现了某个特定的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> Comparable) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>允许有多条接口链，从通用性较高的接口扩展到专用性较高的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Moveable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span> <span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y)</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Powered</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Moveable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">milesPerGallon</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个类可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span>, <span class="hljs-title">Comparable</span></span><br></code></pre></td></tr></table></figure><h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><p>为什么Java中会有接口？</p><p>因为，有些程序设计语言（尤其是C++）允许一个类有多个超类，这个特性称为多重继承（multiple inheritance），Java的设计者选择了不支持多重继承，其主要原因是多重继承会让语言变得非常复杂（如同C++），或者效率会降低（如同Eiffel）。</p><p>接口可以提供多重继承的大多数好处，同时还能避免多重继承的复杂性和低效性。</p><p>所以Java只能扩展一个类却可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span>, <span class="hljs-title">Comparable</span>  // <span class="hljs-title">ERROR</span></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>  // <span class="hljs-title">OK</span></span><br></code></pre></td></tr></table></figure><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>可以使用<code>default</code>修饰符为接口方法提供一个默认实现，这个默认方法主要用于“接口演化”，例如很久以前有这样一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bag</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collention</span></span><br></code></pre></td></tr></table></figure><p>后来Java要在Collention中增加一个stream方法，如果这个方法不是默认方法，由于Bag此前并没有实现stream方法，程序将不能编译，即不能保证<strong>“源代码兼容”</strong>。</p><p><strong>“二进制兼容”</strong>：在升级库文件的时候，不必<strong>重新编译</strong>使用此库的可执行文件或其他库文件，并且程序的功能不被破坏。</p><p><strong>“源代码兼容”</strong>：在升级库文件的时候，不必<strong>修改</strong>使用此库的可执行文件或其他库文件的<strong>源代码</strong>，只需重新编译应用程序，即可使程序的功能不被破坏。</p><p>增加非默认方法stream后，若不对Bag类重新编译（即使用之前编译好的JAR文件），当程序在Bag实例上调用steam方法时会出现<code>AbstractMethodError</code></p><p>若增加的是默认方法，那么上述情况会调用<code>Collection.stream</code>方法</p><h3 id="解决默认方法冲突"><a href="#解决默认方法冲突" class="headerlink" title="解决默认方法冲突"></a>解决默认方法冲突</h3><ol><li><p>超类优先</p><p>若一个类继承了超类，实现了接口，且超类和接口中有相同签名的方法，使用超类中的方法</p></li><li><p>接口冲突（让程序员解决）</p><p>使用下面的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Named</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;_&quot;</span> + hashCode();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span>, <span class="hljs-title">Named</span></span>&#123;  <span class="hljs-comment">// ERROR</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>Java编译器会报错，让程序员来解决这个问题，解决方法是选择冲突方法中的一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span>, <span class="hljs-title">Named</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Person.<span class="hljs-keyword">super</span>.getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>只要被实现的接口中的方法有一个提供了默认实现，编译器就会报错，若方法都没有默认实现则不存在冲突，因为必须在实现这些接口的类中实现方法。</p></blockquote></li></ol><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>lambda表达式：匿名函数，是代码块以及必须传入代码块的变量规范。</p><blockquote><p>为什么是λ？</p><p>这是逻辑学家Alonzo Church受《数学原理》（<em>Principia Mathematica</em>）中用重音符^表示自由变量启发，采用大写lambda（Λ）表示参数，后来又改为了小写lambda（λ）。从此带参数变量的表达式就被称为lambda表达式。</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(parameters) -&gt; expression<br></code></pre></td></tr></table></figure><p>或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(parameters) -&gt; &#123;<br>    statements;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(String first, String second) -&gt; &#123;<br>    first.length()-second.length();<br>&#125;<br></code></pre></td></tr></table></figure><p>特征：</p><ol><li>可选参数类型：由编译器识别参数类型，可以忽略参数类型</li><li>可选的圆括号：若只有一个参数，可以忽略圆括号</li><li>可选的大括号及return：若只有一条语句，可以忽略大括号、分号及<code>return</code></li></ol><p>若一个lambda表达式只在某些分支有返回值而其他分支无返回值，编译器会报错，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">(<span class="hljs-keyword">int</span> x) -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;  <span class="hljs-comment">// ERROR</span><br></code></pre></td></tr></table></figure><p>lambda 表达式的局部变量必须具有final特性，即lambda表达式使用的变量不可在之后被修改。</p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>函数式接口：只有一个抽象方法的接口</p><p>如静态方法<code>Arrays.sort</code>的第二个参数需要一个<code>Comparator</code>实例，而<code>Comparator</code>就是只有一个方法的接口，所以可以提供一个lambda表达式。</p><p>下面是<code>Arrays.sort</code>和<code>Comparator</code>的方法原型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Contract(mutates = &quot;param1&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@NotNull</span> T[] a,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@Nullable</span> Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; c)</span> </span>&#123;<br>    ...<br>&#125;<br>    <br><span class="hljs-meta">@FunctionalInterface</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们可以这样使用<code>Arrays.sort</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Array.sort(words,<br>          (first, second) -&gt; first.length() - second.length());<br></code></pre></td></tr></table></figure><p>这其实就相当于C++11中的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(words.<span class="hljs-built_in">begin</span>(), <br>     words.<span class="hljs-built_in">end</span>(),<br>     [](string first, string second) -&gt; <span class="hljs-keyword">bool</span> &#123; <span class="hljs-keyword">return</span> first.<span class="hljs-built_in">length</span>() &gt; second.<span class="hljs-built_in">length</span>(); &#125;);<br></code></pre></td></tr></table></figure><p>或者C++11前（没有lambda表达式，只能传实名函数）的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">comp</span><span class="hljs-params">(string first, string second)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> first.<span class="hljs-built_in">length</span>() &gt; second.<span class="hljs-built_in">length</span>();<br>&#125; <br><span class="hljs-built_in">sort</span>(words.<span class="hljs-built_in">begin</span>(),words.<span class="hljs-built_in">end</span>(),comp);<br></code></pre></td></tr></table></figure><p>lambda表达式可以转换为函数式接口，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> timer = <span class="hljs-keyword">new</span> Timer (<span class="hljs-number">1000</span>, <br>                      event -&gt; &#123;<br>                          System.out.println(<span class="hljs-string">&quot;At the tone, the time is &quot;</span> + <br>                                            Instant.ofEpochMilli(event.getWhen()));<br>                          Toolkit.getDefaultToolKit().beep();<br>                      &#125;);<br></code></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备考2021年12月CSP学习笔记</title>
    <link href="/2021/11/28/%E5%A4%87%E8%80%832021%E5%B9%B412%E6%9C%88CSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/28/%E5%A4%87%E8%80%832021%E5%B9%B412%E6%9C%88CSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="202109"><a href="#202109" class="headerlink" title="202109"></a>202109</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T129">202109-1 数组推导</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>$A_1, A_2, \cdots, A_n$ 是一个由 $n$ 个<strong>自然数</strong>（即非负整数）组成的数组。在此基础上，我们用数组 $B_1 \cdots B_n$ 表示 $A$ 的前缀最大值。</p><script type="math/tex; mode=display">B_i = \max \left\{ A_1, A_2,  \cdots, A_i \right\}</script><p>如上所示，$B_i$ 定义为数组 $A$ 中前 $i$ 个数的最大值。<br>根据该定义易知 $A_1 = B_1$，且随着 $i$ 的增大，$B_i$ 单调不降。<br>此外，我们用 $sum = A_1 + A_2 + \cdots + A_n$ 表示数组 $A$ 中 $n$ 个数的总和。</p><p>现已知数组 $B$，我们想要根据 $B$ 的值来反推数组 $A$。<br>显然，对于给定的 $B$，$A$ 的取值可能并不唯一。<br>试计算，在数组 $A$ 所有可能的取值情况中，$sum$ 的最大值和最小值分别是多少？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入读入数据。</p><p>输入的第一行包含一个正整数 $n$。</p><p>输入的第二行包含 $n$ 个用空格分隔的自然数 $B_1, B_2, \cdots, B_n$。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出到标准输出。</p><p>输出共两行。</p><p>第一行输出一个整数，表示 $sum$ 的最大值。</p><p>第二行输出一个整数，表示 $sum$ 的最小值。</p><h3 id="样例1输入"><a href="#样例1输入" class="headerlink" title="样例1输入"></a>样例1输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">6<br>0 0 5 5 10 10<br></code></pre></td></tr></table></figure><h3 id="样例1输出"><a href="#样例1输出" class="headerlink" title="样例1输出"></a>样例1输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">30<br>15<br></code></pre></td></tr></table></figure><h3 id="样例1解释"><a href="#样例1解释" class="headerlink" title="样例1解释"></a>样例1解释</h3><p>数组 $A$ 的可能取值包括但不限于以下三种情况。</p><p>情况一：$A = [0, 0, 5, 5, 10, 10]$</p><p>情况二：$A = [0, 0, 5, 3, 10, 4]$</p><p>情况三：$A = [0, 0, 5, 0, 10, 0]$</p><p>其中第一种情况 $sum = 30$ 为最大值，第三种情况 $sum = 15$ 为最小值。</p><h3 id="样例2输入"><a href="#样例2输入" class="headerlink" title="样例2输入"></a>样例2输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">7<br>10 20 30 40 50 60 75<br></code></pre></td></tr></table></figure><h3 id="样例2输出"><a href="#样例2输出" class="headerlink" title="样例2输出"></a>样例2输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">285<br>285<br></code></pre></td></tr></table></figure><h3 id="样例2解释"><a href="#样例2解释" class="headerlink" title="样例2解释"></a>样例2解释</h3><p>$A = [10, 20, 30, 40, 50, 60, 75]$ 是唯一可能的取值，所以 $sum$ 的最大、最小值均为 $285$。</p><h3 id="子任务"><a href="#子任务" class="headerlink" title="子任务"></a>子任务</h3><p>$50%$ 的测试数据满足数组 $B$ 单调递增，即 $0 &lt; B_1 &lt; B_2 &lt; \cdots &lt; B_n &lt; 10^{5}$；</p><p>全部的测试数据满足 $n \le 100$ 且数组 $B$ 单调不降，即 $0 \le B_1 \le B_2 \le \cdots \le B_n \le 10^{5}$。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由题意，显然有$0\le A_i\le B_i$，当想要得到最大值时，只需令$A_i=B_i$，此时的数组$A_1, A_2, \cdots, A_n=B_1 \cdots B_n$，当想要得到最小值时，只需令</p><script type="math/tex; mode=display">A_i=\left\{\begin{aligned}0 & , & B_{i-1} = B_i \\B_i & , & B_{i-1}< B_i \end{aligned}\right.</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>b=[<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br>max_sum=<span class="hljs-built_in">sum</span>(b)<br>min_sum=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> b[i-<span class="hljs-number">1</span>]&gt;=b[i]:<br>        min_sum+=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        min_sum+=b[i]<br>min_sum+=b[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(max_sum)<br><span class="hljs-built_in">print</span>(min_sum)<br></code></pre></td></tr></table></figure><h1 id="202104"><a href="#202104" class="headerlink" title="202104"></a>202104</h1><h2 id="第1题-1"><a href="#第1题-1" class="headerlink" title="第1题"></a>第1题</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T128">202104-1 灰度直方图</a></p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一幅长宽分别为 $n$ 个像素和 $m$ 个像素的灰度图像可以表示为一个 $n×m$ 大小的矩阵 $A$。<br>其中每个元素 $Aij$（$0≤i&lt;n$、$0≤j&lt;m$）是一个 $[0,L)$ 范围内的整数，表示对应位置像素的灰度值。<br>具体来说，一个 $8$ 比特的灰度图像中每个像素的灰度范围是 $[0,128)$。</p><p>一副灰度图像的灰度统计直方图（以下简称“直方图”）可以表示为一个长度为 $L$ 的数组 $h$，其中 $h[x]$（$0≤x&lt;L$）表示该图像中灰度值为 $x$ 的像素个数。显然，$h[0]$ 到 $h[L−1]$ 的总和应等于图像中的像素总数 $n⋅m$。</p><p>已知一副图像的灰度矩阵 $A$，试计算其灰度直方图 $h[0],h[1],⋯,h[L−1]$。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入共 $n+1$ 行。</p><p>输入的第一行包含三个用空格分隔的正整数 $n$、$m$ 和 $L$，含义如前文所述。</p><p>第 $2$ 到第 $n+1$ 行输入矩阵 $A$。<br>第 $i+2$（$0≤i&lt;n$）行包含用空格分隔的 $m$ 个整数，依次为 $A<em>{i0},A</em>{i1},⋯,A_{i(m−1)}$。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出仅一行，包含用空格分隔的 $L$ 个整数 $h[0],h[1],⋯,h[L−1]$，表示输入图像的灰度直方图。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs data">4 4 16<br>0 1 2 3<br>4 5 6 7<br>8 9 10 11<br>12 13 14 15<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br></code></pre></td></tr></table></figure><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs data">7 11 8<br>0 7 0 0 0 7 0 0 7 7 0<br>7 0 7 0 7 0 7 0 7 0 7<br>7 0 0 0 7 0 0 0 7 0 7<br>7 0 0 0 0 7 0 0 7 7 0<br>7 0 0 0 0 0 7 0 7 0 0<br>7 0 7 0 7 0 7 0 7 0 0<br>0 7 0 0 0 7 0 0 7 0 0<br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">48 0 0 0 0 0 0 29<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>全部的测试数据满足 $0&lt;n,m≤500$ 且 $4≤L≤256$。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>模拟题</p><p>根据题意构建各变量然后统计即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m,L=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>A=[]<br>h=[<span class="hljs-number">0</span>]*L<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    A+=[<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> A:<br>    h[a]+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,h)))<br></code></pre></td></tr></table></figure><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T127">202104-2 邻域均值</a></p><h3 id="试题背景"><a href="#试题背景" class="headerlink" title="试题背景"></a>试题背景</h3><p>顿顿在学习了数字图像处理后，想要对手上的一副灰度图像进行降噪处理。不过该图像仅在较暗区域有很多噪点，如果贸然对全图进行降噪，会在抹去噪点的同时也模糊了原有图像。因此顿顿打算先使用<strong>邻域均值</strong>来判断一个像素是否处于<strong>较暗区域</strong>，然后仅对处于<strong>较暗区域</strong>的像素进行降噪处理。</p><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>待处理的灰度图像长宽皆为 $n$ 个像素，可以表示为一个 $n×n$ 大小的矩阵 $A$，其中每个元素是一个 $[0,L)$ 范围内的整数，表示对应位置像素的灰度值。<br>对于矩阵中任意一个元素 $Aij(0≤i,j&lt;n)$，其<strong>邻域</strong>定义为附近若干元素的集合：</p><script type="math/tex; mode=display">Neighbor(i, j, r) = \left\{ A_{xy} | 0 \le x, y < n \mathrm{~and~} |x-i| \le r \mathrm{~and~} |y-j| \le r \right\}</script><p>这里使用了一个额外的参数 $r$ 来指明 $Aij$ 附近元素的具体范围。根据定义，易知 $Neighbor(i,j,r)$ 最多有 $(2r+1)^2$ 个元素。</p><p>如果元素 $Aij$ <strong>邻域</strong>中所有元素的<strong>平均值</strong>小于或等于一个给定的阈值 $t$，我们就认为该元素对应位置的像素处于<strong>较暗区域</strong>。<br>下图给出了两个例子，左侧图像的较暗区域在右侧图像中展示为黑色，其余区域展示为白色。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111281731890.jpg" alt=""></p><p>现给定邻域参数 $r$ 和阈值 $t$，试统计输入灰度图像中有多少像素处于<strong>较暗区域</strong>。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入共 $n+1$ 行。</p><p>输入的第一行包含四个用空格分隔的正整数 $n、L、r $ 和 $t$，含义如前文所述。</p><p>第二到第 $n+1$ 行输入矩阵 $A$。<br>第 $i+2(0≤i&lt;n)$ 行包含用空格分隔的$n$个整数，依次为 $Ai0,Ai1,⋯,Ai(n−1)$。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数，表示输入灰度图像中处于较暗区域的像素总数。</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs data">4 16 1 6<br>0 1 2 3<br>4 5 6 7<br>8 9 10 11<br>12 13 14 15<br></code></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">7<br></code></pre></td></tr></table></figure><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs data">11 8 2 2<br>0 0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0 0<br>0 7 0 0 0 7 0 0 7 7 0<br>7 0 7 0 7 0 7 0 7 0 7<br>7 0 0 0 7 0 0 0 7 0 7<br>7 0 0 0 0 7 0 0 7 7 0<br>7 0 0 0 0 0 7 0 7 0 0<br>7 0 7 0 7 0 7 0 7 0 0<br>0 7 0 0 0 7 0 0 7 0 0<br>0 0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0 0<br></code></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">83<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>70% 的测试数据满足 $n≤100$、$r≤10$。</p><p>全部的测试数据满足 $0&lt;n≤600$、$0&lt;r≤100$ 且 $2≤t&lt;L≤256$。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>题目要求计算领域均值，那么首先要计算的是<script type="math/tex">\sum{Neighbor(i, j, r)}</script>，其次是$|Neighbor(i,j,r)|$，对于<script type="math/tex">\sum{Neighbor(i, j, r)}</script>，不难发现，如果对每一个元素进行暴力求解，将会计算大量重复区域，这样的话我们可以使用<strong>二维前缀和</strong>方法，即对于一个矩阵 $a$，我们定义一个矩阵 $psum$，使得 <script type="math/tex">psum_{x,y}=\sum\limits_{i=1}^{x}\sum\limits_{j=1}^{y}a_{i,j}</script>，那么，要求解某一个特定的子矩阵的和，只需使用容斥原理即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">n,L,r,t=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>A=[[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    A.append([<span class="hljs-number">0</span>]+[<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()])<br>psum=[[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        psum[i][j]=psum[i-<span class="hljs-number">1</span>][j]+psum[i][j-<span class="hljs-number">1</span>]-psum[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+A[i][j]<br>num=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        w=<span class="hljs-built_in">max</span>(j-r,<span class="hljs-number">1</span>)<br>        s=<span class="hljs-built_in">min</span>(j+r,n)<br>        a=<span class="hljs-built_in">max</span>(i-r,<span class="hljs-number">1</span>)<br>        d=<span class="hljs-built_in">min</span>(i+r,n)<br>        st=(psum[d][s]-psum[d][w-<span class="hljs-number">1</span>]-psum[a-<span class="hljs-number">1</span>][s]+psum[a-<span class="hljs-number">1</span>][w-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">if</span> st&lt;=t*((s-w+<span class="hljs-number">1</span>)*(d-a+<span class="hljs-number">1</span>)):<br>            num+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><h3 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T126"> 202104-3 DHCP服务器</a></p><h3 id="试题背景-1"><a href="#试题背景-1" class="headerlink" title="试题背景"></a>试题背景</h3><p><strong>动态主机配置协议</strong>（Dynamic Host Configuration Protocol, DHCP）是一种自动为网络客户端分配 IP 地址的网络协议。当支持该协议的计算机刚刚接入网络时，它可以启动一个 DHCP 客户端程序。后者可以通过一定的网络报文交互，从 DHCP 服务器上获得 IP 地址等网络配置参数，从而能够在用户不干预的情况下，自动完成对计算机的网络设置，方便用户连接网络。DHCP 协议的工作过程如下：</p><ol><li>当 DHCP 协议启动的时候，DHCP 客户端向网络中广播发送 Discover 报文，请求 IP 地址配置；</li><li>当 DHCP 服务器收到 Discover 报文时，DHCP 服务器根据报文中的参数选择一个尚未分配的 IP 地址，分配给该客户端。DHCP 服务器用 Offer 报文将这个信息传达给客户端；</li><li>客户端收集收到的 Offer 报文。由于网络中可能存在多于一个 DHCP 服务器，因此客户端可能收集到多个 Offer 报文。客户端从这些报文中选择一个，并向网络中广播 Request 报文，表示选择这个 DHCP 服务器发送的配置；</li><li>DHCP 服务器收到 Request 报文后，首先判断该客户端是否选择本服务器分配的地址：如果不是，则在本服务器上解除对那个 IP 地址的占用；否则则再次确认分配的地址有效，并向客户端发送 Ack 报文，表示确认配置有效，Ack 报文中包括配置的有效时间。如果 DHCP 发现分配的地址无效，则返回 Nak 报文；</li><li>客户端收到 Ack 报文后，确认服务器分配的地址有效，即确认服务器分配的地址未被其它客户端占用，则完成网络配置，同时记录配置的有效时间，出于简化的目的，我们不考虑被占用的情况。若客户端收到 Nak 报文，则从步骤 1 重新开始；</li><li>客户端在到达配置的有效时间前，再次向 DHCP 服务器发送 Request 报文，表示希望延长 IP 地址的有效期。DHCP 服务器按照步骤 4 确定是否延长，客户端按照步骤 5 处理后续的配置；</li></ol><p>在本题目中，你需要理解 DHCP 协议的工作过程，并按照题目的要求实现一个简单的 DHCP 服务器。</p><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><h4 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h4><p>为了便于实现，我们简化地规定 DHCP 数据报文的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">&lt;发送主机&gt; &lt;接收主机&gt; &lt;报文类型&gt; &lt;IP 地址&gt; &lt;过期时刻&gt;<br></code></pre></td></tr></table></figure><p>DHCP 数据报文的各个部分由空格分隔，其各个部分的定义如下：</p><ul><li>发送主机：是发送报文的主机名，<strong>主机名</strong>是由小写字母、数字组成的字符串，唯一地表示了一个主机；</li><li>接收主机：当有特定的接收主机时，是接收报文的主机名；当没有特定的接收主机时，为一个星号（<code>*</code>）；</li><li>报文类型：是三个大写字母，取值如下：<ul><li><code>DIS</code>：表示 Discover 报文；</li><li><code>OFR</code>：表示 Offer 报文；</li><li><code>REQ</code>：表示 Request 报文；</li><li><code>ACK</code>：表示 Ack 报文；</li><li><code>NAK</code>：表示 Nak 报文；</li></ul></li><li>IP 地址，是一个非负整数：<ul><li>对于 Discover 报文，该部分在发送的时候为 0，在接收的时候忽略；</li><li>对于其它报文，为正整数，表示一个 IP 地址；</li></ul></li><li>过期时刻，是一个非负整数：<ul><li>对于 Offer、Ack 报文，是一个正整数，表示服务器授予客户端的 IP 地址的过期时刻；</li><li>对于 Discover、Request 报文，若为正整数，表示客户端期望服务器授予的过期时刻；</li><li>对于其它报文，该部分在发送的时候为 0，在接收的时候忽略。</li></ul></li></ul><p>例如下列都是合法的 DHCP 数据报文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">a * DIS 0 0<br>d a ACK 50 1000<br></code></pre></td></tr></table></figure><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>为了 DHCP 服务器能够正确分配 IP 地址，DHCP 需要接受如下配置：</p><ul><li>地址池大小 N：表示能够分配给客户端的 IP 地址的数目，且能分配的 IP 地址是 1,2,…,N；</li><li>默认过期时间 Tdef：表示分配给客户端的 IP 地址的默认的过期时间长度；</li><li>过期时间的上限和下限 Tmax、Tmin：表示分配给客户端的 IP 地址的最长过期时间长度和最短过期时间长度，客户端不能请求比这个更长或更短的过期时间；</li><li>本机名称 H：表示运行 DHCP 服务器的主机名。</li></ul><h4 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h4><p>当客户端请求 IP 地址时，首先检查此前是否给该客户端分配过 IP 地址，且该 IP 地址在此后没有被分配给其它客户端。如果是这样的情况，则直接将 IP 地址分配给它，否则，<br>总是分配给它最小的尚未占用过的那个 IP 地址。如果这样的地址不存在，则分配给它最小的此时未被占用的那个 IP 地址。如果这样的地址也不存在，说明地址池已经分配完毕，因此拒绝分配地址。</p><h4 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h4><p>在 DHCP 启动时，首先初始化 IP 地址池，将所有地址设置状态为未分配，占用者为空，并清零过期时刻。<br>其中地址的状态有未分配、待分配、占用、过期四种。<br>处于未分配状态的 IP 地址没有占用者，而其余三种状态的 IP 地址均有一名占用者。<br>处于待分配和占用状态的 IP 地址拥有一个大于零的过期时刻。在到达该过期时刻时，若该地址的状态是待分配，则该地址的状态会自动变为未分配，且占用者清空，过期时刻清零；否则该地址的状态会由占用自动变为过期，且过期时刻清零。处于未分配和过期状态的 IP 地址过期时刻为零，即没有过期时刻。</p><p>对于收到的报文，设其收到的时刻为 t。处理细节如下：</p><ol><li>判断接收主机是否为本机，或者为 <code>*</code>，若不是，则判断类型是否为 Request，若不是，则不处理；</li><li>若类型不是 Discover、Request 之一，则不处理；</li><li>若接收主机为 <code>*</code>，但类型不是 Discover，或接收主机是本机，但类型是 Discover，则不处理。</li></ol><p>对于 Discover 报文，按照下述方法处理：</p><ol><li>检查是否有占用者为发送主机的 IP 地址：<ul><li>若有，则选取该 IP 地址；</li><li>若没有，则选取最小的状态为未分配的 IP 地址；</li><li>若没有，则选取最小的状态为过期的 IP 地址；</li><li>若没有，则不处理该报文，处理结束；</li></ul></li><li>将该 IP 地址状态设置为待分配，占用者设置为发送主机；</li><li>若报文中过期时刻为 0 ，则设置过期时刻为 t+Tdef；否则根据报文中的过期时刻和收到报文的时刻计算过期时间，判断是否超过上下限：若没有超过，则设置过期时刻为报文中的过期时刻；否则则根据超限情况设置为允许的最早或最晚的过期时刻；</li><li>向发送主机发送 Offer 报文，其中，IP 地址为选定的 IP 地址，过期时刻为所设定的过期时刻。</li></ol><p>对于 Request 报文，按照下述方法处理：</p><ol><li>检查接收主机是否为本机：<ul><li>若不是，则找到占用者为发送主机的所有 IP 地址，对于其中状态为待分配的，将其状态设置为未分配，并清空其占用者，清零其过期时刻，处理结束；</li></ul></li><li>检查报文中的 IP 地址是否在地址池内，且其占用者为发送主机，若不是，则向发送主机发送 Nak 报文，处理结束；</li><li>无论该 IP 地址的状态为何，将该 IP 地址的状态设置为占用；</li><li>与 Discover 报文相同的方法，设置 IP 地址的过期时刻；</li><li>向发送主机发送 Ack 报文。</li></ol><p>上述处理过程中，地址池中地址的状态的变化可以概括为如下图所示的状态转移图。为了简洁，该图中没有涵盖需要回复 Nak 报文的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111281721522.jfif" alt=""></p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含用空格分隔的四个正整数和一个字符串，分别是：N、Tdef、Tmax、Tmin 和 H，保证 Tmin≤Tdef≤Tmax。</p><p>输入的第二行是一个正整数 n，表示收到了 n 个报文。</p><p>输入接下来有 n 行，第 (i+2) 行有空格分隔的正整数 ti 和约定格式的报文 Pi。表示收到的第 i 个报文是在 ti 时刻收到的，报文内容是 Pi。保证 ti&lt;ti+1。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出有若干行，每行是一个约定格式的报文。依次输出 DHCP 服务器发送的报文。</p><h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs data">4 5 10 5 dhcp<br>16<br>1 a * DIS 0 0<br>2 a dhcp REQ 1 0<br>3 b a DIS 0 0<br>4 b * DIS 3 0<br>5 b * REQ 2 12<br>6 b dhcp REQ 2 12<br>7 c * DIS 0 11<br>8 c dhcp REQ 3 11<br>9 d * DIS 0 0<br>10 d dhcp REQ 4 20<br>11 a dhcp REQ 1 20<br>12 c dhcp REQ 3 20<br>13 e * DIS 0 0<br>14 e dhcp REQ 2 0<br>15 b dhcp REQ 2 25<br>16 b * DIS 0 0<br></code></pre></td></tr></table></figure><h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs data">dhcp a OFR 1 6<br>dhcp a ACK 1 7<br>dhcp b OFR 2 9<br>dhcp b ACK 2 12<br>dhcp c OFR 3 12<br>dhcp c ACK 3 13<br>dhcp d OFR 4 14<br>dhcp d ACK 4 20<br>dhcp a ACK 1 20<br>dhcp c ACK 3 20<br>dhcp e OFR 2 18<br>dhcp e ACK 2 19<br>dhcp b NAK 2 0<br></code></pre></td></tr></table></figure><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>输入第一行，分别设置了 DHCP 的相关参数，并收到了 16 个报文。</p><p>第 1 个报文和第 2 个报文是客户端 <code>a</code> 正常请求地址，服务器为其分配了地址 1，相应地设置了过期时刻是 7（即当前时刻 2 加上默认过期时间 5）。</p><p>第 3 个报文不符合 Discover 报文的要求，不做任何处理。</p><p>第 4 个报文 <code>b</code> 发送的 Discover 报文虽然有 IP 地址 3，但是按照处理规则，这个字段被忽略，因此服务器返回 Offer 报文，过期时刻是 9。</p><p>第 5 个报文中，Request 报文不符合接收主机是 DHCP 服务器本机的要求，因此不做任何处理。</p><p>第 6 个报文是 <code>b</code> 发送的 Request 报文，其中设置了过期时刻是 12，没有超过最长过期时间，因此返回的 Ack 报文中过期时刻也是 12。</p><p>第 7 个报文中，过期时刻 11 小于最短过期时间，因此返回的过期时刻是 12。虽然此时为 <code>a</code> 分配的地址 1 过期，但是由于还有状态为未分配的地址 3，因此为 <code>c</code> 分配地址 3。第 8 个报文同理，为 <code>c</code> 分配的地址过期时刻是 13。</p><p>第 9、10 两个报文中，为 <code>d</code> 分配了地址 4，过期时刻是 20。</p><p>第 11 个报文中，<code>a</code> 请求重新获取此前为其分配的地址 1，虽然为其分配的地址过期，但是由于尚未分配给其它客户端，因此 DHCP 服务器可以直接为其重新分配该地址，并重新设置过期时刻为 20。</p><p>第 12 个报文中，<code>c</code> 请求延长其地址的过期时刻为 20。DHCP 正常向其回复 Ack 报文。</p><p>第 13、14 个报文中，<code>e</code> 试图请求地址。此时地址池中已经没有处于“未分配”状态的地址了，但是有此前分配给 <code>b</code> 的地址 2 的状态是“过期”，因此把该地址重新分配给 <code>e</code>。</p><p>第 15 个报文中，<code>b</code> 试图重新获取此前为其分配的地址 2，但是此时该地址已经被分配给 <code>e</code>，因此返回 Nak 报文。</p><p>第 16 个报文中，<code>b</code> 试图重新请求分配一个 IP 地址，但是此时地址池中已经没有可用的地址了，因此忽略该请求。</p><h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs data">4 70 100 50 dhcp<br>6<br>5 a * OFR 2 100<br>10 b * DIS 0 70<br>15 b dhcp2 REQ 4 60<br>20 c * DIS 0 70<br>70 d * DIS 0 120<br>75 d dhcp REQ 1 125<br></code></pre></td></tr></table></figure><h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs data">dhcp b OFR 1 70<br>dhcp c OFR 1 70<br>dhcp d OFR 1 120<br>dhcp d ACK 1 125<br></code></pre></td></tr></table></figure><h3 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h3><p>在本样例中，DHCP 服务器一共收到了 6 个报文，处理情况如下：</p><p>第 1 个报文不是 DHCP 服务器需要处理的报文，因此不回复任何报文。</p><p>第 2 个报文中，<code>b</code> 请求分配 IP 地址，因此 DHCP 服务器将地址 1 分配给 <code>b</code>，此时，地址 1 进入待分配状态，DHCP 服务器向 <code>b</code> 发送 Offer 报文。</p><p>第 3 个报文中，<code>b</code> 发送的 REQ 报文是发给非本服务器的，因此需要将地址池中所有拥有者是 <code>b</code> 的待分配状态的地址修改为未分配。</p><p>第 4 个报文中，<code>c</code> 请求分配 IP 地址。由于地址 1 此时是未分配状态，因此将该地址分配给它，向它发送 Offer 报文，地址 1 进入待分配状态。</p><p>第 5、6 个报文中，<code>d</code> 请求分配 IP 地址。注意到在收到第 5 个报文时，已经是时刻 70，地址 1 的过期时刻已到，它的状态已经被修改为了未分配，因此 DHCP 服务器仍然将地址 1 分配给 <code>d</code>。</p><h3 id="评测用例规模与约定-2"><a href="#评测用例规模与约定-2" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 20% 的数据，有 N≤200，且 n≤N，且输入仅含 Discover 报文，且 t&lt;Tmin；</p><p>对于 50% 的数据，有 N≤200，且 n≤N，且 t&lt;Tmin，且报文的接收主机或为本机，或为 <code>*</code>；</p><p>对于 70% 的数据，有 N≤1000，且 n≤N，且报文的接收主机或为本机，或为 <code>*</code>；</p><p>对于 100% 的数据，有 N≤10000，且 n≤10000，主机名的长度不超过 20，且 t,Tmin,Tdefault,Tmax≤109，输入的报文格式符合题目要求，且数字不超过 109。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>模拟就是用计算机来模拟题目中要求的操作。</p><p>大模拟，也就是复杂模拟题，是CSP中T3的的固定题型。</p><p>代码对应的要求已经注释在了旁边，故这里略。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipAddress</span> &#123;</span><br>    <span class="hljs-keyword">int</span> time;<br>    <span class="hljs-keyword">int</span> state;  <span class="hljs-comment">// 1:未分配, 2:待分配, 3:占用, 4:过期</span><br>    string name;<br>&#125;;<br>ipAddress ipPool[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, tdef, tmax, tmin;<br>    string host;<br>    cin &gt;&gt; n &gt;&gt; tdef &gt;&gt; tmax &gt;&gt; tmin &gt;&gt; host;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ipPool[i].state = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">int</span> n2;<br>    cin &gt;&gt; n2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n2; k++) &#123;<br>        string lhost, rhost, type;<br>        <span class="hljs-keyword">int</span> seq, ip, time;<br>        cin &gt;&gt; seq &gt;&gt; lhost &gt;&gt; rhost &gt;&gt; type &gt;&gt; ip &gt;&gt; time;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-comment">// 在到达该过期时刻时</span><br>            <span class="hljs-keyword">if</span> (ipPool[i].time &lt;= seq) &#123;<br>                <span class="hljs-comment">// 若该地址的状态是待分配，则该地址的状态会自动变为未分配，且占用者清空，过期时刻清零；</span><br>                <span class="hljs-keyword">if</span> (ipPool[i].state == <span class="hljs-number">2</span>) &#123;<br>                    ipPool[i].state = <span class="hljs-number">1</span>;<br>                    ipPool[i].name = <span class="hljs-string">&quot;&quot;</span>;<br>                    ipPool[i].time = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-comment">// 否则该地址的状态会由占用自动变为过期，且过期时刻清零。</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ipPool[i].state == <span class="hljs-number">3</span>) &#123;<br>                    ipPool[i].state = <span class="hljs-number">4</span>;<br>                    ipPool[i].time = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 对于收到的报文</span><br>        <span class="hljs-comment">// 判断接收主机是否为本机，或者为 *，若不是，则判断类型是否为 Request，若不是，则不处理；</span><br>        <span class="hljs-comment">// 这里判断类型是否为 Request是在或条件后面，本身就是前两个都为假才判断的，可以写在一行</span><br>        <span class="hljs-keyword">if</span> ((rhost == host || rhost == <span class="hljs-string">&quot;*&quot;</span>) || type == <span class="hljs-string">&quot;REQ&quot;</span>) &#123;<br>            <span class="hljs-comment">// 若类型不是 Discover、Request 之一，则不处理；</span><br>            <span class="hljs-keyword">if</span> (type != <span class="hljs-string">&quot;DIS&quot;</span> &amp;&amp; type != <span class="hljs-string">&quot;REQ&quot;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 若接收主机为 *，但类型不是 Discover，或接收主机是本机，但类型是 Discover，则不处理。</span><br>            <span class="hljs-keyword">if</span> ((rhost == <span class="hljs-string">&quot;*&quot;</span> &amp;&amp; type != <span class="hljs-string">&quot;DIS&quot;</span>) || (rhost == host &amp;&amp; type == <span class="hljs-string">&quot;DIS&quot;</span>))<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 对于 Discover 报文</span><br>            <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;DIS&quot;</span>) &#123;<br>                <span class="hljs-keyword">int</span> select = <span class="hljs-number">-1</span>;<br>                <span class="hljs-comment">// 检查是否有占用者为发送主机的 IP 地址</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                    <span class="hljs-comment">// 若有，则选取该 IP 地址；</span><br>                    <span class="hljs-comment">// 加一条，IP地址应为未分配的</span><br>                    <span class="hljs-keyword">if</span> (ipPool[i].name == lhost &amp;&amp; ipPool[i].state != <span class="hljs-number">1</span>) &#123;<br>                        select = i;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                <span class="hljs-comment">// 若没有，则选取最小的状态为未分配的 IP 地址；</span><br>                <span class="hljs-keyword">if</span> (select == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                        <span class="hljs-keyword">if</span> (ipPool[i].state == <span class="hljs-number">1</span>) &#123;<br>                            select = i;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                &#125;<br>                <span class="hljs-comment">// 若没有，则选取最小的状态为过期的 IP 地址；</span><br>                <span class="hljs-keyword">if</span> (select == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                        <span class="hljs-keyword">if</span> (ipPool[i].state == <span class="hljs-number">4</span>) &#123;<br>                            select = i;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (select != <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-comment">// 将该 IP 地址状态设置为待分配，占用者设置为发送主机；</span><br>                    ipPool[select].state = <span class="hljs-number">2</span>;<br>                    ipPool[select].name = lhost;<br>                    <span class="hljs-comment">// 若报文中过期时刻为 0 ，则设置过期时刻为t+T_def；</span><br>                    <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>)<br>                        ipPool[select].time = seq + tdef;<br>                    <span class="hljs-comment">// 否则根据报文中的过期时刻和收到报文的时刻计算过期时间，判断是否超过上下限：</span><br>                    <span class="hljs-comment">// 计算方法：过期时刻-收到时刻=过期时间</span><br>                    <span class="hljs-comment">// 若没有超过，则设置过期时刻为报文中的过期时刻；</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmin &lt;= time - seq &amp;&amp; time - seq &lt;= tmax)<br>                        ipPool[select].time = time;<br>                    <span class="hljs-comment">// 若没有超过，则设置过期时刻为报文中的过期时刻；</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time - seq &lt; tmin)<br>                        ipPool[select].time = seq + tmin;<br>                    <span class="hljs-comment">// 否则则根据超限情况设置为允许的最早或最晚的过期时刻；</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time - seq &gt; tmax)<br>                        ipPool[select].time = seq + tmax;<br>                    <span class="hljs-comment">// 向发送主机发送 Offer 报文，其中，IP 地址为选定的 IP 地址，过期时刻为所设定的过期时刻。</span><br>                    cout &lt;&lt; host &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; lhost &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;OFR&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; select &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ipPool[select].time &lt;&lt; endl;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 对于 Request 报文</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;REQ&quot;</span>) &#123;<br>                <span class="hljs-comment">// 检查接收主机是否为本机：</span><br>                <span class="hljs-keyword">if</span> (rhost != host) &#123;<br>                    <span class="hljs-comment">// 若不是，则找到占用者为发送主机的所有 IP 地址，对于其中状态为待分配的，将其状态设置为未分配，并清空其占用者，清零其过期时刻，处理结束；</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                        <span class="hljs-keyword">if</span> (ipPool[i].name == lhost &amp;&amp; ipPool[i].state == <span class="hljs-number">2</span>) &#123;<br>                            ipPool[i].state = <span class="hljs-number">1</span>;<br>                            ipPool[i].name = <span class="hljs-string">&quot;&quot;</span>;<br>                            ipPool[i].time = <span class="hljs-number">0</span>;<br>                        &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 检查报文中的 IP 地址是否在地址池内，且其占用者为发送主机</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> &lt;= ip &amp;&amp; ip &lt;= n &amp;&amp; ipPool[ip].name == lhost) &#123;<br>                        <span class="hljs-comment">// 无论该 IP 地址的状态为何，将该 IP 地址的状态设置为占用；</span><br>                        ipPool[ip].state = <span class="hljs-number">3</span>;<br>                        <span class="hljs-comment">// 与 Discover 报文相同的方法，设置 IP 地址的过期时刻；</span><br>                        <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>)<br>                            ipPool[ip].time = seq + tdef;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmin &lt;= time - seq &amp;&amp; time - seq &lt;= tmax)<br>                            ipPool[ip].time = time;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time - seq &lt; tmin)<br>                            ipPool[ip].time = seq + tmin;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time - seq &gt; tmax)<br>                            ipPool[ip].time = seq + tmax;<br>                        <span class="hljs-comment">// 向发送主机发送 Ack 报文。</span><br>                        cout &lt;&lt; host &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; lhost &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;ACK&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ip &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ipPool[ip].time &lt;&lt; endl;<br>                    &#125;<br>                    <span class="hljs-comment">//若不是，则向发送主机发送 Nak 报文，处理结束；</span><br>                    <span class="hljs-keyword">else</span><br>                        cout &lt;&lt; host &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; lhost &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;NAK&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ip &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;0&quot;</span> &lt;&lt; endl;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><h3 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T125">202104-4 校门外的树</a></p><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>X 校最近打算美化一下校园环境。前段时间因为修地铁，X 校大门外种的行道树全部都被移走了。现在 X 校打算重新再种一些树，为校园增添一抹绿意。</p><p>X 校大门外的道路是东西走向的，我们可以将其看成一条数轴。在这条数轴上有 n 个障碍物，例如电线杆之类的。虽然障碍物会影响树的生长，但是障碍物不一定能被随便移走，所以 X 校规定在障碍物的位置上<strong>不能</strong>种树。n 个障碍物的坐标都是整数；如果规定向东为正方向，则 n 个障碍物的坐标按照从西到东的顺序分别为 a1,a2,⋯,an。X 校打算在 [a1,an] 之间种一些树，使得这些树看起来比较美观。</p><p>X 校希望，在一定范围内，树应该是等间隔的。更具体地说，如果把 [a1,an) 划分成一些区间 [ap1,ap2),⋯,[apm−1,apm)（1=p1&lt;p2&lt;⋯&lt;pm=n），那么每个区间 [api,api+1) 内需要至少种一棵树，且该区间内种的树的坐标连同区间端点 api,api+1 应该构成一个等差数列。不同区间的公差，也就是树的间隔可以不相同。</p><p>例如，如果障碍物位于 0,2,6 这三处，那么我们可以选择在 [0,2) 和 [2,6) 分别种树，也可以选择在 [0,6) 等间隔种树。如果是分别在 [0,2) 和 [2,6) 种树，由于每个区间内至少要种一棵树，坐标 1 上必须种树；而 [2,6) 上的树可以按照 1 的间隔种下，也可以按照 2 的间隔种下。下图表示了这两种美观的种树方案，其中橙色的圆表示障碍物，绿色的圆表示需要在这个位置种树，箭头上的数字表示种下这棵树时对应的间隔为多少。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111280209683.png" alt=""></p><p>对区间 [0,2) 和 [2,6) 分别以 1 和 2 的间隔种树是美观的</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111280048528.png" alt=""></p><p>对区间 [0,2) 和 [2,6) 分别以 1 的间隔种树也是美观的</p><p>而如果选择在 [0,6) 区间等间隔种树，我们只能以 3 的间隔种树，因为无论是选择间隔 1 或者间隔 2，都需要在坐标 2 上种树，而这个位置已经有障碍物了。下图分别表示了间隔为 3,2,1 时的种树情况，红色箭头表示不能在这里种树。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111281919845.png" alt=""></p><p>对区间 [0,6) 以 3 的间隔种树是美观的</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111280049170.png" alt=""></p><p>对区间 [0,6) 以 2 的间隔种树是不美观的</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111281921265.png" alt=""></p><p>对区间 [0,6) 以 1 的间隔种树也是不美观的</p><p>一般地，给定一个区间 $[al,ar)$，对于树的坐标的集合 $T⊂(al,ar)(T⊂Z)$，归纳定义 $T$ 在 $[al,ar)$ 上是<strong>美观的</strong>：</p><ol><li>如果 $T≠∅$，$T∩{al,al+1,⋯,ar}=∅$，并且存在一个公差 $d≥1$，使得 $T∪{al,ar}$ 中的元素按照从小到大的顺序排序后，可以构成一个公差为 $d$ 的等差数列（显然，这个等差数列的首项为 $al$，末项为 $ar$），则 $T$ 在 $[al,ar)$ 上是美观的；</li><li>如果 $T∩{al,al+1,⋯,ar}=∅$，并且存在一个下标 $m（l&lt;m&lt;r）$，使得 $T∩(al,am)$ 在 $[al,am)$ 上是美观的，且 $T∩(am,ar)$ 在 $[am,ar)$ 上是美观的，则 $T$ 在 $[al,ar)$ 上是美观的。</li></ol><p>根据这一定义，空集在任意区间上都不是美观的；另外，如果存在下标 $i$ 使得 $ai∈T$，那么 $T$ 一定不是美观的。</p><p>我们称两种种树的方案是<strong>本质不同的</strong>，当且仅当两种方案中，种树的坐标集合不同。请帮助 X 校对 $[a1,an)$ 求出所有本质不同的美观的种树方案。当然，由于方案可能很多，你只需要输出总方案数对 $10^9+7$ 取模的结果。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个正整数 $n$，表示障碍物的数量。</p><p>输入的第二行包括 $n$ 个非负整数 $a1,⋯,an$，表示每个障碍物的坐标。</p><p>保证对 $i=1,2,⋯,n−1$，$ai&lt;ai+1$。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个非负整数，表示本质不同的美观的种树方案的数量对 $10^9+7$ 取模的结果。</p><h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">3<br></code></pre></td></tr></table></figure><h3 id="样例说明-2"><a href="#样例说明-2" class="headerlink" title="样例说明"></a>样例说明</h3><p>这组样例即为题面描述中提到的那组。</p><h3 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">11<br>0 10 20 30 40 50 60 70 80 90 100<br></code></pre></td></tr></table></figure><h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">256507<br></code></pre></td></tr></table></figure><h3 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">333<brbr></code></pre></td></tr></table></figure><h3 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">7094396<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-3"><a href="#评测用例规模与约定-3" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 10% 的数据，保证 n=2；</p><p>对于 30% 的数据，保证 n≤10；</p><p>对于 60% 的数据，保证 n≤100,ai≤1000；</p><p>对于 100% 的数据，保证 2≤n≤1000,0≤ai≤100,000，且至少存在一种美观的种树方案。</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>动态规划+打表</p><p>设$dp[i]$为到第i个障碍物之间的方案总数，那么有状态转移方程</p><script type="math/tex; mode=display">dp[i]=\sum\limits_{j=1}^{i-1}dp[j]\times{calc(j,i)}</script><p>其中$calc(j,i)$为第$j$个障碍物到第$i$个障碍物的方案总数。</p><p>为了得出优化的calc函数进行如下分析：</p><ol><li><p>第j个障碍物到第i个障碍物的间隔必须为obstacles[i]-obstacles[j]的因子，否则树不是等间隔的，挑选撞不上障碍物的因子作为种树方案。</p></li><li><p>若从j从i-1开始倒着枚举，开始时i-1和i之间没有障碍物，即obstacles[i]-obstacles[i-1]的所有因子都是种树方案，将这些因子设为不可再用(false)，当j=i-2时，对因子进行筛选时不可使用false的因子，因为按这些间隔排序一定会撞到原先作为左端点的障碍物。</p><p>所以我们可以从i-1到1遍历j，如果obstacles[i]-obstacles[j]的因子可使用就数量+1并标记为false，否则啥也不干。</p><p>注意当i增长时要重置因子可用集合flag为true。</p></li><li><p>因为我们需要频繁地获取某区间长度的因子，所以可以用筛选法进行预处理，即将因子打个表</p><p>这个表可以从1打到最大长度AMAX，也可以进行时间复杂度的优化，因为</p><ol><li>种树间隔不会超过最大障碍物距离的一半</li><li>种树的区间不会超过最大障碍物距离</li></ol><p>注：最大障碍物距离只是我形象的说法，其实比真实的最大障碍物距离大，因为坐标0不一定有障碍物。</p></li></ol><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-comment">// #define DEBUG  // 定义空的宏，只可判断其是否被定义</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> AMAX = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">int</span> n, obstacles[N];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> dp[N];<br><span class="hljs-keyword">bool</span> flag[AMAX];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; v[AMAX];  <span class="hljs-comment">// 以向量为元素的数组</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = obstacles[y] - obstacles[x];<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d: v[len])<br>        <span class="hljs-keyword">if</span> (flag[d]) &#123;<br>            cnt++;<br>            flag[d] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    flag[len] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;obstacles[i]);<br><br>    <span class="hljs-comment">// 确定以i(种树间隔)为因数的j</span><br>    <span class="hljs-comment">// 经优化的打表，右界可以直接为AMAX</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= obstacles[n] / <span class="hljs-number">2</span>; i++)  <span class="hljs-comment">// 间隔不超过最大障碍物距离的一半</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span> * i; j &lt;= obstacles[n]; j += i)  <span class="hljs-comment">// 两障碍物间至少有一颗树，即间隔i不能为j自己（j=ki&lt;=最大障碍物距离,k=2,3,...）</span><br>            v[j].<span class="hljs-built_in">push_back</span>(i);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> DEBUG</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%2d: &quot;</span>, i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-keyword">int</span>) v[i].<span class="hljs-built_in">size</span>(); j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, v[i][j]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><span class="hljs-comment">// #else</span><br><span class="hljs-comment">//     printf(&quot;Not debugging\n&quot;);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">memset</span>(flag, <span class="hljs-literal">true</span>, <span class="hljs-keyword">sizeof</span> flag);  <span class="hljs-comment">// 刻板印象：sizeof其实是个关键字！后面括号是提优先级用的！</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">1</span>; j--)<br>            dp[i] = (dp[i] + dp[j] * <span class="hljs-built_in">calc</span>(j, i)) % MOD;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, dp[n]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><ol><li><p>宏定义可以定义一个空的宏，如<code>#define DEBUG</code>，这种宏只能被用来判断是否被定义，常用于DEBUG时运行一些不想在RELEASE运行的语句</p><p>使用方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> DEBUG</span><br>    定义了DEBUG时要做的<br>[<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>没定义DEBUG时要做的<br>]<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li><p><code>sizeof</code>其实是个关键字，一直认为它是函数的原因在于它经常加括号使用以区分操作对象</p><p>举个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span>* p=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zd\n&quot;</span>,<span class="hljs-keyword">sizeof</span> p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zd\n&quot;</span>,<span class="hljs-keyword">sizeof</span> p+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zd\n&quot;</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (p+<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">8<br>9<br>8<br></code></pre></td></tr></table></figure><p>注：%zd是sizeof的返回类型unsigned int的输出控制符</p></li></ol><h1 id="202012"><a href="#202012" class="headerlink" title="202012"></a>202012</h1><h2 id="期末预测之安全指数"><a href="#期末预测之安全指数" class="headerlink" title="期末预测之安全指数"></a>期末预测之安全指数</h2><h3 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T123">202012-1 期末预测之安全指数</a></p><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>考虑到安全指数是一个较大范围内的整数、小菜很可能搞不清楚自己是否真的安全，顿顿决定设置一个阈值 $θ$，以便将安全指数 $y$ 转化为一个具体的预测结果——“会挂科”或“不会挂科”。</p><p>因为安全指数越高表明小菜同学挂科的可能性越低，所以当 $y≥θ$ 时，顿顿会预测小菜这学期很安全、不会挂科；反之若 $y&lt;θ$，顿顿就会劝诫小菜：“你期末要挂科了，勿谓言之不预也。”</p><p>那么这个阈值该如何设定呢？顿顿准备从过往中寻找答案。</p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>具体来说，顿顿评估了 $m$ 位同学上学期的安全指数，其中第 $i$（$1≤i≤m$）位同学的安全指数为 $y_i$，是一个 $[0,108]$ 范围内的整数；同时，该同学上学期的挂科情况记作 $resulti∈0,1$，其中 $0$ 表示挂科、$1$ 表示未挂科。</p><p>相应地，顿顿用 <script type="math/tex">predict_{\theta} ( y )</script> 表示根据阈值 $θ$ 将安全指数 $y$ 转化为的具体预测结果。<br>如果 <script type="math/tex">predict_{\theta} ( y_j )</script> 与 $result_j$ 相同，则说明阈值为 $θ$ 时顿顿对第 $j$ 位同学是否挂科预测正确；不同则说明预测错误。</p><script type="math/tex; mode=display">\mathrm{predict}_{\theta} ( y ) = \left\{\begin{array}{cc}0& {(y < \theta)}\\1& {(y \ge \theta)}\end{array}\right.</script><p>最后，顿顿设计了如下公式来计算最佳阈值 $\theta^*$：</p><script type="math/tex; mode=display">\theta^* = \max { \mathop{\mathrm{argmax} }\limits_{\theta \in { y_i } } \sum\limits_{j=1}^{m} ( \mathrm{predict}_{\theta} ( y_j ) == result_j ) }</script><p>该公式亦可等价地表述为如下规则：</p><ol><li>最佳阈值仅在 ${ y_i }$ 中选取，即与某位同学的安全指数相同；</li><li>按照该阈值对这 $m$ 位同学上学期的挂科情况进行预测，预测正确的次数最多（即准确率最高）；</li><li>多个阈值均可以达到最高准确率时，选取其中最大的。</li></ol><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入读入数据。</p><p>输入的第一行包含一个正整数 $m$。</p><p>接下来输入 $m$ 行，其中第 $i$（$1≤i≤m$）行包括用空格分隔的两个整数 $y_i$ 和 $result_i$，含义如上文所述。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出到标准输出。</p><p>输出一个整数，表示最佳阈值 $\theta^∗$。</p><h3 id="样例1输入-1"><a href="#样例1输入-1" class="headerlink" title="样例1输入"></a>样例1输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs data">6<br>0 0<br>1 0<br>1 1<br>3 1<br>5 1<br>7 1<br></code></pre></td></tr></table></figure><h3 id="样例1输出-1"><a href="#样例1输出-1" class="headerlink" title="样例1输出"></a>样例1输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">3<br></code></pre></td></tr></table></figure><h3 id="样例1解释-1"><a href="#样例1解释-1" class="headerlink" title="样例1解释"></a>样例1解释</h3><p>按照规则一，最佳阈值的选取范围为 $0,1,3,5,7$。</p><p>$θ=0$ 时，预测正确次数为 $4$；</p><p>$θ=1$ 时，预测正确次数为 $5$；</p><p>$θ=3$ 时，预测正确次数为 $5$；</p><p>$θ=5$ 时，预测正确次数为 $4$；</p><p>$θ=7$ 时，预测正确次数为 $3$。</p><p>阈值选取为 $1$ 或 $3$ 时，预测准确率最高；<br>所以按照规则二，最佳阈值的选取范围缩小为 $1$,$3$。</p><p>依规则三，$\theta^* = \max { 1, 3 } = 3$。</p><h3 id="样例2输入-1"><a href="#样例2输入-1" class="headerlink" title="样例2输入"></a>样例2输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs data">8<br>5 1<br>5 0<br>5 0<br>2 1<br>3 0<br>4 0<br>100000000 1<br>1 0<br></code></pre></td></tr></table></figure><h3 id="样例2输出-1"><a href="#样例2输出-1" class="headerlink" title="样例2输出"></a>样例2输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">100000000<br></code></pre></td></tr></table></figure><h3 id="子任务-1"><a href="#子任务-1" class="headerlink" title="子任务"></a>子任务</h3><p>$70\%$ 的测试数据保证 $m≤200$；</p><p>全部的测试数据保证 $2≤m≤105$。</p><h3 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h3><p>模拟一个加权公式</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    w,score=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-built_in">sum</span>+=w*score<br>y=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">sum</span>)<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><h2 id="期末预测之最佳阈值"><a href="#期末预测之最佳阈值" class="headerlink" title="期末预测之最佳阈值"></a>期末预测之最佳阈值</h2><h3 id="题目链接-6"><a href="#题目链接-6" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T122"> 202012-2 期末预测之最佳阈值</a></p><h3 id="问题分析-3"><a href="#问题分析-3" class="headerlink" title="问题分析"></a>问题分析</h3><p>前缀和、后缀和</p><p>根据题意和用例规模可以知道很容易写出70分的$O(n^2)$解，其主要优化点在于：</p><ol><li>怎样跳过的相同安全指数$y_i$</li><li>怎样在遍历时确定选定阈值对应的预测正确次数</li></ol><p>不难发现，第一份代码中对于优化点1将<script type="math/tex">y_i</script>和<script type="math/tex">y_{i-1}</script>对比，如果相同则跳过<script type="math/tex">y_i</script>，对于优化点2没做处理，暴力地使用了遍历，在$O(n)$的时间内获取到了预测正确次数，很容易知道在阈值变为下一个的时候，前后两段的预测正确者重合度很高，对于这种情况一般可以使用前/后缀和+容斥原理（本题是一维列表，未用到容斥原理）进行优化。</p><p>第二份代码对于优化点1建立了一个“相等值的下标列表”，对于相等的几个安全指数采用第一个安全指数的下标，对于优化点2，使用前缀和及后缀和在$O(1)$的时间内获取到了预测正确次数。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><p>$O(n^2)$的70分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">m=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>y=[<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-inf&#x27;</span>)]<br>result=[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    y_i,result_i=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    y.append(y_i)<br>    result.append(result_i)<br>best_theta=<span class="hljs-number">0</span><br>best_num=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i,y_i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(y[<span class="hljs-number">1</span>:],<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> y_i==y[i-<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">continue</span><br>    num=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> y[j]&lt;y_i <span class="hljs-keyword">and</span> result[j]==<span class="hljs-number">0</span>:<br>            num+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> y[j]&gt;=y_i <span class="hljs-keyword">and</span> result[j]==<span class="hljs-number">1</span>:<br>            num+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> num&gt;best_num:<br>        best_theta=y_i<br>        best_num=num<br>    <span class="hljs-keyword">elif</span> num==best_num:<br>        best_theta=<span class="hljs-built_in">max</span>(best_theta,y_i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span>(best_theta)<br></code></pre></td></tr></table></figure><p>$O(n)$的100分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">m=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=[]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    a.append([<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()])<br>a.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>])<br>a=[[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]+a<br>prefix=[<span class="hljs-number">0</span>]*(m+<span class="hljs-number">1</span>)<br>suffix=[<span class="hljs-number">0</span>]*(m+<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>    prefix[i]=prefix[i-<span class="hljs-number">1</span>]+(<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> a[i][<span class="hljs-number">1</span>]==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m,<span class="hljs-number">1</span>-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    suffix[i]=suffix[i+<span class="hljs-number">1</span>]+(<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> a[i][<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)<br><br>pos=<span class="hljs-number">1</span><br>equal_position=[<span class="hljs-number">0</span>]*(m+<span class="hljs-number">1</span>)  <span class="hljs-comment"># 相等值的下标列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span>(a[i][<span class="hljs-number">0</span>]==a[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]):<br>        equal_position[i]=pos<br>    <span class="hljs-keyword">else</span>:<br>        pos=i<br>        equal_position[i]=pos<br><br>best_theta=<span class="hljs-number">0</span><br>best_num=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>    current_num=prefix[equal_position[i]-<span class="hljs-number">1</span>]+suffix[i]<br>    <span class="hljs-keyword">if</span> current_num&gt;=best_num:<br>        best_num=current_num<br>        best_theta=a[i][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(best_theta)<br></code></pre></td></tr></table></figure><h1 id="202006"><a href="#202006" class="headerlink" title="202006"></a>202006</h1><h2 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h2><h3 id="题目链接-7"><a href="#题目链接-7" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T105">202006-1 线性分类器</a></p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>简单模拟</p><p>按类别将输入分好类</p><p>然后使用judgeX函数分别判断A类B类点代入后是否都具有相同的符号。</p><p>这里用到了一点高中数学的知识，在同一侧的点代入函数后都应该有相同的符号，至于在某一侧是否有固定的符号我记不清了，所以我先获取了第一个点代入后的符号，然后看后面的点是否都跟这个符号相等，其实这两个符号应该是正负相反的，但是数据集好像没有考这里，有点混乱，做出来就行。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>pointsA=[]<br>pointsB=[]<br>lines=[]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">judgeX</span>(<span class="hljs-params">X</span>):</span><br>    pointsX=pointsA <span class="hljs-keyword">if</span> X==<span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">else</span> pointsB<br>    point=pointsX[<span class="hljs-number">0</span>]<br>    part1=<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]+line[<span class="hljs-number">1</span>]*point[<span class="hljs-number">0</span>]+line[<span class="hljs-number">2</span>]*point[<span class="hljs-number">1</span>]&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> pointsX[<span class="hljs-number">1</span>:]:<br>        part2=<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]+line[<span class="hljs-number">1</span>]*point[<span class="hljs-number">0</span>]+line[<span class="hljs-number">2</span>]*point[<span class="hljs-number">1</span>]&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> part2!=part1:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    expoint=<span class="hljs-built_in">input</span>().split()<br>    point=[<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> expoint[:<span class="hljs-number">2</span>]]<br>    <span class="hljs-keyword">if</span> expoint[<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27;A&#x27;</span>:<br>        pointsA.append(point)<br>    <span class="hljs-keyword">else</span>:<br>        pointsB.append(point)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    line=[<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br>    lines.append(line)<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-keyword">if</span> judgeX(<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-keyword">and</span> judgeX(<span class="hljs-string">&#x27;B&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="稀疏向量"><a href="#稀疏向量" class="headerlink" title="稀疏向量"></a>稀疏向量</h2><h3 id="题目链接-8"><a href="#题目链接-8" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T104">202006-2 稀疏向量</a></p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>基本思路是用映射把稀疏向量保存起来，只有两个向量的键上都有值时才求他们值的乘积，其余情况的乘积都是0，那么可以使用集合求键的交集来实现找相同元素，解法一基于此思路，但这样要考虑到求交集所需的时间，据<a href="https://wiki.python.org/moin/TimeComplexity">python wiki</a>，<code>Intersection s&amp;t</code>的平均时间复杂度为<code>O(min(len(s), len(t))</code>，而解法二的<code>k in d</code>的平均时间复杂度为<code>O(1)</code>，所以我们可以把“求交”替换为“属于”。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112041918065.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112041918633.png" alt=""></p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><p>90分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">n,a,b=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>vector1=&#123;&#125;<br>v1index=<span class="hljs-built_in">set</span>()<br>vector2=&#123;&#125;<br>v2index=<span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a):<br>    indexi,valuei=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    vector1[indexi]=valuei<br>    v1index.add(indexi)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>    indexj,valuej=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    vector2[indexj]=valuej<br>    v2index.add(indexj)<br>sameindex=<span class="hljs-built_in">list</span>(v1index.intersection(v2index))  <span class="hljs-comment"># 求交集时间复杂度O(min(len(s), len(t))</span><br>mul=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> sameindex:<br>    mul+=vector1[index]*vector2[index]<br><span class="hljs-built_in">print</span>(mul)<br></code></pre></td></tr></table></figure><p>100分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">n,a,b=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>vector1=&#123;&#125;<br>mul=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a):<br>    indexi,valuei=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    vector1[indexi]=valuei<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>    indexj,valuej=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">if</span> indexj <span class="hljs-keyword">in</span> vector1.keys():<br>        mul+=vector1[indexj]*valuej<br><span class="hljs-built_in">print</span>(mul)<br></code></pre></td></tr></table></figure><h1 id="201709"><a href="#201709" class="headerlink" title="201709"></a>201709</h1><h2 id="通信网络"><a href="#通信网络" class="headerlink" title="通信网络"></a>通信网络</h2><h3 id="题目链接-9"><a href="#题目链接-9" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T60">201709-4 通信网络</a></p><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>DFS</p><p>一道比较简单的DFS，用C++11风格写的</p><p>首先要有</p><ol><li>一个二维long long向量，用来表示图</li><li>一个二维bool向量，用来表示i知道j</li><li>一个一维bool向量，用来表示“访问过”，这里本应是二维，为了降低空间复杂度把它设计成了一维，每次将它重新初始化为“未访问过”(false)</li></ol><p>接着设计一个DFS函数</p><ol><li>对于进入到函数中的点对，标记为“访问过”（true）</li><li>对于进入到函数中的点对，将他们标记为互相知道</li><li>对于点对中第一个点的每个出度点，若没被访问过，将他们扔入dfs函数</li></ol><p>最后在主函数中</p><ol><li>将输入构造为邻接表（由稀疏向量有感：邻接表其实就是稀疏的邻接矩阵）</li><li>将每一个点和它自己扔入dfs函数（每个点肯定知道自己）</li><li>最后按行遍历“二维知道向量”，如果某行知道所有点（true的数量等于点的数量），把结果自增1</li></ol><p>至于为什么这道题不取消visit标记，我不知道。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll=<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">const</span> ll MAX=<span class="hljs-number">1000</span>+<span class="hljs-number">5</span>;<br>ll ni,mi;<br>vector&lt;vector&lt;ll&gt;&gt; <span class="hljs-built_in">graph</span>(MAX);<br>vector&lt;vector&lt;<span class="hljs-keyword">bool</span>&gt;&gt; <span class="hljs-built_in">know</span>(MAX,vector&lt;<span class="hljs-keyword">bool</span>&gt;(MAX));<br><span class="hljs-function">vector&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">visit</span><span class="hljs-params">(MAX)</span></span>;  <span class="hljs-comment">// 邻接表的每行都复用它</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll v,ll s)</span></span>&#123;<br>    visit[v]=<span class="hljs-literal">true</span>;<br>    know[s][v]=know[v][s]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(ll i:graph[v])&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> visit[i])<br>            <span class="hljs-built_in">dfs</span>(i,s);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;ni&gt;&gt;mi;<br>    <span class="hljs-keyword">while</span>(mi--)&#123;<br>        ll ai,bi;<br>        cin&gt;&gt;ai&gt;&gt;bi;<br>        graph[ai].<span class="hljs-built_in">push_back</span>(bi);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=ni;i++)&#123;<br>        <span class="hljs-built_in">fill</span>(visit.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>,visit.<span class="hljs-built_in">begin</span>()+ni+<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>);<br>        <span class="hljs-built_in">dfs</span>(i,i);<br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=ni;i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">count</span>(know[i].<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>,know[i].<span class="hljs-built_in">begin</span>()+ni+<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>)==ni)<br>            ans++;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON查询"><a href="#JSON查询" class="headerlink" title="JSON查询"></a>JSON查询</h2><h3 id="题目链接-10"><a href="#题目链接-10" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T61">201709-3 JSON查询</a></p><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>震惊我一整年的题，python花活太多了</p><p>一个是这个输入正好符合python中dict的样式，可以直接用exec将字符串作为语句执行</p><p>第二是可以直接导入json库，用本身的loads函数创建半结构数据</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><p>100分法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>op=<span class="hljs-string">&#x27;dic=&#x27;</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    op+=<span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">exec</span>(op)  <span class="hljs-comment"># 这个执行会自动转义&quot;却不会转义\，奇怪</span><br><span class="hljs-comment"># print(dic)</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    query=<span class="hljs-built_in">input</span>().replace(<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>)  <span class="hljs-comment"># 这第二个字符串参数竟然不支持转义</span><br>    op=<span class="hljs-string">&#x27;res=dic&#x27;</span><br>    obj=query.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> obj:<br>        op+=<span class="hljs-string">f&#x27;[<span class="hljs-subst">&#123;<span class="hljs-built_in">repr</span>(o)&#125;</span>]&#x27;</span><br>    <span class="hljs-comment"># print(op)</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">exec</span>(op)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NOTEXIST&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(res,<span class="hljs-built_in">str</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;STRING&#x27;</span>,res)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;OBJECT&#x27;</span>)<br></code></pre></td></tr></table></figure><p>100分法二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><br>json_str = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    json_str += <span class="hljs-built_in">input</span>()<br><br>data = json.loads(json_str)  <span class="hljs-comment"># 我勒个大草tmd竟然能直接载入</span><br><br><span class="hljs-comment"># type(data) # dict</span><br><span class="hljs-comment"># print(data)  # &#123;&#x27;firstName&#x27;: &#x27;John&#x27;, &#x27;lastName&#x27;: &#x27;Smith&#x27;, &#x27;address&#x27;: &#123;&#x27;streetAddress&#x27;: &#x27;2ndStreet&#x27;, &#x27;city&#x27;: &#x27;NewYork&#x27;, &#x27;state&#x27;: &#x27;NY&#x27;&#125;, &#x27;esc\\aped&#x27;: &#x27;&quot;hello&quot;&#x27;&#125;</span><br><br><span class="hljs-comment"># print(type(data[&#x27;firstName&#x27;]))  # &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-comment"># print(type(data[&#x27;address&#x27;]))  # &lt;class &#x27;dict&#x27;&gt;</span><br><span class="hljs-comment"># print(type(data[&#x27;address&#x27;][&#x27;city&#x27;]))  # &lt;class &#x27;str&#x27;&gt;</span><br><br>querys = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    querys.append(<span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;.&quot;</span>))<br><br><span class="hljs-comment"># json_type=&#123;</span><br><span class="hljs-comment">#     str:&quot;STRING&quot;,</span><br><span class="hljs-comment">#     dict:&quot;OBJECT&quot;</span><br><span class="hljs-comment">#     &#125;</span><br><br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> querys:<br>    search = <span class="hljs-string">&quot;data&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> q:<br>            search += <span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;<span class="hljs-built_in">repr</span>(x)&#125;</span>]&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(search)) == <span class="hljs-built_in">str</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;STRING&quot;</span>, <span class="hljs-built_in">eval</span>(search))<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(search)) == <span class="hljs-built_in">dict</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OBJECT&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception:  <span class="hljs-comment"># 这里单用KeyError只能得90，还有我没考虑到的异常，为了保险所有异常都从这走</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NOTEXIST&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/26/hello-world/"/>
    <url>/2021/11/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
