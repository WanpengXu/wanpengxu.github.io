<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深度学习之路</title>
    <link href="/2022/01/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <url>/2022/01/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="明确概念"><a href="#明确概念" class="headerlink" title="明确概念"></a>明确概念</h2><h3 id="人工智能、机器学习、深度学习"><a href="#人工智能、机器学习、深度学习" class="headerlink" title="人工智能、机器学习、深度学习"></a>人工智能、机器学习、深度学习</h3><p>人工智能是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门技术科学。</p><p>机器学习是使计算机具有智能的一类算法，如神经网络算法。</p><p>深度学习是机器学习中一种基于对数据进行表征学习的算法，可认为是改良版的神经网络算法。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201201010779.png" alt="一图流"></p><h3 id="mxnet、pytorch、tensorflow"><a href="#mxnet、pytorch、tensorflow" class="headerlink" title="mxnet、pytorch、tensorflow"></a>mxnet、pytorch、tensorflow</h3><p>待补充</p><h3 id="AnaConda、Conda、MiniConda"><a href="#AnaConda、Conda、MiniConda" class="headerlink" title="AnaConda、Conda、MiniConda"></a>AnaConda、Conda、MiniConda</h3><p>待补充</p><h2 id="关于conda"><a href="#关于conda" class="headerlink" title="关于conda"></a>关于conda</h2><p>虽说，学习一样知识不应过于关注其以外的内容，就像学习编程语言不应过于关注IDE，能跑就行，学习深度学习，也不应过于关注环境，同样能跑就行。</p><p>但我有强迫症，研究conda到底是个什么东西，要从这个Warning说起。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221004567.png" alt=""></p><p>google查询发现是pytorch和CUDA的版本兼容问题，需要cudatoolkit=11.3，但</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221007700.png" alt=""></p><p>我的虚拟环境装的CUDA版本就是11.3，所以它可能用了我base环境里的10.3的CUDA。</p><p>问题引入完毕，我们先来看看conda到底是什么</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221031685.png" alt=""></p><p>Conda 是一个开源包管理系统和环境管理系统。</p><p>可见Conda是pip功能的一个超集，不只可以管理包、还可以管理环境。</p><p>那让我们看看Conda所管理的环境，事实上这个目录是Conda的base环境。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221123760.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221133818.png" alt=""></p><p>再看看python环境</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221124861.png" alt=""></p><p>可以看到，Conda环境确实是python环境的超集。</p><p>再来看看Conda所管理的其他环境，进入<code>~\envs</code></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221138279.png" alt=""></p><p>除Conda自带的base环境外，我还创建了两个Conda环境：<code>gluon</code>和<code>myenv</code></p><p>进入myenv看看</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221139607.png" alt=""></p><p>可见也是python环境的超集。</p><p>那么为了区分二者，我们可以简单地认为Conda环境不是python环境，它包含的功能比python环境要多。</p><p>接下来介绍一下两种环境如何安装包。</p><p>python环境下，python官方推荐使用pip进行包管理。</p><p>接下来插入一下多个python环境并存的情况。</p><p>当系统中有多个python环境时，比如我有一个python3.9，一个python3.10（下面那个估计是微软自己装的依赖）。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221507668.png" alt=""></p><p>它优先使用的python环境是在系统环境变量中靠上的那个</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221510126.png" alt=""></p><p>如图，在系统环境变量中python39比python310靠上，所以在命令行中操作时若输入了二者环境中都有的程序时，会优先使用上面环境中的程序。</p><p>下面以pip程序来举个例子</p><p>先来看看两个python环境下的pip程序都有哪些</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221515550.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221025665.png" alt=""></p><p>接下来试着调用一下这些程序</p><p>当调用两个环境下独有的程序时，使用相应的环境。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221516087.png" alt=""></p><p>当调用两个环境下共有的程序时，使用系统环境变量中靠上的环境。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221516247.png" alt=""></p><p>那么Conda命令行的pip呢？</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221521574.png" alt=""></p><p>可以看出这个现象是等价于在我们的python环境变量上方加入了Conda环境。</p><p>这样，直接使用pip就会往Conda环境里下载包（装程序）。</p><p>同样地，在哪个Conda环境下使用pip，就会往哪个Conda环境里下载包。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221525795.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221526158.png" alt=""></p><p><code>conda</code>命令自不用说，也是往自己的环境里下载包（激活不同的Conda环境一试便知）</p><p>既然在Conda命令行下<code>conda install SomePackage</code> 和<code>pip install SomePackage</code>是往同一个地方下载包，那么他们有什么区别吗？</p><p>以下引自其他博客。</p><p>pip是用来安装python包的，安装的是python wheel或者源代码的包。从源码安装的时候需要有编译器的支持，pip也不会去支持python语言之外的依赖项。</p><p>conda是用来安装conda package，虽然大部分conda包是python的，但它支持了不少非python语言写的依赖项，比如mkl cuda这种c c++写的包。然后，conda安装的都是编译好的二进制包，不需要你自己编译。所以，pip有时候系统环境没有某个编译器可能会失败，conda不会。这导致了conda装东西的体积一般比较大，尤其是mkl这种，动不动几百兆甚至一G多。</p><p>conda和pip对于环境依赖的处理不同，总体来讲，conda比pip更加严格，conda会检查当前环境下所有包之间的依赖关系，pip可能对之前安装的包就不管了。这样做的话，conda基本上安上了就能保证工作，pip有时候可能装上了也不work。</p><p>这个我比较有感触，比如cudatoolkit它是一个C++库，就只能用<code>conda install cudatoolkit=11.3</code>，而不能用<code>pip install cudatoolkit==11.3</code>，注意一点微小的区别，<code>conda install SomePackage</code> 指定版本时要用<code>=</code>，而<code>pip install SomePackage</code>指定版本时要用<code>==</code>。</p><p>另外，pip还可以指定版本的上下界，如<code>pip install &#39;SomePackage&gt;=1.0.4&#39;</code>。（能不能同时指定还未知）</p><p>conda应该也能，暂时用不到就懒得测试了，再说。</p><p>另外，我说了半天的<code>cudatoolkit</code>和NVIDIA的<code>CUDA</code>是一回事吗？</p><p>不是，<code>cudatoolkit</code>可以理解为<code>CUDA</code>在深度学习场景下的最小安装，只包含了CUDA中的动态链接库，这样就足以支持深度学习框架。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221548540.png" alt=""></p><p>确实就只有库。</p><p>装好了，爽。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221912550.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221914084.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201221912187.png" alt=""></p><h2 id="jupyter-notebook、jupyter-lab的优雅启动方式"><a href="#jupyter-notebook、jupyter-lab的优雅启动方式" class="headerlink" title="jupyter notebook、jupyter lab的优雅启动方式"></a>jupyter notebook、jupyter lab的优雅启动方式</h2><ol><li><p>生成配置文件</p><p><code>jupyter notebook --generate-config</code></p></li><li><p>改两行代码，去掉注释使其生效</p><p>改默认路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c.NotebookApp.notebook_dir = <span class="hljs-string">r&#x27;E:\d2l-zh-2.0-pytorch&#x27;</span><br></code></pre></td></tr></table></figure><p>改默认浏览器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c.NotebookApp.browser = <span class="hljs-string">&#x27;C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe %s&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>把快捷方式拷到桌面上</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201222321111.png" alt=""></p><p>这个快捷方式可以在开始菜单找到</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201222323816.png" alt=""></p><p>但是怎么创建的我给忘了。。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA Open EXAM Study</title>
    <link href="/2022/01/09/JAVA-Open-EXAM-Study/"/>
    <url>/2022/01/09/JAVA-Open-EXAM-Study/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-Open-EXAM-Study"><a href="#JAVA-Open-EXAM-Study" class="headerlink" title="JAVA Open EXAM Study"></a>JAVA Open EXAM Study</h1><h2 id="Chap1-概述"><a href="#Chap1-概述" class="headerlink" title="Chap1 概述"></a>Chap1 概述</h2><h3 id="开发环境配置、环境变量、系统变量、编译是哪个、虚拟机是哪个？"><a href="#开发环境配置、环境变量、系统变量、编译是哪个、虚拟机是哪个？" class="headerlink" title="开发环境配置、环境变量、系统变量、编译是哪个、虚拟机是哪个？"></a>开发环境配置、环境变量、系统变量、编译是哪个、虚拟机是哪个？</h3><p>JAVA_HOME：JAVA安装目录</p><p><strong>PATH：%JAVA_HOME%\bin</strong></p><p>CLASSPATH：用户级类库</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071139160.png" alt=""></p><p>编译程序：JDK（含javac.exe和java.exe）</p><p>运行程序：JRE（含java.exe）</p><p>虚拟机：JVM</p><p>关系：</p><ol><li><p>JVM+核心类库(lib/*.jar)=JRE</p></li><li><p>JDK&gt;JRE&gt;JVM</p></li></ol><h3 id="源文件后缀、中间字节码后缀？"><a href="#源文件后缀、中间字节码后缀？" class="headerlink" title="源文件后缀、中间字节码后缀？"></a>源文件后缀、中间字节码后缀？</h3><p>.java</p><p>.class</p><h3 id="源文件命名？编译后出现几个字节码？"><a href="#源文件命名？编译后出现几个字节码？" class="headerlink" title="源文件命名？编译后出现几个字节码？"></a>源文件命名？编译后出现几个字节码？</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071135270.png" alt=""></p><p>关于2）：内部类也会生成class字节码文件，若为匿名内部类，则<code>文件名=&quot;外部类&quot;+&quot;$&quot;+num（该外部类的第几个内部类）+&quot;.class&quot;</code></p><h2 id="Chap2、3-语法"><a href="#Chap2、3-语法" class="headerlink" title="Chap2、3 语法"></a>Chap2、3 语法</h2><h3 id="用户标识符命名规则？"><a href="#用户标识符命名规则？" class="headerlink" title="用户标识符命名规则？"></a>用户标识符命名规则？</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071452570.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071508222.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071510806.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071510931.png" alt="is me"></p><h3 id="基本数据类型？类型转换？"><a href="#基本数据类型？类型转换？" class="headerlink" title="基本数据类型？类型转换？"></a>基本数据类型？类型转换？</h3><p>8中基本数据类型及其存储需求、默认值。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071458249.png" alt=""></p><p>类型转换：</p><ol><li>隐式转换（自动转换）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071456962.png" alt=""></p><p>更精确的隐式类型转换图</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071514399.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071537459.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071543526.png" alt=""></p><ol><li>强制转换</li></ol><p><code>(类型名)转换数值</code></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071538863.png" alt=""></p><h3 id="数据作用域、初始化？"><a href="#数据作用域、初始化？" class="headerlink" title="数据作用域、初始化？"></a>数据作用域、初始化？</h3><p>成员变量：编译器</p><p>形参：实参</p><p>局部变量、块变量：用户</p><p>数组初始化：基本数据类型为各自默认初始值，对象（Object）类型为null</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071532268.png" alt=""></p><h3 id="运算符？"><a href="#运算符？" class="headerlink" title="运算符？"></a>运算符？</h3><p>优先级：单目 &gt; <strong>算术</strong> &gt; 移位 &gt; <strong>关系</strong> &gt; <strong>逻辑</strong> &gt; 三目 &gt; 赋值</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071527958.png" alt="image-20220107152753858"></p><h3 id="参数传递？（函数栈帧）"><a href="#参数传递？（函数栈帧）" class="headerlink" title="参数传递？（函数栈帧）"></a><strong>参数传递</strong>？（函数栈帧）</h3><ol><li>画出主调方法和被调方法的栈帧，其中含有引用或值（基本数据类型）</li><li>画出堆（new出来的对象变量放这）或常量池（直接在代码中给出的变量放这，重复变量只放一个）</li><li>画出箭头将引用指向对应的变量</li><li>分析</li></ol><p>static执行的时机</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091109699.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test3</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> staticVar;<br>    <span class="hljs-keyword">int</span> instanceVar;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStaticVar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        staticVar=i;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setVar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        staticVar=i;<br>        instanceVar=i;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;staticVar=&quot;</span>+Test3.staticVar);<br>        setStaticVar(<span class="hljs-number">11</span>);<br>        System.out.println(<span class="hljs-string">&quot;staticVar=&quot;</span>+Test3.staticVar);<br>        Test3 test3=<span class="hljs-keyword">new</span> Test3();<br>        test3.setVar(<span class="hljs-number">13</span>);<br>        System.out.println(<span class="hljs-string">&quot;staticVar=&quot;</span>+Test3.staticVar);<br>        System.out.println(<span class="hljs-string">&quot;test3&#x27;s instanceVar=&quot;</span>+test3.instanceVar);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">staticVar</span>=0<br><span class="hljs-attribute">staticVar</span>=11<br><span class="hljs-attribute">staticVar</span>=13<br>test3<span class="hljs-string">&#x27;s instanceVar=13</span><br></code></pre></td></tr></table></figure><h2 id="Chap4-面向对象"><a href="#Chap4-面向对象" class="headerlink" title="Chap4 面向对象"></a>Chap4 面向对象</h2><h3 id="访问权限修饰符？非访问权限修饰符？"><a href="#访问权限修饰符？非访问权限修饰符？" class="headerlink" title="访问权限修饰符？非访问权限修饰符？"></a>访问权限修饰符？非访问权限修饰符？</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071617524.png" alt=""></p><h3 id="继承？多态？覆盖？重载？"><a href="#继承？多态？覆盖？重载？" class="headerlink" title="继承？多态？覆盖？重载？"></a>继承？多态？覆盖？重载？</h3><p>子类可以继承父类的所有成员，但被<code>private</code>修饰的成员是不可见的。</p><p>在继承机制中，不允许在子类中降低成员(包括变量和方法)的访问权限。</p><p>如果子类中新定义的静态成员变量与父类中的某个静态成员变量同名，则这两个静态成员变量相互独立。</p><p>编译时类型由声明该变量时使用的类型（引用的类型）决定</p><p>运行时类型由实际赋给该变量的对象的类型（实例的类型）决定。</p><p><strong>因为有编译时类型的限制，所以变量所调用的方法只能来自编译时类型的方法</strong></p><p>覆盖：函数原型完全一致，即返回值类型、方法名、参数列表</p><p>重载：方法名相同而参数列表不同</p><h3 id="对象初始化-实例化过程？（作业二）"><a href="#对象初始化-实例化过程？（作业二）" class="headerlink" title="对象初始化/实例化过程？（作业二）"></a>对象初始化/实例化过程？（作业二）</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201071715394.png" alt=""></p><p>注：1处不准确，若是第一次加载类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.oop;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    控制台打印</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">baseFieldInit</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">&quot;Base Normal Field&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">baseStaticFieldInit</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">&quot;Base Static Field&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">fieldInit</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">&quot;Normal Field&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">staticFieldInit</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">&quot;Static Field&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *基类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <span class="hljs-comment">/*1*/</span> <span class="hljs-keyword">static</span> &#123;System.out.println(<span class="hljs-string">&quot;Base Static Block 1&quot;</span>);&#125;<br>    <span class="hljs-comment">/*1*/</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String staticValue=Log.baseStaticFieldInit();<br>    <span class="hljs-comment">/*1*/</span> <span class="hljs-keyword">static</span> &#123;System.out.println(<span class="hljs-string">&quot;Base Static Block 2&quot;</span>);&#125;<br><br>    <span class="hljs-comment">/*3*/</span> &#123;System.out.println(<span class="hljs-string">&quot;Base Normal Block 1&quot;</span>);&#125;<br>    <span class="hljs-comment">/*3*/</span> <span class="hljs-keyword">private</span> String value=Log.baseFieldInit();<br>    <span class="hljs-comment">/*3*/</span> &#123;System.out.println(<span class="hljs-string">&quot;Base Normal Block 2&quot;</span>);&#125;<br><br>    <span class="hljs-comment">/*4*/</span> Base()&#123;System.out.println(<span class="hljs-string">&quot;Base Constructor&quot;</span>);&#125;<br><br>    <span class="hljs-comment">/*3*/</span> &#123;System.out.println(<span class="hljs-string">&quot;Base Normal Block 3&quot;</span>);&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *派生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span></span>&#123;<br>    <span class="hljs-comment">/*2*/</span> <span class="hljs-keyword">static</span> &#123;System.out.println(<span class="hljs-string">&quot;Static Block 1&quot;</span>);&#125;<br>    <span class="hljs-comment">/*2*/</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String staticValue=Log.staticFieldInit();<br>    <span class="hljs-comment">/*2*/</span> <span class="hljs-keyword">static</span> &#123;System.out.println(<span class="hljs-string">&quot;Static Block 2&quot;</span>);&#125;<br><br>    <span class="hljs-comment">/*5*/</span> &#123;System.out.println(<span class="hljs-string">&quot;Normal Block 1&quot;</span>);&#125;<br>    <span class="hljs-comment">/*5*/</span> <span class="hljs-keyword">private</span> String value=Log.fieldInit();<br>    <span class="hljs-comment">/*5*/</span> &#123;System.out.println(<span class="hljs-string">&quot;Normal Block 2&quot;</span>);&#125;<br>    <span class="hljs-comment">/*6*/</span> Derived()&#123;System.out.println(<span class="hljs-string">&quot;Derived Constructor&quot;</span>);&#125;<br><br>    <span class="hljs-comment">/*5*/</span> &#123;System.out.println(<span class="hljs-string">&quot;Normal Block 3&quot;</span>);&#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  MAIN 主线程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Derived d=<span class="hljs-keyword">new</span> Derived();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（1 2只在加载进正文段时执行一次）</p><ol><li>父类static字段/块</li><li>子类static字段/块</li><li>子类构造方法进<code>super()</code>，父类构造方法进<code>this()</code>，父类非static字段/块（包括构造方法后的）</li><li>父类构造方法其余操作</li><li>子类构造方法<code>super()</code>结束，子类构造方法进<code>this()</code>，子类非static字段/块（包括构造方法后的）</li><li>子类构造方法其余操作</li></ol><p>注：方法只有指名道姓时才会被调用。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scss">Base Static Block 1  <span class="hljs-comment">// 父类static</span><br>Base Static Field  <span class="hljs-comment">// 父类static</span><br>Base Static Block 2  <span class="hljs-comment">// 父类static</span><br>Static Block 1  <span class="hljs-comment">// 子类static</span><br>Static Field  <span class="hljs-comment">// 子类static</span><br>Static Block 2  <span class="hljs-comment">// 子类static</span><br>Base <span class="hljs-attribute">Normal</span> Block 1  <span class="hljs-comment">// 父类非static</span><br>Base <span class="hljs-attribute">Normal</span> Field  <span class="hljs-comment">// 父类非static</span><br>Base <span class="hljs-attribute">Normal</span> Block 2  <span class="hljs-comment">// 父类非static</span><br>Base <span class="hljs-attribute">Normal</span> Block 3   <span class="hljs-comment">// 父类非static</span><br>Base Constructor  <span class="hljs-comment">// 父类构造方法其余操作</span><br><span class="hljs-attribute">Normal</span> Block 1  <span class="hljs-comment">// 子类非static</span><br><span class="hljs-attribute">Normal</span> Field  <span class="hljs-comment">// 子类非static</span><br><span class="hljs-attribute">Normal</span> Block 2  <span class="hljs-comment">// 子类非static</span><br><span class="hljs-attribute">Normal</span> Block 3  <span class="hljs-comment">// 子类非static</span><br>Derived Constructor  <span class="hljs-comment">// 子类构造方法其余操作</span><br></code></pre></td></tr></table></figure><p>初始化过程常与动态绑定结合出题</p><ul><li>如果通过子类构造函数调用父类构造函数（无论显示还是隐式），父类在构造时调用了被子类重写的方法，实际上调用的是子类覆盖的方法。<ul><li><strong>优点：通过继承相同的父类，初始化不同子类时，父类会调用不同的复写方法（真正new的那个子类的复写方法），从而实现多态性。</strong></li><li><strong>缺点：若是在父类构造函数中调用被子类重写的方法，会致使导致重写的方法在子类构造器的全部代码以前执行（子类构造函数在<code>super()</code>中，还没有<code>this()</code>），从而致使子类重写的方法访问不到子类实例变量的值，因为此时这些变量尚未被初始化。</strong>（作业二）</li></ul></li></ul><p>作业二魔改版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.oop2;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;base&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Base</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// this();  // 这里只是为了理解，程序角度并不正确</span><br>        tellName();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tellName</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Base tell name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;derived2&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Derived2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// super();</span><br>        <span class="hljs-comment">// this();  // 这里只是为了理解，程序角度并不正确</span><br>        tellName();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tellName</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Derived2 tell name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;derived&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Derived</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// super();</span><br>        <span class="hljs-comment">// this();  // 这里只是为了理解，程序角度并不正确</span><br>        tellName();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tellName</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Derived tell name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DerivedDerived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Derived</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;derivedDerived&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DerivedDerived</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// super();</span><br>        <span class="hljs-comment">// this();  // 这里只是为了理解，程序角度并不正确</span><br>        tellName();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tellName</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;DerivedDerived tell name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Derived();<br>        <span class="hljs-keyword">new</span> Derived2();<br>        <span class="hljs-keyword">new</span> DerivedDerived();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Derived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: null<br>Derived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: derived<br>Derived2 <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: null<br>Derived2 <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: derived2<br>DerivedDerived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: null<br>DerivedDerived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: null<br>DerivedDerived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: derivedDerived<br></code></pre></td></tr></table></figure><p>流程：</p><ol><li><strong>new Derived();</strong></li><li><strong>Derived里的super(</strong>) 进Base()</li><li><strong>Base里的this()</strong>：<code>private String name = &quot;base&quot;;</code>，这时Base.name=”base”,Derived.name=null</li><li><strong>Base里的其他</strong>：<code>tellName()</code>，这个方法被主调类重写了，所以调的是Derived.tellname()</li><li><strong>Derived里的this（）</strong>：<code>private String name = &quot;derived&quot;;</code>,这时Base.name=”base”,Derived.name=”derived”</li><li><strong>Derived里的其他</strong>：tellName()，自己就是将其重写的主调类，所以调的是Derived.tellname()</li><li><strong>new Derived2();</strong></li><li>…</li></ol><p>其他流程都差不多，要注意的是父类构造函数调的方法一定是被真正new的子类重写的</p><h3 id="接口？抽象类？"><a href="#接口？抽象类？" class="headerlink" title="接口？抽象类？"></a>接口？抽象类？</h3><p>详见<strong>课后小结</strong></p><p>接口：interface</p><p>接口是对希望符合这个接口的类的一组<strong>需求</strong>。</p><p>接口没有实例。</p><p>接口中的所有方法都是<code>public</code>，所有字段都是<code>public static final</code></p><p>实现接口的类若非抽象类，则必须实现接口中的所有方法</p><p>实现接口时必须将方法声明为<code>public</code>，因为缺省访问权限为包内权限，编译器会报错，认为你试图提供更严格的（更弱的）访问权限</p><p>当方法冲突时：</p><ol><li><p>超类冲突，超类优先</p></li><li><p>接口冲突，抛给程序员解决</p><p>使用<code>&#123;接口名&#125;.super.&#123;方法名&#125;</code>解决冲突</p></li></ol><p><strong>接口可以使用extends多继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.grammar;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayA</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayB</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>, <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayC</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">C</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayA</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;This is interface A&#x27;s implement.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayB</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;This is interface B&#x27;s implement.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayC</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;This is interface C&#x27;s implement.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test4 test4 = <span class="hljs-keyword">new</span> Test4();<br>        test4.displayA();<br>        test4.displayB();<br>        test4.displayC();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>抽象类：abstract</p><p>可以提供方法实现</p><p>修饰符任意</p><p>抽象类也只能被单继承</p><h3 id="内部类？匿名内部类？"><a href="#内部类？匿名内部类？" class="headerlink" title="内部类？匿名内部类？"></a>内部类？匿名内部类？</h3><p>内部类（inner class）：定义在另一个类中的类。</p><p>使用内部类的原因：</p><ol><li>内部类可以对同一个包中的其他类隐藏</li><li>内部类方法可以访问外围类的作用域中所有的数据，包括原本私有的数据</li><li>便于<strong>回调</strong></li></ol><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;   <span class="hljs-comment">// 外部类</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>&#123; <span class="hljs-comment">// 嵌套类，或称为内部类</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure><p>内部类与外围类的字段、方法处于相同地位（都是外围类的成员）</p><p>内部类可以直接访问外围类成员</p><p><strong>匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.anonymousinnerclasstest;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am Class1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Class1</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am Class2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class1 commonClassObject = <span class="hljs-keyword">new</span> Class2();<br>        commonClassObject.display();<br><br>        Class1 anonymousInnerClassObject = <span class="hljs-keyword">new</span> Class1() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;I am Class3&quot;</span>);<br>            &#125;<br>        &#125;;<br>        anonymousInnerClassObject.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Chap5-异常"><a href="#Chap5-异常" class="headerlink" title="Chap5 异常"></a>Chap5 异常</h2><h3 id="异常处理机制？"><a href="#异常处理机制？" class="headerlink" title="异常处理机制？"></a>异常处理机制？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    ...<br>&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>    ...<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.exception;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.print(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            method1(args);<br>            System.out.print(<span class="hljs-string">&#x27;e&#x27;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.print(<span class="hljs-string">&#x27;m&#x27;</span>);<br>        &#125;<br>        System.out.print(<span class="hljs-string">&#x27;f&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(String[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            method2(a);<br>            System.out.print(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-comment">//        &#125; catch (Exception e) &#123;</span><br><span class="hljs-comment">//            System.out.print(&#x27;n&#x27;);</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.print(<span class="hljs-string">&#x27;c&#x27;</span>);<br>        &#125;<br>        System.out.print(<span class="hljs-string">&#x27;d&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(String[] a)</span> </span>&#123;<br>        System.out.println(a[a.length]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正常的结果<code>abcdef</code>,<code>m</code>和<code>n</code>作为捕获异常的标志</p><p>带注释，存在异常抛出</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">acmf</span><br></code></pre></td></tr></table></figure><p>去掉注释，各try块正常接受异常<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ancdef</span><br></code></pre></td></tr></table></figure></p><p>出现异常立刻中断，找本try块的catch、finally，如果没有被catch就往主调函数抛直到被catch或不能再抛而报错。</p><p><strong>带资源的try</strong></p><p>资源在try块结束后会自动关闭，不需要finally</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;file1.data&quot;</span>);<br>     ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(fileInputStream)) &#123;<br>            Equation equation = (Equation) objectInputStream.readObject();<br>            System.out.println(<span class="hljs-string">&quot;已将文件\&quot;file1.data\&quot;中的byte数组反序列化为一元二次方程对象&quot;</span>);<br>            equation.display();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in)) &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="声明语句？"><a href="#声明语句？" class="headerlink" title="声明语句？"></a>声明语句？</h3><p>throws</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Equation</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b, <span class="hljs-keyword">double</span> c)</span> <span class="hljs-keyword">throws</span> AWrongException</span><br></code></pre></td></tr></table></figure><h3 id="抛出语句？"><a href="#抛出语句？" class="headerlink" title="抛出语句？"></a>抛出语句？</h3><p>throw</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AWrongException(<span class="hljs-string">&quot;二次项系数不能为0！&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Chap6-核心类"><a href="#Chap6-核心类" class="headerlink" title="Chap6 核心类"></a>Chap6 核心类</h2><h3 id="包装类？-star-Interger"><a href="#包装类？-star-Interger" class="headerlink" title="包装类？:star:Interger"></a>包装类？:star:Interger</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201081143437.png" alt="image-20220108114300287"></p><p>自动装箱</p><p><strong>编译器</strong>加上<code>Integer.valueOf()</code></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201081143638.png" alt=""></p><p>自动拆箱</p><p><strong>编译器</strong>加上<code>.intValue()</code></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201081144378.png" alt=""></p><p><strong>Integer类的方法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201081151007.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201081155072.png" alt=""></p><p>直译</p><p><code>compareTo</code>：比较</p><p><code>intValue</code>：int型值</p><p><code>parseInt</code>：转为int型</p><p><code>valueOf</code>：取()作为Integer的值</p><p><code>toString</code>：转为String型</p><h3 id="String？（除正则）"><a href="#String？（除正则）" class="headerlink" title="String？（除正则）"></a>String？（除正则）</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090929205.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090930896.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090931010.png" alt=""></p><p>另，前两个方法应为：</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090939965.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090938257.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090932520.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090933210.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090933167.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090933683.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090934578.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091010731.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091010256.png" alt=""></p><h3 id="泛型类？（选择、考使用、遇到的问题）"><a href="#泛型类？（选择、考使用、遇到的问题）" class="headerlink" title="泛型类？（选择、考使用、遇到的问题）"></a>泛型类？（选择、考使用、遇到的问题）</h3><p>泛型类：有一个或多个类型的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> T first;<br>    <span class="hljs-keyword">private</span> T second;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pair</span><span class="hljs-params">()</span> </span>&#123;<br>        first = <span class="hljs-keyword">null</span>;<br>        second = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pair</span><span class="hljs-params">(T first, T second)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>        <span class="hljs-keyword">this</span>.second = second;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getFirst</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getSecond</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> second;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFirst</span><span class="hljs-params">(T first)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSecond</span><span class="hljs-params">(T second)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.second = second;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090953078.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090944975.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090954313.png" alt=""></p><p>泛型方法</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090958902.png" alt=""></p><p>有界泛型</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091002061.png" alt=""></p><p>定义：</p><p><code>&lt;T extends 类型1&gt;</code>：继承自类型1的任意类型T</p><p>使用：</p><p><code>&lt;? extends 类型1&gt;</code>：继承自类型1的任意类型</p><p><code>&lt;? super 类型1&gt;</code>：是类型1父类的任意类型</p><p>类型擦除</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091000994.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090954631.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090956060.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201090957800.png" alt=""></p><p>StringBuffer</p><p><img src="C:/Users/XuWanpeng/AppData/Roaming/Typora/typora-user-images/image-20220109101510866.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuffer stringBuffer=<span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;2022年1月9日&quot;</span>);<br>        stringBuffer.append(<span class="hljs-string">&quot;我&quot;</span>);<br>        stringBuffer.append(<span class="hljs-string">&quot;学不完&quot;</span>);<br>        stringBuffer.append(<span class="hljs-string">&quot;了&quot;</span>);<br>        stringBuffer.delete(<span class="hljs-number">11</span>,<span class="hljs-number">12</span>);<br>        stringBuffer.insert(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;终于&quot;</span>);<br>        String string=stringBuffer.toString();<br>        System.out.println(string);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO？"><a href="#IO？" class="headerlink" title="IO？"></a>IO？</h3><p>节点流、包装流考1-2选择</p><p>略</p><p>Scanner要会应用。</p><h2 id="Chap7-图形编程GUI"><a href="#Chap7-图形编程GUI" class="headerlink" title="Chap7 图形编程GUI"></a>Chap7 图形编程GUI</h2><p>先把这几个包写上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.*;<br><span class="hljs-keyword">import</span> javax.swing.*;<br></code></pre></td></tr></table></figure><p>创建GUI程序可以有两种思路</p><p>第一种是直接生成JFarme的实例，使用它自带的方法。（少）</p><p>第二种是写一个继承自JFarme的类（实名类或匿名类），按我们的需要重载它的方法，最后只需要一句话生成它的实例即可。（多）</p><p>第二种方法有一个好处是可以直接在类里调用方法，不用指定对象。</p><h3 id="布局管理器有哪些？布局管理器怎么用？组件怎么放？"><a href="#布局管理器有哪些？布局管理器怎么用？组件怎么放？" class="headerlink" title="布局管理器有哪些？布局管理器怎么用？组件怎么放？"></a>布局管理器有哪些？布局管理器怎么用？组件怎么放？</h3><p>布局管理器有哪些？</p><ol><li><p>FlowLayout 流布局（Jpanel默认）</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091513625.png" alt=""></p></li><li><p><strong>BoarderLayout 边框布局</strong>（JFrame默认）</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091514549.png" alt=""></p></li><li><p>GridLayout 网格布局</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091515514.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091518993.png" alt=""></p></li><li><p>CardLayout 卡片布局</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091518895.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091518872.png" alt=""></p></li><li><p>GridBagLayout</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091520104.png" alt=""></p></li></ol><h3 id="事件处理机制？（监听器）"><a href="#事件处理机制？（监听器）" class="headerlink" title="事件处理机制？（监听器）"></a>事件处理机制？（监听器）</h3><ol><li>对本类<strong>实现事件处理接口</strong></li><li>使用<strong>匿名内部类</strong>（多个方法，如鼠标事件MouseAdapter）/<strong>lambda表达式</strong>（函数式方法，如按键事件ActionListener）</li><li>使用<strong>外部类</strong></li></ol><p>本质上都是往里传一个自定义了方法的<strong>类</strong></p><h3 id="绘制图像？（Paint-Grahpics-g-、repaint-）"><a href="#绘制图像？（Paint-Grahpics-g-、repaint-）" class="headerlink" title="绘制图像？（Paint(Grahpics g)、repaint()）"></a>绘制图像？（Paint(Grahpics g)、repaint()）</h3><p>一个例子解决这些问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.gui;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.*;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GUIDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ActionListener</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span> draw = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">private</span> JButton jButton1 = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> JButton jButton2 = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> JButton jButton3 = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> JButton jButton4 = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GUIDemo</span><span class="hljs-params">(String title)</span> </span>&#123;<br>        setTitle(title);<br>        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br><span class="hljs-comment">//        setLayout(new FlowLayout());</span><br>        setLayout(<span class="hljs-keyword">new</span> BorderLayout());<br>        setBounds(<span class="hljs-number">500</span>, <span class="hljs-number">250</span>, <span class="hljs-number">300</span>, <span class="hljs-number">200</span>);<br>        jButton1 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;按钮1&quot;</span>);<br>        jButton2 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;按钮2&quot;</span>);<br>        jButton3 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;按钮1&quot;</span>);<br>        jButton4 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;按钮4&quot;</span>);<br>        jButton3.setText(<span class="hljs-string">&quot;按钮3&quot;</span>);<br><span class="hljs-comment">//        add(jButton1);</span><br><span class="hljs-comment">//        add(jButton2);</span><br><span class="hljs-comment">//        add(jButton3);</span><br>        add(jButton1, BorderLayout.NORTH);<br>        add(jButton2, BorderLayout.SOUTH);<br>        add(jButton3, BorderLayout.WEST);<br>        add(jButton4, BorderLayout.EAST);<br>        add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;按钮5&quot;</span>), BorderLayout.CENTER);<br><br>        <span class="hljs-comment">// 传匿名内部类</span><br>        jButton1.addActionListener(<span class="hljs-keyword">new</span> ActionListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>                jButton1.setEnabled(<span class="hljs-keyword">false</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 传lambda</span><br>        jButton2.addActionListener(e -&gt; jButton2.setEnabled(<span class="hljs-keyword">false</span>));<br><br>        <span class="hljs-comment">// 传lambda</span><br>        jButton3.addActionListener(e -&gt; &#123;<br>            draw = <span class="hljs-keyword">false</span>;  <span class="hljs-comment">// 控制是否绘图</span><br>            JFrame jFrame = <span class="hljs-keyword">new</span> JFrame(<span class="hljs-string">&quot;图&quot;</span>) &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>                    <span class="hljs-keyword">super</span>.paint(g);<br>                    g.setColor(Color.RED);<br>                    <span class="hljs-keyword">if</span> (draw) &#123;  <span class="hljs-comment">// 防止窗口在实例化时即显示图形</span><br>                        g.drawOval(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>                        g.drawRect(<span class="hljs-number">300</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125;<br>            &#125;;<br>            jFrame.setBounds(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">500</span>, <span class="hljs-number">300</span>);<br>            jFrame.setVisible(<span class="hljs-keyword">true</span>);<br>            jFrame.addMouseListener(<span class="hljs-keyword">new</span> MouseAdapter() &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseClicked</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br>                    draw = <span class="hljs-keyword">true</span>;<br>                    jFrame.repaint();<br>                &#125;<br>            &#125;);<br>        &#125;);<br><br>        <span class="hljs-comment">// 传本类</span><br>        jButton4.addActionListener(<span class="hljs-keyword">this</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        jButton4.setEnabled(<span class="hljs-keyword">false</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        GUIDemo guiDemo = <span class="hljs-keyword">new</span> GUIDemo(<span class="hljs-string">&quot;考试&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Graphics-g怎么画圆形？正方形？"><a href="#Graphics-g怎么画圆形？正方形？" class="headerlink" title="Graphics g怎么画圆形？正方形？"></a>Graphics g怎么画圆形？正方形？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.paint(g);<br>        g.setColor(Color.RED);<br>        g.drawOval(x,y,w,h);<br>        g.drawRect(x,y,w,h)；    <span class="hljs-comment">//矩形</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>常用组件</strong></p><p><code>JButton</code></p><p>无常用方法</p><p><code>JTextField</code></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091554831.png" alt=""></p><p><code>JLabel</code></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091554166.png" alt=""></p><p><strong>JFarme常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">setTitle(title);<br><br>setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br><br>setLayout(<span class="hljs-keyword">new</span> BorderLayout());<br><br>setLocation(x,y);<br>setSize(w,h);<br>setBounds(x, y, w, h);<br><br>add()<br>    <br>setVisible(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><h2 id="Chap8-线程"><a href="#Chap8-线程" class="headerlink" title="Chap8 线程"></a>Chap8 线程</h2><h3 id="线程类定义？（构造线程的方法？）"><a href="#线程类定义？（构造线程的方法？）" class="headerlink" title="线程类定义？（构造线程的方法？）"></a>线程类定义？（构造线程的方法？）</h3><p>线程是一个继承自Thread的对象或一个实现了Runnable接口的对象</p><ol><li><p>继承Thread</p><p><code>extends Thread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//code</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol><li><p>实现Runnable接口，通过Thread包装</p><p><code>implements Runnable</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//code</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>开始线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread t1 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>);<br>t1.start();<br></code></pre></td></tr></table></figure><h3 id="线程六态转换的方法？"><a href="#线程六态转换的方法？" class="headerlink" title="线程六态转换的方法？"></a>线程六态转换的方法？</h3><p>线程的六种状态：</p><ul><li>New 新建</li><li>Runnable 可运行</li><li>Blocked 阻塞</li><li>Waiting 等待</li><li>Timed waiting 计时等待</li><li>Terminated 终止</li></ul><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201091613069.png" alt=""></p><p>start：新建-&gt;可运行</p><p>yield：运行-&gt;可运行</p><p>stop：运行-&gt;终止</p><p>join：可运行-&gt;等待/计时等待</p><p>wait：挂起，可运行-&gt;等待/计时等待，只能因等待期满唤醒或被notify唤醒</p><p>notify：唤醒，等待/计时等待-&gt;可运行</p><p>sleep：暂停程序，运行-&gt;计时等待，睡眠期满时，等待-&gt;<strong>可运行</strong>（仍要等待时间片）</p><p><strong>计时等待都要指定参数</strong></p><h3 id="线程同步？（synchronized互斥）"><a href="#线程同步？（synchronized互斥）" class="headerlink" title="线程同步？（synchronized互斥）"></a>线程同步？（synchronized互斥）</h3><p>同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span> <span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>同步语句块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (对象/类/<span class="hljs-keyword">this</span>)&#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Guard.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Guard</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> value = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">final</span> String str = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (str) &#123;<br>            System.out.println(<span class="hljs-string">&quot;=====start=====&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;get value is: &quot;</span> + value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (str) &#123;<br>            value++;<br>            System.out.println(<span class="hljs-string">&quot;value + 1: &quot;</span> + value);<br>            System.out.println(<span class="hljs-string">&quot;======end======&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyThread.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Guard guard;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(Guard guard)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.guard=guard;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            guard.getValue();<br>            <span class="hljs-keyword">try</span>&#123;<br>                sleep(<span class="hljs-number">1000</span>);  <span class="hljs-comment">// 静态方法</span><br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.getStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>YourThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YourThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Guard guard;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">YourThread</span><span class="hljs-params">(Guard guard)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.guard=guard;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            guard.setValue();<br>            <span class="hljs-keyword">try</span>&#123;<br>                sleep(<span class="hljs-number">1000</span>);  <span class="hljs-comment">// 静态方法</span><br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.getStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.exam.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Guard guard=<span class="hljs-keyword">new</span> Guard();<br>        MyThread myThread=<span class="hljs-keyword">new</span> MyThread(guard);<br>        YourThread yourThread=<span class="hljs-keyword">new</span> YourThread(guard);<br>        myThread.start();<br>        yourThread.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs routeros">=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 0<br>value + 1: 1<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 1<br>value + 1: 2<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 2<br>value + 1: 3<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 3<br>value + 1: 4<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 4<br>value + 1: 5<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 5<br>value + 1: 6<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 6<br>value + 1: 7<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 7<br>value + 1: 8<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 8<br>value + 1: 9<br>======<span class="hljs-attribute">end</span>======<br>=====<span class="hljs-attribute">start</span>=====<br><span class="hljs-builtin-name">get</span> value is: 9<br>value + 1: 10<br>======<span class="hljs-attribute">end</span>======<br><br>进程已结束,退出代码0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Java语言及网络编程》作业</title>
    <link href="/2022/01/02/%E3%80%8AJava%E8%AF%AD%E8%A8%80%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%8B%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/01/02/%E3%80%8AJava%E8%AF%AD%E8%A8%80%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%8B%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="作业一"><a href="#作业一" class="headerlink" title="作业一"></a>作业一</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>计算多项式1！+2！+3！…+n!，当多项式之和超过10000时停止，并输出累加之和以及n的值。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>将多项式记为$\sum\limits_{i=1}^{n}i!$ ，那么显然程序需要两部分</p><ul><li>对$i$求其阶乘$i!$的部分，在factorial方法中完成</li><li>对$i!$进行循环求和的部分，在main方法中完成</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">First</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; sum &lt;= <span class="hljs-number">10000</span>; i++) &#123;<br>            sum += factorial(i);<br>            n = i;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;sum=&quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;n=&quot;</span> + n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">factorial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> x == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : x * factorial(x - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021748550.png" alt=""></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>从标准输入端输入一个字符，判断字符是数字、西文字母还是其他的字符。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>题目限定使用<strong>标准输入</strong>获取<strong>字符</strong>，即需要使用<code>(char) System.in.read()</code>，判断字符类型只需判断区间即可，java会隐式地将char转为ASCII码（int）进行比较。</p><p>值得注意的是java必须对可能被抛出的异常进行捕获或声明，否则编译不予通过，这体现了语言的健壮性。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Second</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">char</span> ch = (<span class="hljs-keyword">char</span>) System.in.read();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;0&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>                System.out.println(ch + <span class="hljs-string">&quot; is digit&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;a&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;z&#x27;</span> || <span class="hljs-string">&#x27;A&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)<br>                System.out.println(ch + <span class="hljs-string">&quot; is letter&quot;</span>);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(ch + <span class="hljs-string">&quot; is other&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">// System.out.println(&quot;Error reading from user&quot;);</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021748490.png" alt=""></p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>利用辗转相除法（欧几里得算法）求两个正整数的最大公约数</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>欧几里得算法依赖于原理: $gcd(a,b) = gcd(b, a\ mod\ b)$ </p><p>$proof：$</p><p>​        不妨设$a&gt;b$且$r=a\ mod\ b$ ,$r$不为0</p><p>​        那么有$a=kb+r$</p><p>​        假设d是a,b的一个公约数，记作$d|a$, $d|b$</p><p>​        由$r = a - kb$得$\frac{r}{d}=\frac{a}{d}-k\frac{b}{d}$</p><p>​        因为$d|a$, $d|b$，所以$\frac{a}{d}-k\frac{b}{d}\in{Z}$</p><p>​        即$\frac{r}{d}\in{Z}$，$d|r$，$d|(a\ mod\ b)$</p><p>​        因为$d|a$,  $d|b$,  $d|(a\ mod\ b)$</p><p>​        所以$d<em>{max}|a$,  $d</em>{max}|b$,  $d_{max}|(a\ mod\ b)$</p><p>​        即 $gcd(a,b) = gcd(b, a\ mod\ b)$ </p><p>​        $Q.E.D.$</p><p>值得注意的是，我们看似只证明了$a&gt;b$时的辗转相除法，但算法实现时不需要考虑$a&lt;b$的情况，因为如果$a&lt;b$，那么$a\ mod\ b=a$，即 $gcd(a,b) = gcd(b, a\ mod\ b)=gcd(b,a)$ ，仍然是$gcd(较大数, 较小数)$的形式。</p><p>另外，Scanner对象使用后需要关闭。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Third</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner reader = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> x = reader.nextInt();<br>            <span class="hljs-keyword">int</span> y = reader.nextInt();<br>            System.out.println(<span class="hljs-string">&quot;gcd(&quot;</span> + x + <span class="hljs-string">&quot;,&quot;</span> + y + <span class="hljs-string">&quot;)=&quot;</span> + gcd(x, y));<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            reader.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a % b == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> b;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> gcd(b, a % b);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021748691.png" alt=""></p><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>假设一个数在1000到1100之间，那除以3结果余2，除以5结果余3，除以7结果余2（中国剩余定理），求此数。</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>题目限定了未知数的范围，应该是在暗示使用穷举法。</p><p>这道题用中国剩余定理（CRT）做的话最小答案应该是23，另外java没有引用传递，我目前还没办法编写CRT算法所需的拓展欧几里得除法。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fourth</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x=<span class="hljs-number">1000</span>;x&lt;=<span class="hljs-number">1100</span>;x++)&#123;<br>            <span class="hljs-keyword">if</span> (x % <span class="hljs-number">3</span> == <span class="hljs-number">2</span> &amp;&amp; x % <span class="hljs-number">5</span> == <span class="hljs-number">3</span> &amp;&amp; x % <span class="hljs-number">7</span> == <span class="hljs-number">2</span>)<br>                System.out.println(x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021748748.png" alt=""></p><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>小球从100米高度自由落下，每次触地后反弹到原来高度的一半，求第10次触地时经历的总路程以及第10次反弹高度。</p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>基本上是学习每种语言必写的一道题了，按照题意模拟即可。</p><p>要注意的是“第10次触地<strong>时</strong>经历的总路程”和与“第10次反弹高度”同义的“第10次触地<strong>后</strong>的反弹高度”</p><p>我们进行模拟的时候只能模拟一个来回，即触地前的下落过程和触地后的反弹过程，那么对于<strong>“触地时”</strong>这种发生在一个来回中间的事件，我们要么在十个来回结束后减去最后一次的半个来回（反弹过程） ，要么单独只模拟九个来回，最后一个来回单独算，要么在模拟来回的过程中加一个中断<code>if (i == 10) sumTen=sum</code>……总之方法很多，我选择了第一个。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fifth</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> h = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            sum += h;<br>            h /= <span class="hljs-number">2</span>;<br>            sum += h;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Total distance at 10th touchdown=&quot;</span> + (sum - h));<br>        System.out.println(<span class="hljs-string">&quot;Height of rise after 10th touchdown=&quot;</span> + h);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行截图-4"><a href="#运行截图-4" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021748158.png" alt=""></p><h1 id="作业二"><a href="#作业二" class="headerlink" title="作业二"></a>作业二</h1><h2 id="第一题-1"><a href="#第一题-1" class="headerlink" title="第一题"></a>第一题</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p>读程序，写结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpengxu.homework2;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(D obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;A and D&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(A obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;A and A&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(B obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;B and B&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(A obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;B and A&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(C obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;C and C&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(B obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;C and B&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(D obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;D and D&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(B obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;D and B&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mainTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        A a1 = <span class="hljs-keyword">new</span> A();<br>        A a2 = <span class="hljs-keyword">new</span> B();<br>        B b = <span class="hljs-keyword">new</span> B();<br>        C c = <span class="hljs-keyword">new</span> C();<br>        D d = <span class="hljs-keyword">new</span> D();<br>        System.out.println(a1.Show(b));<br>        System.out.println(a1.Show(c));<br>        System.out.println(a1.Show(d));<br>        System.out.println(a2.Show(b));<br>        System.out.println(a2.Show(c));<br>        System.out.println(a2.Show(d));<br>        System.out.println(b.Show(b));<br>        System.out.println(b.Show(c));<br>        System.out.println(b.Show(d));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs armasm">A <span class="hljs-keyword">and</span> A<br>A <span class="hljs-keyword">and</span> A<br>A <span class="hljs-keyword">and</span> D<br><span class="hljs-keyword">B</span> <span class="hljs-keyword">and</span> A<br><span class="hljs-keyword">B</span> <span class="hljs-keyword">and</span> A<br>A <span class="hljs-keyword">and</span> D<br><span class="hljs-keyword">B</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">B</span><br><span class="hljs-keyword">B</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">B</span><br>A <span class="hljs-keyword">and</span> D<br></code></pre></td></tr></table></figure><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>先来看一下类图</p><pre><code class=" mermaid">classDiagram     A &lt;|-- B     B &lt;|-- C     B &lt;|-- D     class A&#123;         +Show(D obj) String         +Show(A obj) String     &#125;     class B&#123;         +Show(B obj) String         +Show(A obj) String     &#125;     class C&#123;         +Show(C obj) String         +Show(B obj) String     &#125;     class D&#123;         +Show(D obj) String         +Show(B obj) String     &#125;</code></pre><p>继承链：从某个特定的类到其祖先的路径。</p><p>在类图中继承链便是从某个类沿向上箭头直到最初的祖先的路径。</p><p>动态绑定方法调用的优先问题 ，优先级由高到低依次为：一级调度this.show(O)、二级调度super.show(O)、三级调度this.show((super)O)、 四级调度super.show((super)O)</p><p>首先是a1对象的调用，由<code>A a1 = new A();</code>知a1的编译时类型是A，运行时类型是<strong>A</strong>，那么a1中的方法有：</p><ol><li><p>自己定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(D obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;A and D&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>自己定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(A obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;A and A&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><p>a1.Show(b)：a1中不含有参数为B的方法，由继承链知B可向上转型至A，那么调用<code>2</code>，输出<code>A and A</code></p><p>a1.Show(c)：a1中不含有参数为C的方法，由继承链知C可向上转型至A，那么调用<code>2</code>，输出<code>A and A</code></p><p>a1.Show(d)：a1中含有参数为D的方法，那么调用<code>1</code>，输出<code>A and D</code></p><p>接着是a2对象的调用，由<code>A a2 = new B();</code>知a2的编译时类型是A，运行时类型是<strong>B</strong>，那么a2中的方法有：</p><ol><li><p>继承自A的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(D obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;A and D&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>继承自A但被自己覆盖的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(A obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;B and A&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>自己定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(B obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;B and B&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><p>这里可以使用反射机制进行验证，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br>...<br>        System.out.println(a2.getClass());<br>        Class&lt;? extends A&gt; testa2 = a2.getClass();<br>        Method[] methods = testa2.getMethods();  <span class="hljs-comment">// getDeclaredMethods()</span><br>        <span class="hljs-keyword">for</span> (Method m : methods) &#123;<br>            System.out.println(m);<br>        &#125;<br></code></pre></td></tr></table></figure><p>其中:</p><ol><li><code>getClass()</code>用于获取变量运行时类型的类名;</li><li><code>getMethods()</code>用于获取Class变量中的所有方法（从父类继承的和自己声明的）</li><li><code>getDeclaredMethods()</code>用于获取Class变量自己声明的方法。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112030947346.png" alt=""></p><p>但是，由于a2的编译时类型是A，所以在代码中只能调用<code>1</code>和<code>2</code>，否则会报错，即使你的实例中真的有<code>3</code>这个方法。</p><p>a2.Show(b)：a2中含有参数为B的方法，但不能调用，由继承链知B可向上转型至A，那么调用<code>2</code>，输出<code>B and A</code></p><p>a2.Show(c)：a2中不含有参数为C的方法，由继承链知C可向上转型至A，那么调用<code>2</code>，输出<code>B and A</code></p><p>a2.Show(d)：a2中含有参数为D的方法，那么调用<code>1</code>，输出<code>A and D</code></p><p>最后是b对象的调用，由<code>B b = new B();</code>知b的编译时类型是B，运行时类型是<strong>B</strong>，那么b中的方法有：</p><ol><li><p>继承自A的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(D obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;A and D&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>继承自A但被自己覆盖的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(A obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;B and A&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>自己定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Show</span><span class="hljs-params">(B obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;B and B&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><p>b.Show(b)：b中含有参数为B的方法，那么调用<code>3</code>，输出<code>B and B</code></p><p>b.Show(c)：b中不含有参数为C的方法，由继承链知C可向上转型至B，那么调用<code>3</code>，输出<code>B and B</code></p><p>b.Show(d)：b本类不中含有参数为D的方法，但其超类中含有参数为D的方法，那么调用<code>1</code>，输出<code>A and D</code></p><h2 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p>读程序，写结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpengxu.homework2;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;base&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Base</span><span class="hljs-params">()</span> </span>&#123;<br>        tellName();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tellName</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Base tell name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;derived&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Derived</span><span class="hljs-params">()</span> </span>&#123;<br>        tellName();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tellName</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Derived tell name: &quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Derived();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Derived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: null<br>Derived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: derived<br></code></pre></td></tr></table></figure><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>流程如下：</p><ol><li><p>从<code>main</code>方法进入，执行<code>new Derived();</code>语句。</p></li><li><p>调用Derived的构造方法<code>Derived()</code>。</p></li><li><p>因<code>class Derived extends Base</code>，所以<code>Derived()</code>的第一句是由编译器添加的<code>Base()</code>，那么调用其父类的构造方法<code>Base()</code>。</p></li><li><p>Base类的构造方法初始化自己的属性，首先执行<code>private String name = &quot;base&quot;;</code>，使Base.name=”base”，随后调用<code>tellName()</code>方法，因为运行时类型是Derived，所以根据继承链，优先匹配Derived中的<code>tellName()</code>方法，但因为此时还没有到Derived初始化，所以this.name=null，打印出的结果为</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Derived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: null<br></code></pre></td></tr></table></figure><p>随后<code>Base()</code>方法结束,继续执行<code>Derived()</code>。</p></li><li><p>此时<code>Derived()</code>初始化自己的属性，执行<code>private String name = &quot;derived&quot;;</code>，使this.name=”derived”，随后调用<code>tellName()</code>方法，同样的原因，匹配Derived中的<code>tellName()</code>方法，但此时this.name=”derived”，打印出的结果为</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Derived <span class="hljs-keyword">tell</span> <span class="hljs-built_in">name</span>: derived<br></code></pre></td></tr></table></figure><p>随后<code>Derived()</code>方法结束，<code>new Derived();</code>语句完成，<code>main</code>方法结束，程序结束。</p></li></ol><h2 id="第三题-1"><a href="#第三题-1" class="headerlink" title="第三题"></a>第三题</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p>生成动物，要求如下：</p><ol><li>循环通过标准输入端输入需要生成的动物，当遇到结束标志，则结束程序运行。</li><li>每次生成动物，通过标准输出端显示动物的信息。</li><li>动物的信息包括：目前所有动物的总数，当前这一类动物的总数。</li><li>整个程序结构用工厂模式设计，保证将来动物园有新的动物加入时，程序可扩展。</li></ol><h3 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h3><h4 id="项目结构树"><a href="#项目结构树" class="headerlink" title="项目结构树"></a>项目结构树</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">D:.<br>│  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IdeaProjects</span>.</span></span>iml<br>│  <br>├─.idea<br>│<span class="hljs-operator">  ...    </span><br><span class="hljs-operator"></span>├─out<br>│<span class="hljs-operator">  ...</span><br><span class="hljs-operator"></span>└─src<br>    └─com<br>        └─wanpengxu<br>            └─homework2<br>                │  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Derived</span>.</span></span>java<br>                │  mainTest.java<br>                │  <br>                └─third<br>                    │  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Main</span>.</span></span>java<br>                    │  <br>                    ├─factory<br>                    │      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnimalFactory</span>.</span></span>java<br>                    │      <br>                    └─product<br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Animal</span>.</span></span>java<br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cat</span>.</span></span>java<br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dog</span>.</span></span>java<br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Panda</span>.</span></span>java<br></code></pre></td></tr></table></figure><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112022112892.png" alt=""></p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><ol><li><p>Animal.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpengxu.homework2.third.product;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        num += <span class="hljs-number">1</span>;<br>        System.out.println(<span class="hljs-string">&quot;现在共有&quot;</span> + num + <span class="hljs-string">&quot;只动物！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInformation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\&quot;&quot;</span> + name + <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Cat.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpengxu.homework2.third.product;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> _num = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        Cat._num += <span class="hljs-number">1</span>;<br>        System.out.println(<span class="hljs-string">&quot;你获得了1只猫！现在已有&quot;</span> + getCatNumber() + <span class="hljs-string">&quot;只猫！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInformation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\&quot;&quot;</span> + name + <span class="hljs-string">&quot;\&quot;：一只猫&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCatNumber</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Cat._num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Dog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpengxu.homework2.third.product;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> _num = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        Dog._num += <span class="hljs-number">1</span>;<br>        System.out.println(<span class="hljs-string">&quot;你获得了1只狗！现在已有&quot;</span> + getDogNumber() + <span class="hljs-string">&quot;只狗！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInformation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\&quot;&quot;</span> + name + <span class="hljs-string">&quot;\&quot;：一只狗&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDogNumber</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Dog._num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Panda.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpengxu.homework2.third.product;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Panda</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> _num = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Panda</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        Panda._num += <span class="hljs-number">1</span>;<br>        System.out.println(<span class="hljs-string">&quot;你获得了1只熊猫！现在已有&quot;</span> + getPandaNumber() + <span class="hljs-string">&quot;只熊猫！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInformation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\&quot;&quot;</span> + name + <span class="hljs-string">&quot;\&quot;：一只熊猫&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPandaNumber</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Panda._num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>AnimalFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpengxu.homework2.third.factory;<br><br><span class="hljs-keyword">import</span> com.wanpengxu.homework2.third.product.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimalFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Animal <span class="hljs-title">addAnimal</span><span class="hljs-params">(String type, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">switch</span> (type.toLowerCase()) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;cat&quot;</span> -&gt; <span class="hljs-keyword">new</span> Cat(name);<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;dog&quot;</span> -&gt; <span class="hljs-keyword">new</span> Dog(name);<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;panda&quot;</span> -&gt; <span class="hljs-keyword">new</span> Panda(name);<br>            <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">null</span>;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpengxu.homework2.third;<br><br><span class="hljs-keyword">import</span> com.wanpengxu.homework2.third.factory.AnimalFactory;<br><span class="hljs-keyword">import</span> com.wanpengxu.homework2.third.product.Animal;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Animal&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        System.out.println(<span class="hljs-string">&quot;欢迎来到动物工厂！工厂现在可以生产以下动物：Cat, Dog, Panda！输入Quit退出！&quot;</span>);<br>        <span class="hljs-keyword">try</span> (Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in)) &#123;  <span class="hljs-comment">// try-with-resources 类似try-finally</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;请输入想生产的动物类型：&quot;</span>);<br>                String type = sc.next();<br>                <span class="hljs-keyword">if</span> (type.equalsIgnoreCase(<span class="hljs-string">&quot;Quit&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;<br>                System.out.print(<span class="hljs-string">&quot;请输入它的名字：&quot;</span>);<br>                String name = sc.next();<br>                Animal animal = AnimalFactory.addAnimal(type, name);<br>                <span class="hljs-keyword">if</span> (animal == <span class="hljs-keyword">null</span>)<br>                    System.out.println(<span class="hljs-string">&quot;请输入可生产的动物！&quot;</span>);<br>                <span class="hljs-keyword">else</span><br>                    animals.add(animal);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;生成完毕！现在你有：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Animal animal : animals)<br>            System.out.println(animal.getInformation());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="运行截图-5"><a href="#运行截图-5" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112022053155.png" alt=""></p><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>题目要求使用工厂模式，那么按照工厂模式的实现，有：</p><ol><li><p>要有一个父类Animal，这里因为动物本身有一些公用的属性和方法，所以最好不要定义为abstract类；</p></li><li><p>要有一些继承自Animal的具体的类作为某种动物，如Cat, Dog, Panda；</p></li><li><p>需要一个工厂类AnimalFactory生成基于给定信息的实体类的对象，这里我是用增强型switch实现的，当然也可以用普通switch或if-else if-else实现；</p></li><li><p>需要一个使用该工厂的类（用户类）来操作工厂完成生产任务。我加入了一点功能：生成动物时为其命名，并在退出后显示已生成动物名和其类型。另外，使用了可以自动关闭资源的try-with-resources语法，它的功能类似于try-finally，但语法十分精简。</p></li></ol><p>因为采用了工厂模式，所以拓展动物种类的操作也很简单：</p><ol><li>复制一份动物类，将其类名重构为新增的动物，方法名同理；</li><li>更改一些字符串以与新增动物相对应；</li><li>在AnimalFactory类中新增一行case。</li></ol><h1 id="作业三"><a href="#作业三" class="headerlink" title="作业三"></a>作业三</h1><h2 id="第一题-2"><a href="#第一题-2" class="headerlink" title="第一题"></a>第一题</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><ul><li><p>用泛型List管理学生信息，学生对象信息为：姓名、学号、年龄、专业</p></li><li><p>对学生列表完成：添加、删除、查找、全部显示操作。</p></li></ul><h3 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h3><h4 id="项目结构树-1"><a href="#项目结构树-1" class="headerlink" title="项目结构树"></a>项目结构树</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">D:.<br>│<span class="hljs-operator"> ...                             </span><br><span class="hljs-operator"></span>└─src<br>    └─edu<br>        └─wanpengxu      <br>            └─homework3<br>                └─first<br>                       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Student</span>.</span></span>java<br>                       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StudentAdministrator</span>.</span></span>java<br>                       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Test</span>.</span></span>java<br></code></pre></td></tr></table></figure><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.homework3.first;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String studentID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String major;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, String studentID, <span class="hljs-keyword">int</span> age, String major)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.studentID = studentID;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.major = major;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStudentID</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> studentID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMajor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> major;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStudentID</span><span class="hljs-params">(String studentID)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.studentID = studentID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMajor</span><span class="hljs-params">(String major)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.major = major;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;studentID:&quot;</span> + studentID);<br>        System.out.println(<span class="hljs-string">&quot;age:&quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;major:&quot;</span> + major);<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>StudentAdministrator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.homework3.first;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentAdministrator</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;Student&gt; database = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();  <span class="hljs-comment">// database变量始终引用数组</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(student.getStudentID().length()!=<span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(Student studentI:database)&#123;<br>            <span class="hljs-keyword">if</span>(studentI.getStudentID().equals(student.getStudentID()))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> database.add(student);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">find</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        List&lt;Student&gt; foundStudent = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Student student : database) &#123;<br>            <span class="hljs-keyword">if</span> (student.getName().equals(name)) &#123;<br>                foundStudent.add(student);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> foundStudent;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">delete</span><span class="hljs-params">(String studentID)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> database.removeIf(student -&gt; student.getStudentID().equals(studentID));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Student student : database) &#123;<br>            student.display();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.homework3.first;<br><br><span class="hljs-keyword">import</span> java.io.Console;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HashMap&lt;String, String&gt; administrators = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        StudentAdministrator studentAdministrator = <span class="hljs-keyword">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;Welcome to undergraduate management system!&quot;</span>);<br>        <span class="hljs-keyword">try</span> (Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in)) &#123;<br>            <span class="hljs-keyword">boolean</span> logged = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Please select: [C]Creat Administrator\t[L]Login\t[A]Add\t[D]Delete\t[F]Find\t[S]Show All\t[E]Exit&quot;</span>);<br>                String type = scanner.next();<br>                <span class="hljs-keyword">if</span> (type.equalsIgnoreCase(<span class="hljs-string">&quot;C&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Please input your username:&quot;</span>);<br>                    String username = scanner.next();<br>                    System.out.println(<span class="hljs-string">&quot;Please input your password:&quot;</span>);<br>                    String password = scanner.next();  <span class="hljs-comment">// 不隐藏输入</span><br><span class="hljs-comment">//                    Console con = System.console();</span><br><span class="hljs-comment">//                    String password = new String(con.readPassword());  // 隐藏输入，在IDE中不可行，因为控制台被重定向了</span><br>                    <span class="hljs-keyword">if</span> (administrators.get(username) == <span class="hljs-keyword">null</span>) &#123;<br>                        administrators.put(username, password);<br>                        System.out.println(<span class="hljs-string">&quot;Creat succeeded!&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;Creat failed!&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equalsIgnoreCase(<span class="hljs-string">&quot;L&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Please input your username:&quot;</span>);<br>                    String username = scanner.next();<br>                    System.out.println(<span class="hljs-string">&quot;Please input your password:&quot;</span>);<br>                    String password = scanner.next();<br><span class="hljs-comment">//                    Console con = System.console();</span><br><span class="hljs-comment">//                    String password = new String(con.readPassword());</span><br>                    <span class="hljs-keyword">if</span> (administrators.get(username) != <span class="hljs-keyword">null</span> &amp;&amp; administrators.get(username).equals(password)) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;Login succeeded!&quot;</span>);<br>                        logged = <span class="hljs-keyword">true</span>;<br>                        studentAdministrator = <span class="hljs-keyword">new</span> StudentAdministrator();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;Login failed!&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equalsIgnoreCase(<span class="hljs-string">&quot;E&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Exit succeeded!&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (logged) &#123;<br>                        <span class="hljs-keyword">if</span> (type.equalsIgnoreCase(<span class="hljs-string">&quot;A&quot;</span>)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;Please input student&#x27;s name:&quot;</span>);<br>                            String name = scanner.next();<br>                            System.out.println(<span class="hljs-string">&quot;Please input 8-digit student&#x27;s studentID:&quot;</span>);<br>                            String studentID = scanner.next();<br>                            System.out.println(<span class="hljs-string">&quot;Please input student&#x27;s age:&quot;</span>);<br>                            <span class="hljs-keyword">int</span> age;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                age = scanner.nextInt();<br>                            &#125; <span class="hljs-keyword">catch</span> (InputMismatchException ex) &#123;<br>                                System.out.println(<span class="hljs-string">&quot;Invalid input!&quot;</span>);<br>                                scanner.next();  <span class="hljs-comment">// 读入并丢弃异常的输入</span><br>                                <span class="hljs-keyword">continue</span>;<br>                            &#125;<br>                            System.out.println(<span class="hljs-string">&quot;Please input student&#x27;s major:&quot;</span>);<br>                            String major = scanner.next();<br>                            <span class="hljs-keyword">if</span> (studentAdministrator.add(<span class="hljs-keyword">new</span> Student(name, studentID, age, major))) &#123;<br>                                System.out.println(<span class="hljs-string">&quot;Added successfully!&quot;</span>);<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                System.out.println(<span class="hljs-string">&quot;Added failed!&quot;</span>);<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equalsIgnoreCase(<span class="hljs-string">&quot;D&quot;</span>)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;Please input 8-digit student&#x27;s studentID:&quot;</span>);<br>                            String studentID = scanner.next();<br>                            <span class="hljs-keyword">if</span> (studentAdministrator.delete(studentID)) &#123;<br>                                System.out.println(<span class="hljs-string">&quot;Delete successfully!&quot;</span>);<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                System.out.println(<span class="hljs-string">&quot;Delete failed!&quot;</span>);<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equalsIgnoreCase(<span class="hljs-string">&quot;F&quot;</span>)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;Please input student&#x27;s name:&quot;</span>);<br>                            String name = scanner.next();<br>                            List&lt;Student&gt; found = studentAdministrator.find(name);<br>                            System.out.println(<span class="hljs-string">&quot;Find &quot;</span> + found.size() + <span class="hljs-string">&quot; students!&quot;</span>);<br>                            <span class="hljs-keyword">for</span> (Student student : found) &#123;<br>                                student.display();<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equalsIgnoreCase(<span class="hljs-string">&quot;S&quot;</span>)) &#123;<br>                            studentAdministrator.showAll();<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;Please login first!&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行截图-6"><a href="#运行截图-6" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112222108247.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112222109679.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112222114282.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112222109641.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112222110090.png" alt=""></p><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>一道比较简单的模拟题，大二时我们在程序设计综合实践课上做过更加复杂的例子。</p><p>首先我认为需要有学生类Student</p><p>还需要一个学生管理员类StudentAdministrator用于管理学生</p><p>最后在主类里调用学生管理员对象去管理学生对象</p><p>要注意的是这里涉及到了数据库的知识，学生表（在这里是<code>List&lt;Student&gt;</code>）的主键是<strong>学号</strong>，所以添加、删除这些操作都需要使用学号完成，同时考虑到非主键会有重复，所以查找操作使用了姓名，当然这种写法只适用于小型系统，如学院、学校的数据库系统，如果同名人数多的系统，如某省的户籍系统，还需要加入其他限定条件。</p><p>在基本要求外做了一个比较简单的访问控制，并没有保存它使其持久化。</p><p>注意到控制台程序的每个选项间距都不同，因为制表符<code>\t</code>用空格补全其左边字符串，使其长度到8的整数倍（正好是8的倍数也补，不然体现不出按制表键）。</p><h2 id="第二题-2"><a href="#第二题-2" class="headerlink" title="第二题"></a>第二题</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><p>一元二次方程类：</p><ol><li><p>输入一元二次方程的三个系数，确定这个方程式。</p><p>标明一个一元二次方程的属性。</p><ul><li><p>三个系数</p><p>$a$, $b$ ,$c$ </p></li><li><p>两个根(最多)(而且可能是虚根所以用统一的形式表示)<br>$x_1$,$y_1$, $x_2$,$y_2$ </p></li><li><p>决定根的特征的<br>$\delta=b^2-4ac$</p></li></ul><p>如果是一个一元二次方程需要的操作（注意方法的权限）:</p><ul><li><p>获取三个系数,确立一元二次方程.</p></li><li><p>求$\delta=b^2-4ac$</p></li><li><p>求根(可能是实根,也可能是虚根)</p></li></ul></li><li><p>如果二次系数$a$为0 ，主动抛出异常，因为这不满足一元二次方程的条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AWrongException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span><br></code></pre></td></tr></table></figure></li><li><p>把生成的一元二次方程对象（包含根的值）序列化并保存在文件<code>file1.data</code>中。</p><ul><li>根求出之后，再把对象序列化到文件file1.data中。</li></ul></li></ol><p>要求：</p><ol><li>实现一元二次方程类</li><li>在主类中调用这个一元二次方程类。(编程用命令行或者可视化方法获取系数 $a$,$b$,$c$)</li></ol><h3 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h3><h4 id="项目结构树-2"><a href="#项目结构树-2" class="headerlink" title="项目结构树"></a>项目结构树</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">D:.                     <br>└─src<br>    └─edu<br>        └─wanpengxu    <br>            └─homework3<br>                └─second<br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AWrongException</span>.</span></span>java<br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Equation</span>.</span></span>java<br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Test</span>.</span></span>java<br></code></pre></td></tr></table></figure><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><p>Equation.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.Math;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Equation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> a, b, c;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> x1, x2;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> r, v;  <span class="hljs-comment">// r:实部 v:虚部</span><br>    <span class="hljs-keyword">int</span> type;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Equation</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b, <span class="hljs-keyword">double</span> c)</span> <span class="hljs-keyword">throws</span> AWrongException </span>&#123;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AWrongException(<span class="hljs-string">&quot;二次项系数不能为0！&quot;</span>);<br>        <span class="hljs-keyword">this</span>.a = a;<br>        <span class="hljs-keyword">this</span>.b = b;<br>        <span class="hljs-keyword">this</span>.c = c;<br>        System.out.println(<span class="hljs-string">&quot;成功创建一元二次方程组：&quot;</span>);<br>        System.out.print((a == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;&quot;</span> : a) + <span class="hljs-string">&quot;x^2&quot;</span>);  <span class="hljs-comment">// 系数为1时省略</span><br>        <span class="hljs-keyword">if</span> (b != <span class="hljs-number">0</span>) System.out.print(<span class="hljs-string">&quot;+&quot;</span> + (b == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;&quot;</span> : b) + <span class="hljs-string">&quot;x&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) System.out.print(<span class="hljs-string">&quot;+&quot;</span> + c);<br>        System.out.println(<span class="hljs-string">&quot;=0&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> <span class="hljs-title">calculateDelta</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.pow(b, <span class="hljs-number">2</span>) - <span class="hljs-number">4</span> * a * c;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> delta = calculateDelta();<br>        <span class="hljs-keyword">if</span> (Math.abs(delta) &lt; <span class="hljs-number">1e-5</span>) &#123;<br>            type = <span class="hljs-number">0</span>;<br>            x1 = x2 = -b / (<span class="hljs-number">2</span> * a);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delta &gt; <span class="hljs-number">0</span>) &#123;<br>            type = <span class="hljs-number">1</span>;<br>            x1 = (-b - Math.sqrt(delta)) / (<span class="hljs-number">2</span> * a);<br>            x2 = (-b + Math.sqrt(delta)) / (<span class="hljs-number">2</span> * a);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            type = <span class="hljs-number">2</span>;<br>            r = -b / (<span class="hljs-number">2</span> * a);<br>            v = Math.sqrt(-delta) / (<span class="hljs-number">2</span> * a);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> -&gt; System.out.println(<span class="hljs-string">&quot;该一元二次方程有两个相等的实数根：\nx1=x2=&quot;</span> + x1);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; System.out.println(<span class="hljs-string">&quot;该一元二次方程有两个不同的实数根：\nx1=&quot;</span> + x1 + <span class="hljs-string">&#x27;\n&#x27;</span> + <span class="hljs-string">&quot;x2=&quot;</span> + x2);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; System.out.printf(<span class="hljs-string">&quot;该一元二次方程有两个不同的复数根：\nx1=%1$s+%2$si\nx2=%1$s-%2$si\n&quot;</span>, r, v);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSolution</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> -&gt; String.format(<span class="hljs-string">&quot;该一元二次方程有两个相等的实数根：\nx1=x2=%s&quot;</span>, x1);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; String.format(<span class="hljs-string">&quot;该一元二次方程有两个不同的实数根：\nx1=%s\nx2=%s&quot;</span>, x1, x2);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; String.format(<span class="hljs-string">&quot;该一元二次方程有两个不同的复数根：\nx1=%1$s+%2$si\nx2=%1$s-%2$si\n&quot;</span>, r, v);<br>            <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Unexpected value: &quot;</span> + type);<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AWrongException.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.homework3.second;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AWrongException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;  <span class="hljs-comment">// 系数a错误异常</span><br>    AWrongException(String s)&#123;<br>        <span class="hljs-keyword">super</span>(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="控制台程序"><a href="#控制台程序" class="headerlink" title="控制台程序"></a>控制台程序</h5><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.homework3.second;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> (Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入一元二次方程的系数：&quot;</span>);<br>            <span class="hljs-keyword">double</span> a = sc.nextDouble();<br>            <span class="hljs-keyword">double</span> b = sc.nextDouble();<br>            <span class="hljs-keyword">double</span> c = sc.nextDouble();<br>            <span class="hljs-keyword">try</span> &#123;<br>                Equation equation = <span class="hljs-keyword">new</span> Equation(a, b, c);<br>                equation.solve();<br>                equation.display();<br>                <span class="hljs-keyword">try</span> (FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;file1.data&quot;</span>);<br>                     ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(fileOutputStream)) &#123;<br>                    objectOutputStream.writeObject(equation);<br>                    System.out.println(<span class="hljs-string">&quot;已将一元二次方程对象序列化为byte数组保存至文件\&quot;file1.data\&quot;中&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    System.out.println(e.getMessage());<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (AWrongException e) &#123;<br>                System.out.println(e.getMessage());<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">try</span> (FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;file1.data&quot;</span>);<br>             ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(fileInputStream)) &#123;<br>            Equation equation = (Equation) objectInputStream.readObject();<br>            System.out.println(<span class="hljs-string">&quot;已将文件\&quot;file1.data\&quot;中的byte数组反序列化为一元二次方程对象&quot;</span>);<br>            equation.display();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="GUI程序"><a href="#GUI程序" class="headerlink" title="GUI程序"></a>GUI程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.formdev.flatlaf.FlatLightLaf;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnivariateQuadraticEquation</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> JPanel mainPanel;<br>    <span class="hljs-keyword">private</span> JTextField textFieldA;<br>    <span class="hljs-keyword">private</span> JTextField textFieldB;<br>    <span class="hljs-keyword">private</span> JTextField textFieldC;<br>    <span class="hljs-keyword">private</span> JButton 求解Button;<br>    <span class="hljs-keyword">private</span> JButton 序列化至文件Button;<br>    <span class="hljs-keyword">private</span> JButton 清空Button;<br>    <span class="hljs-keyword">private</span> JButton 退出Button;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            UIManager.setLookAndFeel(<span class="hljs-keyword">new</span> FlatLightLaf());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            System.err.println(<span class="hljs-string">&quot;Failed to initialize LaF&quot;</span>);<br>        &#125;<br><br>        JFrame frame = <span class="hljs-keyword">new</span> JFrame(<span class="hljs-string">&quot;一元二次方程综合工具&quot;</span>);<br><br>        <span class="hljs-keyword">final</span> Toolkit toolkit = Toolkit.getDefaultToolkit();<br>        toolkit.addAWTEventListener(e -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (e.getID() == KeyEvent.KEY_PRESSED) &#123;<br>                KeyEvent evt = (KeyEvent) e;<br>                <span class="hljs-keyword">if</span> (evt.getKeyCode() == KeyEvent.VK_ESCAPE) &#123;<br>                    frame.dispose();  <span class="hljs-comment">// 销毁当前JFrame</span><br>                    System.exit(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 终止当前程序的JVM</span><br>                &#125;<br>            &#125;<br>        &#125;, AWTEvent.KEY_EVENT_MASK);<br><br>        Image icon = toolkit.getImage(<span class="hljs-string">&quot;img/CUMTlogo5.png&quot;</span>);<br>        frame.setIconImage(icon);<br>        frame.setContentPane(<span class="hljs-keyword">new</span> UnivariateQuadraticEquation().mainPanel);<br>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br><span class="hljs-comment">//        frame.setSize(400, 130);</span><br>        frame.pack();<br>        frame.setLocationRelativeTo(<span class="hljs-keyword">null</span>);  <span class="hljs-comment">// 这句话要放在形状设置后，否则是将size(0,0)的窗口居中，造成窗口左上角在中间的情况</span><br>        frame.setResizable(<span class="hljs-keyword">false</span>);<br><span class="hljs-comment">//        frame.getContentPane().setBackground(Color.white);</span><br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UnivariateQuadraticEquation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// lambda表达式</span><br>        求解Button.addActionListener(e -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">double</span> a = Double.parseDouble(textFieldA.getText());<br>                <span class="hljs-keyword">double</span> b = Double.parseDouble(textFieldB.getText());<br>                <span class="hljs-keyword">double</span> c = Double.parseDouble(textFieldC.getText());<br>                Equation equation = <span class="hljs-keyword">new</span> Equation(a, b, c);<br>                equation.solve();<br>                equation.display();<br>                JOptionPane.showMessageDialog(<span class="hljs-keyword">null</span>, equation.getSolution(), <span class="hljs-string">&quot;成功&quot;</span>, JOptionPane.INFORMATION_MESSAGE);<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e1) &#123;<br>                JOptionPane.showMessageDialog(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;请输入合法的系数！&quot;</span>, <span class="hljs-string">&quot;异常&quot;</span>, JOptionPane.WARNING_MESSAGE);<br>            &#125; <span class="hljs-keyword">catch</span> (AWrongException e2) &#123;<br>                JOptionPane.showMessageDialog(<span class="hljs-keyword">null</span>, e2.getMessage(), <span class="hljs-string">&quot;异常&quot;</span>, JOptionPane.WARNING_MESSAGE);<br><span class="hljs-comment">//                e2.printStackTrace();</span><br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 匿名内部类</span><br>        序列化至文件Button.addActionListener(<span class="hljs-keyword">new</span> ActionListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>                <span class="hljs-keyword">try</span> (FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;file1.data&quot;</span>); ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(fileOutputStream)) &#123;<br>                    <span class="hljs-keyword">double</span> a = Double.parseDouble(textFieldA.getText());<br>                    <span class="hljs-keyword">double</span> b = Double.parseDouble(textFieldB.getText());<br>                    <span class="hljs-keyword">double</span> c = Double.parseDouble(textFieldC.getText());<br>                    Equation equation = <span class="hljs-keyword">new</span> Equation(a, b, c);<br>                    objectOutputStream.writeObject(equation);<br>                    JOptionPane.showMessageDialog(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;已将一元二次方程对象序列化为byte数组保存至文件\&quot;file1.data\&quot;中&quot;</span>, <span class="hljs-string">&quot;消息提示&quot;</span>, JOptionPane.INFORMATION_MESSAGE);<br>                &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e1) &#123;<br>                    JOptionPane.showMessageDialog(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;请输入合法的系数！&quot;</span>, <span class="hljs-string">&quot;异常&quot;</span>, JOptionPane.WARNING_MESSAGE);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException | AWrongException e2) &#123;<br>                    <span class="hljs-comment">// 这里用word打开可以测试占用</span><br>                    JOptionPane.showMessageDialog(<span class="hljs-keyword">null</span>, e2.getMessage(), <span class="hljs-string">&quot;异常&quot;</span>, JOptionPane.WARNING_MESSAGE);<br>                    e2.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>        清空Button.addActionListener(e -&gt; &#123;<br>            textFieldA.setText(<span class="hljs-string">&quot;&quot;</span>);<br>            textFieldB.setText(<span class="hljs-string">&quot;&quot;</span>);<br>            textFieldC.setText(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;);<br>        退出Button.addActionListener(e -&gt; System.exit(<span class="hljs-number">0</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行截图-7"><a href="#运行截图-7" class="headerlink" title="运行截图"></a>运行截图</h4><h5 id="控制台程序-1"><a href="#控制台程序-1" class="headerlink" title="控制台程序"></a>控制台程序</h5><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112230028159.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112230031849.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112230035155.png" alt=""></p><h5 id="GUI程序-1"><a href="#GUI程序-1" class="headerlink" title="GUI程序"></a>GUI程序</h5><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112230035711.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112230055042.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112230035766.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112230034556.png" alt=""></p><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>模拟题，用一些基本的数学知识可以写出核心代码，这里我认为解的形式都应该是<code>double</code>，如果将复数解作为一个整体，那么要么用<code>String</code>表示，要么自己写一个复数类，前者不那么专业，后者使程序复杂，所以我认为将实部（real part）和虚部（imaginary part）拆开都用基本数据类型<code>double</code>表示更优。</p><p>再用一些课上的知识可以写出控制台程序</p><p>GUI程序需要自己学习，不过在周三的课上已经讲了很大一部分，包括监听器的三种回调方式，所以我在课内基本目标外实现的主要有：</p><ol><li>按ESC键退出，知识是任意componet监听，详见GUI程序中的<code>toolkit.addAWTEventListener(...)</code>。</li><li>程序自定义图标，调<code>JFrame.setIconImage(Image)</code>即可，但将其打包到JAR中有难度。</li><li>界面美化，swing支持第三方主题包，我使用的是<code>Intelli IDEA</code>同款主题<code>FlatLaf</code>，使用方法是在项目中导入JAR，之后使用初始化语句<code>UIManager.setLookAndFeel(new FlatLightLaf());</code>即可。另外，可将LookAndFeel译为“观感”。</li></ol><h1 id="作业四"><a href="#作业四" class="headerlink" title="作业四"></a>作业四</h1><h2 id="第一题-3"><a href="#第一题-3" class="headerlink" title="第一题"></a>第一题</h2><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h3><p>输入三个字符串，分别：</p><ol><li><p>必须满足密码复杂性要求（认证需求）</p></li><li><p>满足身份证号码规范（15位/18位）</p></li><li><p>满足电子邮件规范</p></li></ol><h3 id="答案-5"><a href="#答案-5" class="headerlink" title="答案"></a>答案</h3><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.homework4.first;<br><br><span class="hljs-keyword">import</span> java.io.Console;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isIdCard</span><span class="hljs-params">(String idCard)</span> </span>&#123;<br>        String idCardCheck = <span class="hljs-string">&quot;(^[1-8]\\d((0[1-9])|([1-6][0-9])|70|90)(0[1-9]|1[0-8]|2[1-9]|[3-9][0-9])(19|20)\\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|[1-3]0|31)\\d&#123;3&#125;[0-9Xx]$)|&quot;</span> + <span class="hljs-string">&quot;(^[1-8]\\d((0[1-9])|([1-6][0-9])|70|90)(0[1-9]|1[0-8]|2[1-9]|[3-9][0-9])\\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|[1-3]0|31)\\d&#123;3&#125;$)&quot;</span>;<br>        <span class="hljs-comment">// 检测空指针和空串</span><br>        <span class="hljs-keyword">if</span> (idCard == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(idCard)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 正则检查格式正确性</span><br>        <span class="hljs-keyword">if</span> (!Pattern.compile(idCardCheck).matcher(idCard).matches()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 若为18位则对校验位进行校验</span><br>        <span class="hljs-keyword">if</span> (idCard.length() == <span class="hljs-number">18</span>) &#123;<br>            <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">17</span>; index++)<br>                sum += (Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">17</span> - index) % <span class="hljs-number">11</span>) * (idCard.charAt(index) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-keyword">char</span> checkBit = (<span class="hljs-keyword">char</span>) (<span class="hljs-string">&#x27;0&#x27;</span> + ((<span class="hljs-number">12</span> - sum % <span class="hljs-number">11</span>) % <span class="hljs-number">11</span>));<br>            checkBit = checkBit == (<span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;X&#x27;</span> : checkBit;  <span class="hljs-comment">// 最后一位若为阿拉伯数字10则用罗马数字X表示</span><br>            <span class="hljs-keyword">return</span> Character.toString(checkBit).equalsIgnoreCase(String.valueOf(idCard.charAt(<span class="hljs-number">17</span>)));<br>        &#125;<br>        <span class="hljs-comment">// 若为15位,不需校验</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;欢迎来到邮箱注册程序！&quot;</span>);<br>        <span class="hljs-keyword">try</span> (Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in)) &#123;<br>            <span class="hljs-comment">// ^[\\w!#$%&amp;’*+/=?`&#123;|&#125;~^-]+(?:\\.[\\w!#$%&amp;’*+/=?`&#123;|&#125;~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]&#123;2,6&#125;$</span><br>            String emailCheck = <span class="hljs-string">&quot;^(?!.*\\.&#123;2&#125;)[A-Za-z][0-9A-Za-z.]&#123;4,13&#125;[0-9A-Za-z](?!(@\\.|@-|.*\\.-|.*\\.&#123;2&#125;)|.*-\\.|.*\\-&#123;2&#125;)@[0-9A-Za-z-]&#123;1,63&#125;(\\.[0-9A-Za-z-]&#123;1,63&#125;)+$&quot;</span>;<br>            String email;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入邮箱账号（6~18个字符，可使用字母、数字、下划线，需要以字母开头）&quot;</span>);<br>                email = scanner.nextLine();<br>                <span class="hljs-keyword">if</span> (Pattern.compile(emailCheck).matcher(email).matches()) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;请检查输入格式！&quot;</span>);<br>            &#125;<br>            <br>            String passwordCheck = <span class="hljs-string">&quot;^(?![A-Za-z0-9]+$)(?![a-z0-9\\W]+$)(?![A-Za-z\\W]+$)(?![A-Z0-9\\W]+$)[a-zA-Z0-9\\W]&#123;8,16&#125;$&quot;</span>;<br>            String password;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入密码（8~16个字符，需包含“大小写字母、数字、标点符号”中3种或以上的组合）&quot;</span>);<br><span class="hljs-comment">//                password = scanner.nextLine();</span><br>                Console con = System.console();<br>                password = <span class="hljs-keyword">new</span> String(con.readPassword());  <span class="hljs-comment">// 隐藏输入，在IDE中不可行，因为控制台被重定向了</span><br>                <span class="hljs-keyword">if</span> (Pattern.compile(passwordCheck).matcher(password).matches()) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;请检查输入格式！&quot;</span>);<br>            &#125;<br><br>            String idCard;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入您的真实身份证号码&quot;</span>);<br>                idCard = scanner.nextLine();<br>                <span class="hljs-keyword">if</span> (isIdCard(idCard)) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;请检查输入格式！&quot;</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;注册成功！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行截图-8"><a href="#运行截图-8" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021205793.png" alt=""></p><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>构建正则表达式就和写程序一样，要由编译器运行起来才能直观地看到结果，这里可以使用<a href="https://c.runoob.com/front-end/854/">正则表达式在线测试| 菜鸟工具</a></p><h4 id="电子邮件匹配"><a href="#电子邮件匹配" class="headerlink" title="电子邮件匹配"></a>电子邮件匹配</h4><p>首先，要对电子邮件进行匹配，就需要了解电子邮件规范RFC 5322</p><h5 id="RFC-5322"><a href="#RFC-5322" class="headerlink" title="RFC 5322"></a>RFC 5322</h5><p>电子邮件地址的域内部分可以使用以下任何<a href="https://zh.wikipedia.org/wiki/ASCII">ASCII</a>字符：</p><ul><li>大小写拉丁字母<code>A</code>到<code>Z</code>和<code>a</code>到<code>z</code>；</li><li>数字<code>0</code>到<code>9</code>；</li><li>除了字母与数字之外的可打印字符，<code>!#$%&amp;&#39;*+-/=?^_`&#123;|&#125;~</code>；</li><li>点<code>.</code>，但不能作为首尾字符，也不能连续出现，若放在引号中则不受这些限制（例如<code>John..Doe@example.com</code>是不允许的，而<code>&quot;John..Doe&quot;@example.com</code>是允许的）。</li><li>空格和特殊字符<code>&quot;(),:;&lt;&gt;@[\]</code>被允许有限制地使用（域内部分字符串必须放在引号中，后面的段落将会描述，并且，反斜杠或双引号之前，必须加一个反斜杠来转义）；</li><li>允许将注释放在小括号内，并放在域内部分的开头或结尾，例如<code>john.smith(comment)@example.com</code>和<code>(comment)john.smith@example.com</code>都等同于<code>john.smith@example.com</code>。</li></ul><p>电子邮件地址的域名部分必须符合严格的规则：它必须满足对主机名的要求，一个以点分隔的DNS标签序列，每个标签被限定为长度不超过63个字符，且只能由下列字符组成：</p><ul><li>大小写拉丁字母<code>A</code>到<code>Z</code>和<code>a</code>到<code>z</code>；</li><li>数字<code>0</code>到<code>9</code>，但顶级域名不能是纯数字；</li><li>连字符<code>-</code>，但不能作为首尾字符。</li></ul><p>可以看出，RFC 5322电子邮件规范包含范围广泛的特殊字符，虽然在技术上可行，但在实践中往往并不能接受所有这些字符。</p><p>所以我们需要调研知名邮箱的电子邮件规范，我在这里选择了国内最流行的163邮箱和国际最流行的gmail邮箱，他们在格式错误时都会回显原因。</p><h5 id="域内部分"><a href="#域内部分" class="headerlink" title="域内部分"></a>域内部分</h5><p><strong>网易 163邮箱</strong></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201020123477.png" alt=""></p><p>163给出的邮箱规范很具体，我们可以自行测试它的细则。</p><ol><li>邮箱地址需以字母或数字结尾</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201020940484.png" alt=""></p><p> <strong>Google gmail邮箱</strong></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201020125971.png" alt=""></p><p>gmail给出的邮箱规范很简洁，我们也可以自行测试它的细则。</p><ol><li>用户名的字符数须介于6到30之间。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201020133746.png" alt=""></p><ol><li>用户名的8个或以上字符中应至少包括一个字母（a-z）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201020943254.png" alt=""></p><ol><li>只能使用字母（a-z）、数字（0-9）和数点（.）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021030651.png" alt=""></p><ol><li>用户名的最后一个字符必须为ASCII字母（a-z）或数字（0-9）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201020943237.png" alt=""></p><ol><li>用户名中不能包含连续的数点（.）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021015819.png" alt=""></p><p>我还对Microsoft outlook邮箱的电子邮件规范进行了调研，个人认为outlook邮箱的格式太过宽泛（比如单个字母可以作为用户名，且用户名最长可达65位），实现出来并不利于使用。</p><p>对以上规范进行总结，得到实践中的电子邮件规范：</p><ol><li>用户名的字符数介于一定范围</li><li>可用字符为大小写字母（<code>a-z</code>和<code>A-Z</code>）、数字（<code>0-9</code>）、一些特殊符号（<code>-_.</code>）</li><li>用户名至少包含一个字母（有些邮箱要求其在开头，有些邮箱在小于一定长度时不要求）</li><li>用户名的结束字符为字母或数字（有些邮箱允许<code>_-</code>）</li></ol><p>那么我们可以制定一个属于自己的、简易的邮箱规范：</p><ol><li><strong>用户名的字符数须介于6到15之间；</strong></li><li><strong>用户名可使用字母（<code>a-z</code>和<code>A-Z</code>）、数字（<code>0-9</code>）、数点（<code>.</code>）；</strong></li><li><strong>用户名需要以字母（<code>a-z</code>和<code>A-Z</code>）开头；</strong></li><li><strong>用户名中不能包含连续的数点（<code>.</code>）；</strong></li><li><strong>用户名需要以字母或数字（<code>a-z</code>和<code>A-Z</code>和<code>0-9</code>）结尾。</strong></li></ol><p>开始构建表达式吧！</p><ul><li><code>^</code>正则表达式开始符</li><li><code>(?!.*\.&#123;2&#125;)</code>不允许两个以上的句点（环视技术，详见1.3.2）</li><li><code>[A-Za-z]</code>开头部分的拉丁字母</li><li><code>[0-9A-Za-z.]&#123;4,13&#125;</code>中间部分的允许字符</li><li><code>[0-9A-Za-z]</code>结尾部分的拉丁字母或数字</li><li><code>$</code>正则表达式结束符</li></ul><p>最后可得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;^(?!.*\.&#123;2&#125;)[A-Za-z][0-9A-Za-z.]&#123;4,13&#125;[0-9A-Za-z]$&quot;</span><br></code></pre></td></tr></table></figure><p>当然我也搜索学习了RFC 5322电子邮件规范的正则匹配表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;^[\w!#$%&amp;’*+/=?`&#123;|&#125;~^-]+(?:\.[\\w!#$%&amp;’*+/=?`&#123;|&#125;~^-]+)*$&quot;</span><br></code></pre></td></tr></table></figure><h5 id="域名部分"><a href="#域名部分" class="headerlink" title="域名部分"></a>域名部分</h5><p>RFC 5322制定的电子邮件规范在这里需求较少，直接构建正则表达式即可。</p><ul><li><code>^</code>正则表达式开始符</li><li><code>(?!(@\.|@-|.*\.-|.*\.&#123;2&#125;)|.*-\.|.*\-&#123;2&#125;)</code> <code>@</code>后不能接<code>.</code>，<code>@</code>后不能接<code>-</code> ，<code>.</code>后不能接<code>-</code>，<code>.</code>后不能接<code>.</code>，<code>-</code>后不能接<code>.</code>，<code>-</code>后不能接·<code>-</code></li><li><code>@[0-9A-Za-z-]&#123;1,63&#125;</code>第一段DNS标签（@开头），出现一次</li><li><code>(\.[0-9A-Za-z-]&#123;1,63&#125;)+</code>第二段DNS标签及其之后的DNS标签（.开头），出现至少一次（用<code>+</code>匹配）</li><li><code>$</code>正则表达式结束符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;^(?!(@\.|@-|.*\.-|.*\.&#123;2&#125;)|.*-\.|.*\-&#123;2&#125;)@[0-9A-Za-z-]&#123;1,63&#125;(\.[0-9A-Za-z-]&#123;1,63&#125;)+$&quot;</span><br></code></pre></td></tr></table></figure><p>综上，得到最终电子邮件匹配正则表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;^(?!.*\.&#123;2&#125;)[A-Za-z][0-9A-Za-z.]&#123;4,13&#125;[0-9A-Za-z](?!(@\.|@-|.*\.-|.*\.&#123;2&#125;)|.*-\.|.*\-&#123;2&#125;)@[0-9A-Za-z-]&#123;1,63&#125;(\.[0-9A-Za-z-]&#123;1,63&#125;)+$&quot;</span><br></code></pre></td></tr></table></figure><p>经测试，可以实现上述的所有功能，放一张成功匹配的截图。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021158510.png" alt=""></p><h4 id="密码匹配"><a href="#密码匹配" class="headerlink" title="密码匹配"></a>密码匹配</h4><p>同样地，首先我们需要制定一个密码复杂性要求。</p><p>对于密码，或者说口令，并没有严格的规范，我们先看一下163邮箱的密码复杂性要求。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021457100.png" alt=""></p><p>我们可以在此基础上制定一个更严格的复杂性要求：</p><ol><li><strong>8~16个字符</strong></li><li><strong>需包含“大写字母、小写字母、数字、标点符号”中4种或以上的组合</strong></li></ol><p>因为只对字符集进行了规定，所以很好构建正则表达式。</p><p>我们先来了解一下<strong>环视</strong></p><p>环视（Lookaround）：匹配一个位置而不是字符，因此匹配的结果也可称为零宽字符。具体包括</p><ol><li><p>Lookahead</p></li><li><p>Lookbehind</p></li></ol><p>Lookahead，中文译作<strong>“正向预查”</strong>，其实字面意思就是<strong>向前看</strong>，也就是向字符串的右边看。</p><p>Lookbehind，中文译作<strong>“负向预查”</strong>，其实字面意思就是<strong>向后看</strong>，也就是向字符串的左边看。</p><p>接下来介绍一下环视所使用的符号</p><div class="table-container"><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>(</td><td>环视起始符</td></tr><tr><td>?</td><td>零宽字符，也就是位置，后续的操作就是选出合适的位置</td></tr><tr><td>&lt;</td><td>Lookbehind，向零宽字符的左边看</td></tr><tr><td>（啥也不加，缺省）</td><td>Lookahead，向零宽字符的右边看</td></tr><tr><td>=</td><td>肯定形式，选出满足（有）其后pattern的零宽字符</td></tr><tr><td>!</td><td>否定形式，选出不满足（没有）其后pattern的零宽字符</td></tr><tr><td>$</td><td>字符串结尾</td></tr><tr><td>)</td><td>环视结束符</td></tr></tbody></table></div><p>在这里直接对我的正则表达式进行说明即可理解环视。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;^(?![A-Za-z0-9]+$)(?![a-z0-9\\W]+$)(?![A-Za-z\\W]+$)(?![A-Z0-9\\W]+$)[a-zA-Z0-9\\W]&#123;8,16&#125;$&quot;</span><br></code></pre></td></tr></table></figure><p>首先我们知道四种字符，其共有$\sum\limits<em>{i=1}^{4} C</em>{4}^{i}=4+6+4+1=15$种情况，接下来要对除了$C_{4}^{4}$这种全选情况外的情况进行排除。</p><ul><li><code>^</code>正则表达式开始符</li><li><code>(?![0-9A-Za-z]+$)</code>对整个字符串选出零宽字符后没有数字、大写字母、小写字母三者组合（$\sum\limits<em>{i=1}^{3} C</em>{3}^{i}$）的零宽字符</li><li><code>(?![0-9a-z\\W]+$)</code>对整个字符串选出零宽字符后没有数字、小写字母、标点符号三者组合（$\sum\limits<em>{i=1}^{3} C</em>{3}^{i}$）的零宽字符</li><li><code>(?![A-Za-z\\W]+$)</code>对整个字符串选出零宽字符后没有大写字母、小写字母、标点符号三者组合（$\sum\limits<em>{i=1}^{3} C</em>{3}^{i}$）的零宽字符</li><li><code>(?![0-9A-Z\\W]+$)</code>对整个字符串选出零宽字符后没有数字、大写字母、标点符号三者组合（$\sum\limits<em>{i=1}^{3} C</em>{3}^{i}$）的零宽字符</li><li><code>[0-9A-Za-z\\W]&#123;8,16&#125;</code>从选出的零宽字符起，选中含有8~16个数字、大写字母、小写字母、标点符号的字符串。进行到这步时，因为前面几种环视已经排除掉了$\sum\limits<em>{i=1}^{3} C</em>{4}^{i}=14$种情况，所以选中的字符串必是四种符号的全选情况。</li><li><code>$</code>正则表达式结束符</li></ul><p>这其中<code>\W</code>代表匹配任何非单词字符，当然也可以自己指定允许的标点符号集合（注意这个转义字符包含<code>_</code>）。</p><p>下两张图可区分选中零宽字符和选中字符串。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021540551.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021545898.png" alt=""></p><h4 id="身份证号码匹配"><a href="#身份证号码匹配" class="headerlink" title="身份证号码匹配"></a>身份证号码匹配</h4><h5 id="格式匹配"><a href="#格式匹配" class="headerlink" title="格式匹配"></a>格式匹配</h5><p>对百位数以下的数字匹配时可以想象出一个每行10个数的表格（个位数0-9），中括号匹配时相当于用矩形选中，每次可能框最多的元素</p><p>十八位身份证正则表达式说明：</p><ul><li><code>^</code>                                                                                  正则表达式开头</li><li><code>[1-8]</code>                                                                          大区制代码，全国共分1-8八个大区</li><li><code>\\d</code>                                                                              省市编码</li><li><code>( (0[1-9]) | ([1-6][0-9]) | 70 | 90 )</code>       地级行政区：01-70一般 90直辖</li><li><code>( 0[1-9] | 1[0-8] | 2[1-9] |[3-9][0-9] )</code> 县级行政区：01-18、21-99</li><li><code>( 19|20 )</code>                                                                  生日期码，年份前两位</li><li><code>\\d&#123;2&#125;</code>                                                                        生日期码，年份后两位</li><li><code>( (0[1-9]) | (1[0-2]) )</code>                                    生日期码，月份</li><li><code>( ([0-2][1-9]) | [1-3]0 |31 )</code>                        生日期码，日期</li><li><code>\\d&#123;3&#125;</code>                                                                        顺序码</li><li><code>[0-9Xx]</code>                                                                      校验码,这里只判断格式而不校验</li><li><code>$</code>                                                                                   正则表达式结尾<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;^[1-8]\\d((0[1-9])|([1-6][0-9])|70|90)(0[1-9]|1[0-8]|2[1-9]|[3-9][0-9])(19|20)\\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|[1-3]0|31)\\d&#123;3&#125;[0-9Xx]$&quot;</span><br></code></pre></td></tr></table></figure>十五位身份证正则表达式说明：<br>只是在十八位身份证的基础上去掉了 <strong>生日期码，年份前两位</strong> 和 <strong>校验码</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;^[1-8]\\d((0[1-9])|([1-6][0-9])|70|90)(0[1-9]|1[0-8]|2[1-9]|[3-9][0-9])       \\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|[1-3]0|31)\\d&#123;3&#125;       $&quot;</span><br></code></pre></td></tr></table></figure><h5 id="校验码检查"><a href="#校验码检查" class="headerlink" title="校验码检查"></a>校验码检查</h5><p>首先了解一下校验码生成算法</p><ol><li><p>将身份证号码从左至右标记为 <script type="math/tex">{\displaystyle a_{1},a_{2},\cdots ,a_{18}}</script>；$a_{18}$即为校验码；</p></li><li><p>计算权重系数${\displaystyle W_{i}=2^{18-i}\ {\bmod {\ }}{11}}$；其中${\displaystyle \ {\bmod {\ }}}$表示求余数。</p></li></ol><p>所以：</p><div class="table-container"><table><thead><tr><th style="text-align:center"><em>i</em></th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th><th style="text-align:center">11</th><th style="text-align:center">12</th><th style="text-align:center">13</th><th style="text-align:center">14</th><th style="text-align:center">15</th><th style="text-align:center">16</th><th style="text-align:center">17</th><th style="text-align:center">18</th></tr></thead><tbody><tr><td style="text-align:center"><em>Wi</em></td><td style="text-align:center">7</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">5</td><td style="text-align:center">8</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">6</td><td style="text-align:center">3</td><td style="text-align:center">7</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">5</td><td style="text-align:center">8</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table></div><ol><li><p>计算${\displaystyle S=\sum <em>{i=1}^{17}a</em>{i}\cdot W_{i}}$</p></li><li><p>${\displaystyle a_{18}=(12-(S\ {\bmod {1}}1)){\bmod {1}}1}$</p></li></ol><p>那么根据算法，很容易写出程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">17</span>; index++)<br>sum += (Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">17</span> - index) % <span class="hljs-number">11</span>) * (idCard.charAt(index) - <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">char</span> checkBit = (<span class="hljs-keyword">char</span>) (<span class="hljs-string">&#x27;0&#x27;</span> + ((<span class="hljs-number">12</span> - sum % <span class="hljs-number">11</span>) % <span class="hljs-number">11</span>));<br>checkBit = checkBit == (<span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;X&#x27;</span> : checkBit;  <span class="hljs-comment">// 最后一位若为阿拉伯数字10则用罗马数字X表示</span><br></code></pre></td></tr></table></figure><h2 id="第二题-3"><a href="#第二题-3" class="headerlink" title="第二题"></a>第二题</h2><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h3><p>利用鼠标事件启动3个线程分别在三个窗口中同时绘制动态图形（图形自选）。</p><h3 id="答案-6"><a href="#答案-6" class="headerlink" title="答案"></a>答案</h3><h4 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.homework4.second;<br><br><br><span class="hljs-keyword">import</span> com.formdev.flatlaf.FlatLightLaf;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.MouseAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.MouseEvent;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestFrame</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class="hljs-keyword">this</span>.addMouseListener(<span class="hljs-keyword">new</span> MouseAdapter() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseClicked</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br>                startThread();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startThread</span><span class="hljs-params">()</span> </span>&#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>);<br>        t1.start();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; ; i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                repaint();<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                JOptionPane.showMessageDialog(<span class="hljs-keyword">null</span>, e.getMessage(), <span class="hljs-string">&quot;Exceptions&quot;</span>, JOptionPane.WARNING_MESSAGE);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.paint(g);<br>        <span class="hljs-keyword">int</span>[] x = &#123;<span class="hljs-number">80</span> + i * <span class="hljs-number">10</span>, <span class="hljs-number">100</span> + i * <span class="hljs-number">10</span>, <span class="hljs-number">50</span> + i * <span class="hljs-number">10</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] y = &#123;<span class="hljs-number">50</span> + i * <span class="hljs-number">10</span>, <span class="hljs-number">100</span> + i * <span class="hljs-number">10</span>, <span class="hljs-number">80</span> + i * <span class="hljs-number">10</span>&#125;;<br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) &#123;<br>            g.drawPolygon(x, y, <span class="hljs-number">3</span>);<br><span class="hljs-comment">//            g.fillOval(50 + i * 10, 50 + i * 10, 100, 100);</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            UIManager.setLookAndFeel(<span class="hljs-keyword">new</span> FlatLightLaf());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            System.err.println(<span class="hljs-string">&quot;Failed to initialize LaF&quot;</span>);<br>        &#125;<br>        URL imgURL = TestFrame.class.getResource(<span class="hljs-string">&quot;CUMTlogo.png&quot;</span>);<br>        ImageIcon imageIcon = <span class="hljs-keyword">new</span> ImageIcon(imgURL);<br>        Image image = imageIcon.getImage();<br><br>        TestFrame testFrame1 = <span class="hljs-keyword">new</span> TestFrame();<br>        testFrame1.setBounds(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>);<br>        testFrame1.setIconImage(image);<br>        testFrame1.setTitle(<span class="hljs-string">&quot;Thread1&quot;</span>);<br>        testFrame1.setVisible(<span class="hljs-keyword">true</span>);<br><br>        TestFrame testFrame2 = <span class="hljs-keyword">new</span> TestFrame();<br>        testFrame2.setBounds(<span class="hljs-number">400</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>);<br>        testFrame2.setIconImage(image);<br>        testFrame2.setTitle(<span class="hljs-string">&quot;Thread2&quot;</span>);<br>        testFrame2.setVisible(<span class="hljs-keyword">true</span>);<br><br>        TestFrame testFrame3 = <span class="hljs-keyword">new</span> TestFrame();<br>        testFrame3.setBounds(<span class="hljs-number">700</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>);<br>        testFrame3.setIconImage(image);<br>        testFrame3.setTitle(<span class="hljs-string">&quot;Thread3&quot;</span>);<br>        testFrame3.setVisible(<span class="hljs-keyword">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行截图-9"><a href="#运行截图-9" class="headerlink" title="运行截图"></a>运行截图</h4><p>三个Frame启动三个Thread，图形绘制时刻由鼠标点击时刻决定。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201021721091.png" alt=""></p><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>与课上例题没什么区别，例题创建了一个Frame，每个Frame点击后可启动Thread。那完成基本的要求只需要在主函数里再声明两个Frame即可。</p><p>为增强可读性，我将图形绘制改为了循环绘制，另外将例题中原程序的实心圆改为了指向右下方的三角形，更改了主题、自定义了图标、增加了异常弹窗等，都是上次GUI作业中使用过的方法。</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>散乱的知识之塔</title>
    <link href="/2021/12/11/%E6%95%A3%E4%B9%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%A1%94/"/>
    <url>/2021/12/11/%E6%95%A3%E4%B9%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%A1%94/</url>
    
    <content type="html"><![CDATA[<h1 id="ipynb文件的优雅打开方式"><a href="#ipynb文件的优雅打开方式" class="headerlink" title="ipynb文件的优雅打开方式"></a>ipynb文件的优雅打开方式</h1><p>其一 将某个终端加入右键菜单</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201211215563.png" alt=""></p><p>其二 单行powershell</p><p>资源管理器的地址栏可以视作一个单行powershell，你可以在这里输入命令。</p><p>eg. <code>cmd</code> <code>jupyter notebook</code> <code>jupyter lab</code></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201211217950.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201211224748.png" alt="发博客三连"></p><p>其三 设置默认程序</p><p><code>jupyter notebook</code>其实是一个python程序</p><p>使用<code>where</code>命令查找它的位置</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201211219144.png" alt=""></p><p>复制前面的路径设置默认程序即可</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201211219369.png" alt=""></p><p>成功后</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202201211221902.png" alt=""></p><h1 id="python-jit"><a href="#python-jit" class="headerlink" title="python @jit"></a>python @jit</h1><p>python可以使用<code>@jit</code>装饰器达到媲美C++的运行速度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> numba <span class="hljs-keyword">import</span> jit<br><span class="hljs-keyword">import</span> time<br><br>SIZE=<span class="hljs-number">10000</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">normal_test</span>():</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SIZE):<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SIZE):<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">@jit</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">jit_test</span>():</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SIZE):<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SIZE):<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    start=time.time()<br>    normal_test()<br>    end=time.time()<br>    <span class="hljs-built_in">print</span>(end-start)<br>    <br>    start=time.time()<br>    jit_test()<br>    end=time.time()<br>    <span class="hljs-built_in">print</span>(end-start)<br><br>    start=time.time()<br>    jit_test()<br>    end=time.time()<br>    <span class="hljs-built_in">print</span>(end-start)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.<span class="hljs-number">5333094596862793</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">2395479679107666</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>JIT使用懒编译（Lazy Compilation）技术，在执行到<code>@jit</code>代码块时才将其编译，而纯编译型语言C会在程序运行前整个编译好。</p><p>因为被<code>@jit</code>修饰的代码块已经编译过了，$总时间 = 编译时间 + 运行时间$，所以第二次运行时$编译时间=0$，又因为循环体内为pass，所以<script type="math/tex">运行时间=0</script>，故<script type="math/tex">总时间=0</script></p><p>另外，原生python慢的原因还有一点在于解释器需要推断变量类型，<code>@jit</code>可以使用<code>Eager Compilation</code>技术，指定变量类型，这样可以提高编译速度。</p><h1 id="C初始化列表"><a href="#C初始化列表" class="headerlink" title="C初始化列表"></a>C初始化列表</h1><p>翻看C98、C99标准时偶然发现了从没见过的初始化方式。可以在初始化块中忽略对象直接指定初始化成员。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112111411363.png" alt=""></p><p>另外，C++官方提供了在线编译环境，支持到C++14。</p><p><a href="http://cpp.sh/">C++ shell</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《Java语言及网络编程》课后小结</title>
    <link href="/2021/11/29/%E3%80%8AJava%E8%AF%AD%E8%A8%80%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BE%E5%90%8E%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/11/29/%E3%80%8AJava%E8%AF%AD%E8%A8%80%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BE%E5%90%8E%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="《Java语言及网络编程》课后小结"><a href="#《Java语言及网络编程》课后小结" class="headerlink" title="《Java语言及网络编程》课后小结"></a>《Java语言及网络编程》课后小结</h1><h1 id="What’s-Java"><a href="#What’s-Java" class="headerlink" title="What’s Java?"></a>What’s Java?</h1><h2 id="Java的设计哲学"><a href="#Java的设计哲学" class="headerlink" title="Java的设计哲学"></a>Java的设计哲学</h2><p>每一种语言都有它的设计哲学，如python的准则——著名的“python之禅”。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112192119542.png" alt=""></p><p>那么我们所熟知的C++呢？C++之父在《C++语言的设计和演化》一书中写出了C++的目标与一般性规则（Chap4 C++语言设计规则）。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112192132245.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112192133693.png" alt="image-20211219213320557"></p><p>可以看到，这似乎与python是相反的设计理念——python希望开发者“用一种方法，最好是只有一种方法来做一件事”，“Beautiful is better than ugly.”，而C++希望“总提供一条转变的通路”、“为每种应该支持的风格提供全面支持”。</p><p>私以为C++的设计理念导致了它如今的些许落寞——很多人认为C++是他们痛苦记忆的根源，连《Java核心技术》中都写道</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112192148407.png" alt=""></p><p>但不可否认，现代C++是难入门的、复杂的、效率高的、熟悉后很实用的一门语言。</p><p>那么Java呢？它的设计理念是什么？</p><p>Java的设计者编写了一本颇有影响力的“<a href="https://www.oracle.com/java/technologies/language-environment.html">白皮书</a>”用于解释设计的初衷及完成的情况。</p><p>它的摘要中写道</p><p><strong>1.2.1 简单、面向对象、熟悉</strong></p><p><strong>1.2.2 健壮和安全</strong></p><p><strong>1.2.3 架构中立且可移植</strong></p><p><strong>1.2.4 高性能</strong></p><p><strong>1.2.5 解释型、线程型和动态型</strong></p><p>拆开来就是</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112192204165.png" alt=""></p><p>另外，这本白皮书每章前面都有一些名言，我很喜欢。eg.</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112192215828.png" alt=""></p><p>这是一些具体的设计原则，更加抽象的如下</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112192209889.png" alt=""></p><p>因为课程还没有上完，所以我对它的理解是：类似C++的、全面向对象的、支持网络编程的、比C++简单且安全的一门语言。</p><h2 id="Java的各种专业名词"><a href="#Java的各种专业名词" class="headerlink" title="Java的各种专业名词"></a>Java的各种专业名词</h2><p>老师上课总说的Java SE 5是什么？JDK1.5又是什么？为什么配套的东西会有两个版本号？</p><p>详见《Java核心编程》Chap2</p><div class="table-container"><table><thead><tr><th>Java SE版本</th><th>JDK版本</th><th>发布时间</th><th>开发代号</th></tr></thead><tbody><tr><td>Oak</td><td></td><td>1995-05-23</td><td>Oak(橡树)</td></tr><tr><td>Java 1.0</td><td>JDK1.0</td><td>1996-01-23</td><td></td></tr><tr><td>Java 1.1</td><td>JDK1.1</td><td>1997-02-18</td><td></td></tr><tr><td>J2SE 1.2</td><td>JDK1.2</td><td>1998-12-04</td><td>Playground（运动场）</td></tr><tr><td>J2SE 1.3</td><td>JDK1.3</td><td>2000-05-08</td><td>Kestrel（美洲红隼）</td></tr><tr><td>J2SE 1.4</td><td>JDK1.4</td><td>2002-02-13</td><td>Merlin（灰背隼）</td></tr><tr><td>Java SE 5.0</td><td>JDK1.5</td><td>2004-09-29</td><td>Tiger（老虎）</td></tr><tr><td>Java SE 6</td><td>JDK1.6</td><td>2006-12-11</td><td>Mustang（野马）</td></tr><tr><td>Java SE 7</td><td>JDK1.7</td><td>2011-07-28</td><td>Dolphin（海豚）</td></tr><tr><td>Java SE 8</td><td>JDK1.8</td><td>2014-03-18</td><td>Spider（蜘蛛）</td></tr><tr><td>Java SE 9</td><td>JDK1.9</td><td>2017-09-21</td><td></td></tr><tr><td>Java SE 10</td><td>JDK10</td><td>2018-03-21</td><td></td></tr><tr><td>Java SE 11</td><td>JDK11</td><td>2018-09-25</td><td></td></tr><tr><td>Java SE 12</td><td>JDK12</td><td>2019-3-20</td></tr></tbody></table></div><p>另外，相比于“懒惰”的C++，“勤奋”的Java的更新频率要高得多。（C++语言近几次更新的标准是C++20、C++17、C++14、C++11、C++03、C++98，要么很久不更新，要么一更新就带来一大堆全新特性，近几年因感受到了威胁，C++委员会提高了更新频率）。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112192217638.png" alt=""></p><h1 id="11-29-基本语法"><a href="#11-29-基本语法" class="headerlink" title="11.29 基本语法"></a>11.29 基本语法</h1><ol><li><p>发现java17中的<code>java &lt;file&gt;.java</code>似乎只能编译单个类</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291010551.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291011178.png" alt=""></p><p>另外，想要从指令路径中运行class，需要使用<code>java -classpath &lt;dir&gt; &lt;file&gt;</code>命令</p><p>所以vscode中java对应的task.json可以这样配置</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span><br>    <span class="hljs-comment">// for the documentation about the tasks.json format</span><br>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;tasks&quot;</span>: [<br>     &#123;<br>      <span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;javac&quot;</span>,<br>      <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;javac $&#123;file&#125; -d $&#123;fileDirname&#125;\\bin&quot;</span>,<br>      <span class="hljs-comment">// &quot;command&quot;: &quot;javac $&#123;file&#125;&quot;,</span><br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,<br>      <span class="hljs-attr">&quot;group&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;kind&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,<br>          <span class="hljs-attr">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;presentation&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,<br>          <span class="hljs-attr">&quot;panel&quot;</span>: <span class="hljs-string">&quot;new&quot;</span>,<br>          <span class="hljs-attr">&quot;focus&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;<br>     &#125;,<br>     &#123;<br>      <span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;run&quot;</span>,<br>      <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;java -classpath $&#123;fileDirname&#125;\\bin $&#123;fileBasenameNoExtension&#125;&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,<br>      <span class="hljs-attr">&quot;dependsOn&quot;</span>: <span class="hljs-string">&quot;javac&quot;</span>,<span class="hljs-comment">// 加入这个依赖就会先javac生成class文件</span><br>      <span class="hljs-attr">&quot;group&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;kind&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>          <span class="hljs-attr">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;presentation&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,<br>          <span class="hljs-attr">&quot;panel&quot;</span>: <span class="hljs-string">&quot;new&quot;</span>,<br>          <span class="hljs-attr">&quot;focus&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;<br>     &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>java先把所有的类加载到正文段，同时静态初始化（static执行的时机），类似于预编译</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291017517.png" alt=""></p></li><li><p>Math库中都是静态方法，都不需要生成对象(eg. random)，静态方法可以通过import引入</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291015737.png" alt=""></p></li><li><p>单例设计模式：创建型模式，提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。</p><ul><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291020289.png" alt=""></p><p>单例模式事实上有6种，课上介绍的这种叫做“线程安全的懒汉式”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程安全的懒汉式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">T</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> T obj;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">null</span>)<br>            obj = <span class="hljs-keyword">new</span> T();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">signle</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        T t1 = T.getInstance();<br>        T t2 = T.getInstance();<br>        System.out.println(t1 == t2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291023640.png" alt=""></p><p>这体现出两次获取的都是同一对象</p></li><li><p>关于==和equals</p><p>== 对于基本类型来是值比较，对于引用类型是引用比较；</p><p>equals默认情况下是引用比较，很多类重写了 equals 方法把它变成了值比较，如 String、Integer。</p><p>所以一般情况下 equals 比较的是值是否相等。</p></li><li><p>父类引用不能被强制转换为子类引用，子类引用可以隐式转换/强制转换成父类引用（指针）</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291027333.png" alt=""></p><p>子类引用按需隐式转换到父类引用</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291028360.png" alt=""></p></li><li><p>switch可以接收字符串（包括空串””），不能接收null，因为java的switch实现基于hashCode，null的hashCode值为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">switchTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s=<span class="hljs-keyword">null</span>; <span class="hljs-comment">// NullPointerException</span><br>        <span class="hljs-comment">// String s = &quot;&quot;;</span><br><br>        <span class="hljs-comment">// if (s != null)  // 若禁止传递空指针时的一种解决方法</span><br>        <span class="hljs-comment">// switch (s) &#123;</span><br>        <span class="hljs-keyword">switch</span> (s == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;null&quot;</span> : s) &#123;  <span class="hljs-comment">// 若必须检测空指针时的一种解决方法</span><br>            <span class="hljs-comment">// //null in switch cases 是预览功能，默认情况下禁用</span><br>            <span class="hljs-comment">// case null :</span><br>            <span class="hljs-comment">//     System.out.println(&quot;This is a nullptr?&quot;);</span><br>            <span class="hljs-comment">//     break;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;null&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;This is a \&quot;null\&quot;!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;This is a blank string!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;This is a other string!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>instanceof，二元操作符，使用方式类似于==</p><p>作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291030193.png" alt=""></p></li><li><p>实例和引用是两回事！一个实例如果不是被本类的引用所调用，可能无法调用实例的方法</p><p>例如父类引用调用子类实例便无法使用子类的方法</p><p>使用instanceof将实例和其本类的引用配套</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111291032952.png" alt=""></p></li><li><p>java11后的instanceof可以在判断为true后直接赋给本类引用，引用名为最后的参数</p><p>这可能是个语法糖，因为它不是三元运算符</p></li></ol><h1 id="12-1-继承、多态"><a href="#12-1-继承、多态" class="headerlink" title="12.1 继承、多态"></a>12.1 继承、多态</h1><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112011108665.png" alt=""></p><ol><li><p>编译时类型和运行时类型</p><p>Java中的许多对象（一般都是具有父子类关系的父类对象）在运行时都会出现两种类型：编译时类型和运行时类型。</p><p>例如：<code>Person person = new Student();</code>这行代码将会生成一个person变量，该变量的编译时类型是Person，运行时类型是Student。</p><p>编译时类型由声明该变量时使用的类型（引用的类型）决定，运行时类型由实际赋给该变量的对象的类型（实例的类型）决定。</p><p>变量在编译阶段只能调用其编译时类型所具有的方法，在运行阶段执行它运行时类型所具有的方法。即变量只能引用所在的类里的方法。</p><p>另外通过引用来访问对象包含的实例属性时，系统总是试图访问它编译时类所定义的属性，而不是它运行时所定义的属性。</p><p><strong>因为有编译时类型的限制，所以变量所调用的方法只能来自编译时类型的方法</strong></p><p>举两个例子：访问方法和访问属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(Father obj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in Father class, receive Father obj.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(Father obj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in Son class, receive Father obj.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(Son obj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in Son class, receive Son obj.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(GrandSon obj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in Son class, receive GrandSon obj.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GrandSon</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Son</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inheritance1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Father father = <span class="hljs-keyword">new</span> Son();<br>        GrandSon grandSon = <span class="hljs-keyword">new</span> GrandSon();<br>        father.Show(grandSon);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112011131246.png" alt=""></p><p>继承链(inheritance chain)：</p></li></ol><p>网上找的一份第二次作业第一题的答案，不小心粘在这了</p><p>①②③比较好理解，一般不会出错。④⑤就有点糊涂了，为什么输出的不是”B and B”呢？！！先来回顾一下多态性。         </p><p>运行时多态性是面向对象程序设计代码重用的一个最强大机制，动态性的概念也可以被说成“一个接口，多个方法”。Java实现运行时多态性的基础是动态方法调度，它是一种在运行时而不是在编译期调用重载方法的机制。         方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写(Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。         </p><p>当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。 （但是如果强制把超类转换成子类的话，就可以调用子类中新添加而超类没有的方法了。）         </p><p>好了，先温习到这里，言归正传！实际上这里涉及方法调用的优先问题 ，优先级由高到低依次为：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。让我们来看看它是怎么工作的。         </p><p>比如④，a2.show(b)，a2是一个引用变量，类型为A，则this为a2，b是B的一个实例，于是它到类A里面找show(B obj)方法，没有找到，于是到A的super(超类)找，而A没有超类，因此转到第三优先级this.show((super)O)，this仍然是a2，这里O为B，(super)O即(super)B即A，因此它到类A里面找show(A obj)的方法，类A有这个方法，但是由于a2引用的是类B的一个对象，B覆盖了A的show(A obj)方法，因此最终锁定到类B的show(A obj)，输出为”B and A”。         再比如⑧，b.show(c)，b是一个引用变量，类型为B，则this为b，c是C的一个实例，于是它到类B找show(C obj)方法，没有找到，转而到B的超类A里面找，A里面也没有，因此也转到第三优先级this.show((super)O)，this为b，O为C，(super)O即(super)C即B，因此它到B里面找show(B obj)方法，找到了，由于b引用的是类B的一个对象，因此直接锁定到类B的show(B obj)，输出为”B and B”。         按照上面的方法，可以正确得到其他的结果。</p><h1 id="12-8-接口、lambda表达式、内部类"><a href="#12-8-接口、lambda表达式、内部类" class="headerlink" title="12.8 接口、lambda表达式、内部类"></a>12.8 接口、lambda表达式、内部类</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是对希望符合这个接口的类的一组<strong>需求</strong>。</p><p>接口没有实例。</p><p>接口中的所有方法都是<code>public</code>，所有字段都是<code>public static final</code></p><blockquote><p>注：Java语言规范建议不要提供多余的关键字</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112091930957.png" alt=""></p><p>实现接口的类若非抽象类，则必须实现接口中的所有方法</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112091933259.png" alt=""></p><p>实现接口时必须将方法声明为<code>public</code>，因为缺省访问权限为包内权限，编译器会报错，认为你试图提供更严格的（更弱的）访问权限</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112091937376.png" alt=""></p><p>测试用到的代码</p><p>类图:</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112092021983.png" alt=""></p><p>代码：</p><ol><li>Person.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.interfacetest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String n)</span> </span>&#123;  <span class="hljs-comment">// Java不支持默认值参数</span><br>        name = n;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// 但可以使用重载实现类似的功能</span><br>        <span class="hljs-keyword">this</span>(<span class="hljs-string">&quot;路人甲&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// getMethods()只能获取父类中public权限的方法！如果不加public会出现虽然能调用但是反射获取不到的情况。</span><br>        System.out.println(<span class="hljs-string">&quot;The person is eating.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>CanFight.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.interfacetest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CanFight</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> numberOfWins = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>CanSwim.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.interfacetest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CanSwim</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Hero.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.interfacetest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CanFight</span>, <span class="hljs-title">CanSwim</span> </span>&#123;<br>    String title;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hero</span><span class="hljs-params">(String n, String t)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(n);<br>        title = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hero</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        title = <span class="hljs-string">&quot;无证骑士&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;The hero is fighting.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;The hero is swimming.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.interfacetest;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person h1 = <span class="hljs-keyword">new</span> Hero();<br>        Hero h2 = <span class="hljs-keyword">new</span> Hero(<span class="hljs-string">&quot;琦玉&quot;</span>, <span class="hljs-string">&quot;秃头披风侠&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Hero is a subtype of Person? &quot;</span> + (h2 <span class="hljs-keyword">instanceof</span> Person));<br>        System.out.println(<span class="hljs-string">&quot;Hero is a subtype of CanSwim? &quot;</span> + (h2 <span class="hljs-keyword">instanceof</span> CanSwim));<br>        System.out.println(<span class="hljs-string">&quot;Hero is a subtype of CanFight? &quot;</span> + (h2 <span class="hljs-keyword">instanceof</span> CanFight));<br><br>        System.out.println();<br>        Class&lt;? extends Person&gt; h1RuntimeClass = h1.getClass();<br>        System.out.println(h1RuntimeClass);<br>        Method[] methods = h1RuntimeClass.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods)<br>            System.out.println(method);<br><br>        System.out.println();<br>        Class&lt;? extends Person&gt; h2RuntimeClass = h2.getClass();<br>        System.out.println(h2RuntimeClass);<br>        Method[] methods2 = h2RuntimeClass.getMethods();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> method : methods2)<br>            System.out.println(method);<br><br>        System.out.println();<br>        System.out.println(h1.name);<br><span class="hljs-comment">//        System.out.println(h1.title);  // ERROR</span><br>        h1.eat();<br><span class="hljs-comment">//        h1.fight();  // ERROR</span><br><span class="hljs-comment">//        h1.swim();  // ERROR</span><br><br>        System.out.println();<br>        System.out.println(h2.name);<br>        System.out.println(h2.title);<br>        h2.eat();<br>        h2.fight();<br>        h2.swim();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>output.out</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs processing">Hero is a subtype of Person? <span class="hljs-keyword">true</span><br>Hero is a subtype of CanSwim? <span class="hljs-keyword">true</span><br>Hero is a subtype of CanFight? <span class="hljs-keyword">true</span><br><br>class edu.wanpengxu.course.Hero<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Hero.fight()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Hero.swim()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Person.eat()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait(<span class="hljs-keyword">long</span>,<span class="hljs-built_in">int</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait() <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait(<span class="hljs-keyword">long</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> java.lang.<span class="hljs-keyword">Object</span>.equals(java.lang.<span class="hljs-keyword">Object</span>)<br><span class="hljs-keyword">public</span> java.lang.<span class="hljs-keyword">String</span> java.lang.<span class="hljs-keyword">Object</span>.toString()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-built_in">int</span> java.lang.<span class="hljs-keyword">Object</span>.hashCode()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> java.lang.Class java.lang.<span class="hljs-keyword">Object</span>.getClass()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.notify()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.notifyAll()<br><br>class edu.wanpengxu.course.Hero<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Hero.fight()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Hero.swim()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> edu.wanpengxu.course.Person.eat()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait(<span class="hljs-keyword">long</span>,<span class="hljs-built_in">int</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait() <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.wait(<span class="hljs-keyword">long</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> java.lang.<span class="hljs-keyword">Object</span>.equals(java.lang.<span class="hljs-keyword">Object</span>)<br><span class="hljs-keyword">public</span> java.lang.<span class="hljs-keyword">String</span> java.lang.<span class="hljs-keyword">Object</span>.toString()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-built_in">int</span> java.lang.<span class="hljs-keyword">Object</span>.hashCode()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> java.lang.Class java.lang.<span class="hljs-keyword">Object</span>.getClass()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.notify()<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.<span class="hljs-keyword">Object</span>.notifyAll()<br><br>路人甲<br>The person is eating.<br><br>琦玉<br>秃头披风侠<br>The person is eating.<br>The hero is fighting.<br>The hero is swimming.<br></code></pre></td></tr></table></figure></li></ol><p><strong>反射只能获取public方法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112092018603.png" alt=""></p><h3 id="接口的属性"><a href="#接口的属性" class="headerlink" title="接口的属性"></a>接口的属性</h3><p>可以使用接口引用变量，变量必须是实现了接口的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparable x;<br>x = <span class="hljs-keyword">new</span> Employee(...);<br></code></pre></td></tr></table></figure><p>可以使用<code>instanceof</code>检查一个对象是否实现了某个特定的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> Comparable) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>允许有多条接口链，从通用性较高的接口扩展到专用性较高的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Moveable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span> <span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y)</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Powered</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Moveable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">milesPerGallon</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个类可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span>, <span class="hljs-title">Comparable</span></span><br></code></pre></td></tr></table></figure><h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><p>为什么Java中会有接口？</p><p>因为，有些程序设计语言（尤其是C++）允许一个类有多个超类，这个特性称为多重继承（multiple inheritance），Java的设计者选择了不支持多重继承，其主要原因是多重继承会让语言变得非常复杂（如同C++），或者效率会降低（如同Eiffel）。</p><p>接口可以提供多重继承的大多数好处，同时还能避免多重继承的复杂性和低效性。</p><p>所以Java只能扩展一个类却可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span>, <span class="hljs-title">Comparable</span>  // <span class="hljs-title">ERROR</span></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>  // <span class="hljs-title">OK</span></span><br></code></pre></td></tr></table></figure><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>可以使用<code>default</code>修饰符为接口方法提供一个默认实现，这个默认方法主要用于“接口演化”，例如很久以前有这样一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bag</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collention</span></span><br></code></pre></td></tr></table></figure><p>后来Java要在Collention中增加一个stream方法，如果这个方法不是默认方法，由于Bag此前并没有实现stream方法，程序将不能编译，即不能保证<strong>“源代码兼容”</strong>。</p><p><strong>“二进制兼容”</strong>：在升级库文件的时候，不必<strong>重新编译</strong>使用此库的可执行文件或其他库文件，并且程序的功能不被破坏。</p><p><strong>“源代码兼容”</strong>：在升级库文件的时候，不必<strong>修改</strong>使用此库的可执行文件或其他库文件的<strong>源代码</strong>，只需重新编译应用程序，即可使程序的功能不被破坏。</p><p>增加非默认方法stream后，若不对Bag类重新编译（即使用之前编译好的JAR文件），当程序在Bag实例上调用steam方法时会出现<code>AbstractMethodError</code></p><p>若增加的是默认方法，那么上述情况会调用<code>Collection.stream</code>方法</p><h3 id="解决默认方法冲突"><a href="#解决默认方法冲突" class="headerlink" title="解决默认方法冲突"></a>解决默认方法冲突</h3><ol><li><p>超类优先</p><p>若一个类继承了超类，实现了接口，且超类和接口中有相同签名的方法，使用超类中的方法</p></li><li><p>接口冲突（让程序员解决）</p><p>使用下面的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Named</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;_&quot;</span> + hashCode();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span>, <span class="hljs-title">Named</span></span>&#123;  <span class="hljs-comment">// ERROR</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112100931666.png" alt=""></p><p>Java编译器会报错，让程序员来解决这个问题，解决方法是选择冲突方法中的一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span>, <span class="hljs-title">Named</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Person.<span class="hljs-keyword">super</span>.getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>&#123;接口名&#125;.super.&#123;方法名&#125;</code>的原因：在类继承中，我们使用<code>super.&#123;方法名&#125;</code>便可以调用超类的方法，但接口允许多继承，所以必须在super前指定是哪个接口。</p><blockquote><p>只要被实现的接口中的方法有一个提供了默认实现，编译器就会报错，若方法都没有默认实现则不存在冲突，因为必须在实现这些接口的类中实现方法。</p></blockquote></li></ol><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>lambda表达式：匿名函数，是代码块以及必须传入代码块的变量规范。</p><blockquote><p>为什么是λ？</p><p>这是逻辑学家Alonzo Church受《数学原理》（<em>Principia Mathematica</em>）中用重音符^表示自由变量启发，采用大写lambda（Λ）表示参数，后来又改为了小写lambda（λ）。从此带参数变量的表达式就被称为lambda表达式。</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(parameters) -&gt; expression<br></code></pre></td></tr></table></figure><p>或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(parameters) -&gt; &#123;<br>    statements;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(String first, String second) -&gt; &#123;<br>    first.length()-second.length();<br>&#125;<br></code></pre></td></tr></table></figure><p>特征：</p><ol><li>可选参数类型：由编译器识别参数类型，可以忽略参数类型</li><li>可选的圆括号：若只有一个参数，可以忽略圆括号</li><li>可选的大括号及return：若只有一条语句，可以忽略大括号、分号及<code>return</code></li></ol><p>若一个lambda表达式只在某些分支有返回值而其他分支无返回值，编译器会报错，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">(<span class="hljs-keyword">int</span> x) -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;  <span class="hljs-comment">// ERROR</span><br></code></pre></td></tr></table></figure><p>lambda 表达式的局部变量必须是<strong>事实最终变量</strong>（effectively final）（具有final特性），即lambda表达式使用的变量不可在之后被修改。</p><p>lambda表达式实际上是创建了一个对象以向方法传入。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112110019007.png" alt=""></p><p>另外，</p><p>当lambda表达式里没有使用上下文中的其他变量时，则每次执行lambda表达式都使用同一个对象。</p><p>当lambda表达式里使用了上下文中的其他变量时，则每次执行lambda表达式都会新建一个对象。</p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>函数式接口：只有一个抽象方法的接口（可以有静态方法、默认方法和重写Object的公共方法）。</p><blockquote><p>An informative annotation type used to indicate that an interface type declaration is intended to be a functional interface as defined by the Java Language Specification. Conceptually, <strong>a functional interface has exactly one abstract method.</strong> Since <strong><em>default methods</em></strong> have an implementation, they <strong>are not abstract.</strong> <strong>If an interface declares an abstract method overriding one of the public methods of <em>java.lang.Object</em>, that also does not count toward the interface’s abstract method count</strong> since any implementation of the interface will have an implementation from java.lang.Object or elsewhere.<br>Note that instances of functional interfaces can be created with lambda expressions, method references, or constructor references.<br>If a type is annotated with this annotation type, compilers are required to generate an error message unless:<br>The type is an interface type and not an annotation type, enum, or class.<br>The annotated type satisfies the requirements of a functional interface.<br>However, the compiler will treat any interface meeting the definition of a functional interface as a functional interface regardless of whether or not a FunctionalInterface annotation is present on the interface declaration.<br>自:<br>1.8</p></blockquote><p>eg. 函数式接口<code>Comparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Comparator&lt;T&gt; <span class="hljs-title">reversed</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.reverseOrder(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Comparator&lt;T&gt; <span class="hljs-title">thenComparing</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; other)</span> </span>&#123;<br>        Objects.requireNonNull(other);<br>        <span class="hljs-keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable) (c1, c2) -&gt; &#123;<br>            <span class="hljs-keyword">int</span> res = compare(c1, c2);<br>            <span class="hljs-keyword">return</span> (res != <span class="hljs-number">0</span>) ? res : other.compare(c1, c2);<br>        &#125;;<br>    &#125;<br>    <br>    <span class="hljs-keyword">default</span> &lt;U&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">thenComparing</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            Function&lt;? <span class="hljs-keyword">super</span> T, ? extends U&gt; keyExtractor,</span></span><br><span class="hljs-params"><span class="hljs-function">            Comparator&lt;? <span class="hljs-keyword">super</span> U&gt; keyComparator)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> thenComparing(comparing(keyExtractor, keyComparator));<br>    &#125;<br>    <br>    <span class="hljs-keyword">default</span> &lt;U extends Comparable&lt;? <span class="hljs-keyword">super</span> U&gt;&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">thenComparing</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            Function&lt;? <span class="hljs-keyword">super</span> T, ? extends U&gt; keyExtractor)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> thenComparing(comparing(keyExtractor));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Comparator&lt;T&gt; <span class="hljs-title">thenComparingInt</span><span class="hljs-params">(ToIntFunction&lt;? <span class="hljs-keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> thenComparing(comparingInt(keyExtractor));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Comparator&lt;T&gt; <span class="hljs-title">thenComparingLong</span><span class="hljs-params">(ToLongFunction&lt;? <span class="hljs-keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> thenComparing(comparingLong(keyExtractor));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Comparator&lt;T&gt; <span class="hljs-title">thenComparingDouble</span><span class="hljs-params">(ToDoubleFunction&lt;? <span class="hljs-keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> thenComparing(comparingDouble(keyExtractor));<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends Comparable&lt;? <span class="hljs-keyword">super</span> T&gt;&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">reverseOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.reverseOrder();<br>    &#125;<br>    <br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends Comparable&lt;? <span class="hljs-keyword">super</span> T&gt;&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">naturalOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (Comparator&lt;T&gt;) Comparators.NaturalOrderComparator.INSTANCE;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">nullsFirst</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; comparator)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Comparators.NullComparator&lt;&gt;(<span class="hljs-keyword">true</span>, comparator);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">nullsLast</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; comparator)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Comparators.NullComparator&lt;&gt;(<span class="hljs-keyword">false</span>, comparator);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, U&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">comparing</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            Function&lt;? <span class="hljs-keyword">super</span> T, ? extends U&gt; keyExtractor,</span></span><br><span class="hljs-params"><span class="hljs-function">            Comparator&lt;? <span class="hljs-keyword">super</span> U&gt; keyComparator)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Objects.requireNonNull(keyExtractor);<br>        Objects.requireNonNull(keyComparator);<br>        <span class="hljs-keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)<br>            (c1, c2) -&gt; keyComparator.compare(keyExtractor.apply(c1),<br>                                              keyExtractor.apply(c2));<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, U extends Comparable&lt;? <span class="hljs-keyword">super</span> U&gt;&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">comparing</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            Function&lt;? <span class="hljs-keyword">super</span> T, ? extends U&gt; keyExtractor)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Objects.requireNonNull(keyExtractor);<br>        <span class="hljs-keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)<br>            (c1, c2) -&gt; keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2));<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">comparingInt</span><span class="hljs-params">(ToIntFunction&lt;? <span class="hljs-keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;<br>        Objects.requireNonNull(keyExtractor);<br>        <span class="hljs-keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)<br>            (c1, c2) -&gt; Integer.compare(keyExtractor.applyAsInt(c1), keyExtractor.applyAsInt(c2));<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Comparator&lt;T&gt; <span class="hljs-title">comparingLong</span><span class="hljs-params">(ToLongFunction&lt;? <span class="hljs-keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;<br>        Objects.requireNonNull(keyExtractor);<br>        <span class="hljs-keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)<br>            (c1, c2) -&gt; Long.compare(keyExtractor.applyAsLong(c1), keyExtractor.applyAsLong(c2));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; Comparator&lt;T&gt; <span class="hljs-title">comparingDouble</span><span class="hljs-params">(ToDoubleFunction&lt;? <span class="hljs-keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;<br>        Objects.requireNonNull(keyExtractor);<br>        <span class="hljs-keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)<br>            (c1, c2) -&gt; Double.compare(keyExtractor.applyAsDouble(c1), keyExtractor.applyAsDouble(c2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如静态方法<code>Arrays.sort</code>的第二个参数需要一个<code>Comparator</code>实例，而<code>Comparator</code>就是一个函数式接口，所以可以提供一个lambda表达式。</p><p>下面是<code>Arrays.sort</code>和<code>Comparator</code>的方法原型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Contract(mutates = &quot;param1&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@NotNull</span> T[] a,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@Nullable</span> Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; c)</span> </span>&#123;<br>    ...<br>&#125;<br>    <br><span class="hljs-meta">@FunctionalInterface</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们可以这样使用<code>Arrays.sort</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Array.sort(words,<br>          (first, second) -&gt; first.length() - second.length());<br></code></pre></td></tr></table></figure><p>这其实就相当于C++11中的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(words.<span class="hljs-built_in">begin</span>(), <br>     words.<span class="hljs-built_in">end</span>(),<br>     [](string first, string second) -&gt; <span class="hljs-keyword">bool</span> &#123; <span class="hljs-keyword">return</span> first.<span class="hljs-built_in">length</span>() &gt; second.<span class="hljs-built_in">length</span>(); &#125;);<br></code></pre></td></tr></table></figure><p>或者C++11前（没有lambda表达式，只能传实名函数）的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">comp</span><span class="hljs-params">(string first, string second)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> first.<span class="hljs-built_in">length</span>() &gt; second.<span class="hljs-built_in">length</span>();<br>&#125; <br><span class="hljs-built_in">sort</span>(words.<span class="hljs-built_in">begin</span>(),<br>     words.<span class="hljs-built_in">end</span>(),<br>     comp);<br></code></pre></td></tr></table></figure><p>lambda表达式可以转换为函数式接口，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> timer = <span class="hljs-keyword">new</span> Timer (<span class="hljs-number">1000</span>, <br>                      event -&gt; &#123;<br>                          System.out.println(<span class="hljs-string">&quot;At the tone, the time is &quot;</span> + <br>                                            Instant.ofEpochMilli(event.getWhen()));<br>                          Toolkit.getDefaultToolKit().beep();<br>                      &#125;);<br></code></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用：指示编译器生成一个函数式接口的实例，覆盖这个接口的抽象方法来调用给定的方法。</p><p>可以理解为把方法抽取出来作为“函数”</p><p>使用方法主要有3：</p><ol><li><p>object::instanceMethod</p><p>eg. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out::println<br><span class="hljs-comment">// 等价于</span><br>x -&gt; System.out.println(x);<br><span class="hljs-comment">// 实例方法，提供了实例，把传入的都用来做参数</span><br></code></pre></td></tr></table></figure></li><li><p>Class::instanceMethod</p><p>eg.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String::compareToIgnoreCase<br><span class="hljs-comment">// 等价于</span><br>(x, y) -&gt; x.compareToIgnoreCase(y)<br><span class="hljs-comment">// 实例方法，未提供实例，把传入参数的第一个当实例</span><br><span class="hljs-comment">// 因为实例方法的第一个参数总是self</span><br></code></pre></td></tr></table></figure></li><li><p>Class::staticMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Math::pow<br><span class="hljs-comment">// 等价于</span><br>(x, y) -&gt; Math.pow(x, y)<br><span class="hljs-comment">// 静态方法不需要实例，把传入的都用来做参数</span><br></code></pre></td></tr></table></figure></li></ol><p>也可以在方法中使用<code>this</code>, <code>super</code>关键字</p><p>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.lambdatest;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String[] words = &#123;<span class="hljs-string">&quot;object&quot;</span>, <span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;lambda&quot;</span>, <span class="hljs-string">&quot;interface&quot;</span>, <span class="hljs-string">&quot;abstract&quot;</span>&#125;;<br><span class="hljs-comment">//        Arrays.sort(words,</span><br><span class="hljs-comment">//                (first, second) -&gt; first.length() - second.length());</span><br>        Arrays.sort(words,<br>                Test::comp);<br><span class="hljs-comment">//        Arrays.sort(words,</span><br><span class="hljs-comment">//                String::compareTo);</span><br><span class="hljs-comment">//        Arrays.sort(words,</span><br><span class="hljs-comment">//                Comparator.comparingInt(String::length));  // Comparator.comparingInt(x -&gt; x.length())</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> word : words)<br>            System.out.println(word);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">comp</span><span class="hljs-params">(String first, String second)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> first.length() - second.length();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于第一种<code>Arrays.sort</code>，就是直接传入lambda表达式</p><p>对于第二种<code>Arrays.sort</code>，是使用了自定义的方法引用</p><p>对于第三、四种<code>Arrays.sort</code>，是使用了<code>Java API</code>的方法引用</p><p>output.out</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span><br><span class="hljs-symbol">object</span><br><span class="hljs-symbol">lambda</span><br><span class="hljs-symbol">abstract</span><br><span class="hljs-symbol">interface</span><br></code></pre></td></tr></table></figure><p>从结果可以看出程序按照我们传入的算法进行了稳定的排序。</p><p>那么为什么可以呢？</p><p>我们首先看一下 <code>Arrays.sort</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] a, Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; c)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>            sort(a);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (LegacyMergeSort.userRequested)<br>                legacyMergeSort(a, c);<br>            <span class="hljs-keyword">else</span><br>                TimSort.sort(a, <span class="hljs-number">0</span>, a.length, c, <span class="hljs-keyword">null</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到接收的第二个参数是<code>Comparator</code>类的一个实例<code>c</code>，如果c不为null，那么将<code>c</code>传入<code>legacyMergeSort</code>(历史归并排序)。</p><p>跟踪进入<code>legacyMergeSort</code>方法看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">legacyMergeSort</span><span class="hljs-params">(T[] a, Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; c)</span> </span>&#123;<br>        T[] aux = a.clone();<br>        <span class="hljs-keyword">if</span> (c==<span class="hljs-keyword">null</span>)<br>            mergeSort(aux, a, <span class="hljs-number">0</span>, a.length, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">else</span><br>            mergeSort(aux, a, <span class="hljs-number">0</span>, a.length, <span class="hljs-number">0</span>, c);<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到接收的第二个参数是也<code>Comparator</code>类的一个实例<code>c</code>，如果c不为null，那么将<code>c</code>传入<code>mergeSort</code>(归并排序/合并排序)。</p><p>跟踪进入<code>mergeSort</code>方法看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(Object[] src,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  Object[] dest,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high, <span class="hljs-keyword">int</span> off,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  Comparator c)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = high - low;<br><br>        <span class="hljs-comment">// Insertion sort on smallest arrays</span><br>        <span class="hljs-keyword">if</span> (length &lt; INSERTIONSORT_THRESHOLD) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=low; i&lt;high; i++)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i; j&gt;low &amp;&amp; c.compare(dest[j-<span class="hljs-number">1</span>], dest[j])&gt;<span class="hljs-number">0</span>; j--)<br>                    swap(dest, j, j-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Recursively sort halves of dest into src</span><br>        <span class="hljs-keyword">int</span> destLow  = low;<br>        <span class="hljs-keyword">int</span> destHigh = high;<br>        low  += off;<br>        high += off;<br>        <span class="hljs-keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        mergeSort(dest, src, low, mid, -off, c);<br>        mergeSort(dest, src, mid, high, -off, c);<br><br>        <span class="hljs-comment">// If list is already sorted, just copy from src to dest.  This is an</span><br>        <span class="hljs-comment">// optimization that results in faster sorts for nearly ordered lists.</span><br>        <span class="hljs-keyword">if</span> (c.compare(src[mid-<span class="hljs-number">1</span>], src[mid]) &lt;= <span class="hljs-number">0</span>) &#123;<br>           System.arraycopy(src, low, dest, destLow, length);<br>           <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Merge sorted halves (now in src) into dest</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = destLow, p = low, q = mid; i &lt; destHigh; i++) &#123;<br>            <span class="hljs-keyword">if</span> (q &gt;= high || p &lt; mid &amp;&amp; c.compare(src[p], src[q]) &lt;= <span class="hljs-number">0</span>)<br>                dest[i] = src[p++];<br>            <span class="hljs-keyword">else</span><br>                dest[i] = src[q++];<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在这里看到了<code>c.compare(dest[j-1], dest[j])</code></p><p>跟踪进入<code>Comparator</code>类里面看看<code>compare</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们自定义的方法与方法签名完全一致（除了方法名外，方法参数一致，返回类型相同），所以可以传入。</p><p>同理，可以看一下<code>String</code>类里的<code>compareTo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(String anotherString)</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span> v1[] = value;<br>        <span class="hljs-keyword">byte</span> v2[] = anotherString.value;<br>        <span class="hljs-keyword">byte</span> coder = coder();<br>        <span class="hljs-keyword">if</span> (coder == anotherString.coder()) &#123;<br>            <span class="hljs-keyword">return</span> coder == LATIN1 ? StringLatin1.compareTo(v1, v2)<br>                                   : StringUTF16.compareTo(v1, v2);<br>        &#125;<br>        <span class="hljs-keyword">return</span> coder == LATIN1 ? StringLatin1.compareToUTF16(v1, v2)<br>                               : StringUTF16.compareToLatin1(v1, v2);<br>     &#125;<br></code></pre></td></tr></table></figure><p>函数签名看起来不太一样，但因为实例方法有一个隐含的<code>this</code>参数，<code>String</code>类的<code>compareTo</code>方法在实际调用的时候，第一个隐含参数总是传入<code>this</code>，相当于静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(<span class="hljs-keyword">this</span>, String o)</span></span>;<br></code></pre></td></tr></table></figure><p>所以它也可以作为方法引用传入。</p><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>可以认为是方法名为new的方法引用，二者都是对lambda表达式的简化。</p><p>eg. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Student::<span class="hljs-keyword">new</span><br><span class="hljs-comment">// 等价于</span><br>age -&gt; <span class="hljs-keyword">new</span> Student(age)<br></code></pre></td></tr></table></figure><p>此后可以使用<code>apply</code>方法向其传入参数。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（inner class）：定义在另一个类中的类。</p><p>使用内部类的原因：</p><ol><li>内部类可以对同一个包中的其他类隐藏</li><li>内部类方法可以访问外围类的作用域中所有的数据，包括原本私有的数据</li><li>便于<strong>回调</strong>（以后补）</li></ol><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;   <span class="hljs-comment">// 外部类</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>&#123; <span class="hljs-comment">// 嵌套类，或称为内部类</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内部类与外围类的字段、方法处于相同地位（都是外围类的成员）</p><p>内部类可以直接访问外围类成员</p><h3 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h3><p>外围类不能直接使用非静态内部类的成员，但可以创建一个内部类的实例，通过这个实例访问内部类的成员，有两种实现方法。</p><ol><li><p>在外围类内的方法中创建，与创建一般对象相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;内部类类名&#125; &#123;内部类变量&#125; = <span class="hljs-keyword">new</span> &#123;内部类构造方法名&#125;(&#123;参数列表&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在外围类外创建，需要使用如下格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;外部类实例&#125;.&#123;内部类类名&#125; &#123;内部类变量&#125; = &#123;外部类实例&#125;.new &#123;内部类构造方法名&#125;(&#123;参数列表&#125;);<br></code></pre></td></tr></table></figure><p>即在两侧左边同时加了<code>&#123;外部类实例&#125;.</code>以做限定</p></li></ol><p>若使用 <code>private</code> 或 <code>protected</code> 来修饰内部类，那么方法2将失效。</p><p>eg. PPT魔改例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.innerclasstest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> i1;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String label;<br><br>        InnerClass(String whereTo) &#123;<br>            label = whereTo;<br>        &#125;<br><br>        <span class="hljs-function">String <span class="hljs-title">readLabel</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> label + (i1++);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ship</span><span class="hljs-params">(String dest)</span> </span>&#123;<br>        InnerClass i = <span class="hljs-keyword">new</span> InnerClass(dest);<br>        System.out.println(i.readLabel());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.innerclasstest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        OuterClass outerClass = <span class="hljs-keyword">new</span> OuterClass();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>            outerClass.ship(<span class="hljs-string">&quot;1Test&quot;</span>);<br>        OuterClass.InnerClass innerClass = outerClass.<span class="hljs-function">new <span class="hljs-title">InnerClass</span><span class="hljs-params">(<span class="hljs-string">&quot;2Test&quot;</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>; i &lt;= <span class="hljs-number">9</span>; i++)<br>            System.out.println(innerClass.readLabel());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs">1Test0<br>1Test1<br>1Test2<br>1Test3<br>1Test4<br>2Test5<br>2Test6<br>2Test7<br>2Test8<br>2Test9<br></code></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>可以在外部类外直接创建静态内部类</p><p>静态内部类无法直接访问外部类的非static成员，但可以通过创建外部类实例访问，如eg2。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112102354155.png" alt=""></p><p>eg. PPT魔改例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.innerclasstest2;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> c = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//            System.out.println(&quot;OuterClass&#x27;s a: &quot; + a);  // ERROR</span><br>            System.out.println(<span class="hljs-string">&quot;OuterClass&#x27;s b: &quot;</span> + b);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        OuterClass.InnerClass.show();<br>        OuterClass.InnerClass innerClass = <span class="hljs-keyword">new</span> OuterClass.InnerClass();<br>        System.out.println(innerClass.c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>eg2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.innerclasstest3;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String s1 = <span class="hljs-string">&quot;I am in OuterClass&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String s2 = <span class="hljs-string">&quot;static in OuterClass&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String s1 = <span class="hljs-string">&quot;I am in InnerClass&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String s3 = <span class="hljs-keyword">new</span> OuterClass().s1;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(s1);<br>            System.out.println(<span class="hljs-keyword">this</span>.s1);<br>            System.out.println(s3);<br>            System.out.println(s2);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        OuterClass.InnerClass innerClass = <span class="hljs-keyword">new</span> OuterClass.InnerClass();<br><span class="hljs-comment">//        System.out.println(innerClass instanceof OuterClass);  // ERROR 内部类不是外围类的子类</span><br>        innerClass.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> am in InnerClass<br><span class="hljs-selector-tag">I</span> am in InnerClass<br><span class="hljs-selector-tag">I</span> am in OuterClass<br>static<br></code></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类（anonymous inner class）</p><p>这种方法最好使用lambda表达式替代，如lambda表达式那一节的截图一般。</p><p>假设有一个超类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am Class1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般的类创建实例的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Class1</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am Class2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class1 commonClassObject = <span class="hljs-keyword">new</span> Class2();<br>        commonClassObject.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类创建实例的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class1 anonymousInnerClassObject = <span class="hljs-keyword">new</span> Class1() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;I am Class3&quot;</span>);<br>            &#125;<br>        &#125;;<br>        anonymousInnerClassObject.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到减少了不少代码量</p><p>完整测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.wanpengxu.course.anonymousinnerclasstest;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am Class1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Class1</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am Class2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class1 commonClassObject = <span class="hljs-keyword">new</span> Class2();<br>        commonClassObject.display();<br><br>        Class1 anonymousInnerClassObject = <span class="hljs-keyword">new</span> Class1() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;I am Class3&quot;</span>);<br>            &#125;<br>        &#125;;<br>        anonymousInnerClassObject.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">I</span> am Class<span class="hljs-number">2</span><br><span class="hljs-attribute">I</span> am Class<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>事实上除了创建类的实例，还可以创建接口的实例。</p><h1 id="12-9-异常"><a href="#12-9-异常" class="headerlink" title="12.9 异常"></a>12.9 异常</h1><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h1 id="12-27-并发"><a href="#12-27-并发" class="headerlink" title="12.27 并发"></a>12.27 并发</h1>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备考2021年12月CSP学习笔记</title>
    <link href="/2021/11/28/%E5%A4%87%E8%80%832021%E5%B9%B412%E6%9C%88CSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/28/%E5%A4%87%E8%80%832021%E5%B9%B412%E6%9C%88CSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>结语：第24次CSP认证尘埃落定，210分，并不很理想，甚至没有我大一时考的高，但并不能认为自己退步了，因为近年的T2都有30%的卡常数据。T4、T5我也都写出了暴力解法，保守能过25+12分的点，但本次比赛最后一个小时一直waiting，心态崩掉了，也不知道该改哪里。学如逆水行舟，不进则退。退的不多又何尝不是一种进步呢？</p></blockquote><h1 id="202109"><a href="#202109" class="headerlink" title="202109"></a>202109</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T129">202109-1 数组推导</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>$A_1, A_2, \cdots, A_n$ 是一个由 $n$ 个<strong>自然数</strong>（即非负整数）组成的数组。在此基础上，我们用数组 $B_1 \cdots B_n$ 表示 $A$ 的前缀最大值。</p><script type="math/tex; mode=display">B_i = \max \left\{ A_1, A_2,  \cdots, A_i \right\}</script><p>如上所示，$B_i$ 定义为数组 $A$ 中前 $i$ 个数的最大值。<br>根据该定义易知 $A_1 = B_1$，且随着 $i$ 的增大，$B_i$ 单调不降。<br>此外，我们用 $sum = A_1 + A_2 + \cdots + A_n$ 表示数组 $A$ 中 $n$ 个数的总和。</p><p>现已知数组 $B$，我们想要根据 $B$ 的值来反推数组 $A$。<br>显然，对于给定的 $B$，$A$ 的取值可能并不唯一。<br>试计算，在数组 $A$ 所有可能的取值情况中，$sum$ 的最大值和最小值分别是多少？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入读入数据。</p><p>输入的第一行包含一个正整数 $n$。</p><p>输入的第二行包含 $n$ 个用空格分隔的自然数 $B_1, B_2, \cdots, B_n$。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出到标准输出。</p><p>输出共两行。</p><p>第一行输出一个整数，表示 $sum$ 的最大值。</p><p>第二行输出一个整数，表示 $sum$ 的最小值。</p><h3 id="样例1输入"><a href="#样例1输入" class="headerlink" title="样例1输入"></a>样例1输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">6<br>0 0 5 5 10 10<br></code></pre></td></tr></table></figure><h3 id="样例1输出"><a href="#样例1输出" class="headerlink" title="样例1输出"></a>样例1输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">30<br>15<br></code></pre></td></tr></table></figure><h3 id="样例1解释"><a href="#样例1解释" class="headerlink" title="样例1解释"></a>样例1解释</h3><p>数组 $A$ 的可能取值包括但不限于以下三种情况。</p><p>情况一：$A = [0, 0, 5, 5, 10, 10]$</p><p>情况二：$A = [0, 0, 5, 3, 10, 4]$</p><p>情况三：$A = [0, 0, 5, 0, 10, 0]$</p><p>其中第一种情况 $sum = 30$ 为最大值，第三种情况 $sum = 15$ 为最小值。</p><h3 id="样例2输入"><a href="#样例2输入" class="headerlink" title="样例2输入"></a>样例2输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">7<br>10 20 30 40 50 60 75<br></code></pre></td></tr></table></figure><h3 id="样例2输出"><a href="#样例2输出" class="headerlink" title="样例2输出"></a>样例2输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">285<br>285<br></code></pre></td></tr></table></figure><h3 id="样例2解释"><a href="#样例2解释" class="headerlink" title="样例2解释"></a>样例2解释</h3><p>$A = [10, 20, 30, 40, 50, 60, 75]$ 是唯一可能的取值，所以 $sum$ 的最大、最小值均为 $285$。</p><h3 id="子任务"><a href="#子任务" class="headerlink" title="子任务"></a>子任务</h3><p>$50%$ 的测试数据满足数组 $B$ 单调递增，即 $0 &lt; B_1 &lt; B_2 &lt; \cdots &lt; B_n &lt; 10^{5}$；</p><p>全部的测试数据满足 $n \le 100$ 且数组 $B$ 单调不降，即 $0 \le B_1 \le B_2 \le \cdots \le B_n \le 10^{5}$。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由题意，显然有$0\le A_i\le B_i$，当想要得到最大值时，只需令$A_i=B_i$，此时的数组$A_1, A_2, \cdots, A_n=B_1 \cdots B_n$，当想要得到最小值时，只需令</p><script type="math/tex; mode=display">A_i=\left\{\begin{aligned}0 & , & B_{i-1} = B_i \\B_i & , & B_{i-1}< B_i \end{aligned}\right.</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>b=[<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br>max_sum=<span class="hljs-built_in">sum</span>(b)<br>min_sum=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> b[i-<span class="hljs-number">1</span>]&gt;=b[i]:<br>        min_sum+=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        min_sum+=b[i]<br>min_sum+=b[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(max_sum)<br><span class="hljs-built_in">print</span>(min_sum)<br></code></pre></td></tr></table></figure><h1 id="202104"><a href="#202104" class="headerlink" title="202104"></a>202104</h1><h2 id="第1题-1"><a href="#第1题-1" class="headerlink" title="第1题"></a>第1题</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T128">202104-1 灰度直方图</a></p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一幅长宽分别为 $n$ 个像素和 $m$ 个像素的灰度图像可以表示为一个 $n×m$ 大小的矩阵 $A$。<br>其中每个元素 $Aij$（$0≤i&lt;n$、$0≤j&lt;m$）是一个 $[0,L)$ 范围内的整数，表示对应位置像素的灰度值。<br>具体来说，一个 $8$ 比特的灰度图像中每个像素的灰度范围是 $[0,128)$。</p><p>一副灰度图像的灰度统计直方图（以下简称“直方图”）可以表示为一个长度为 $L$ 的数组 $h$，其中 $h[x]$（$0≤x&lt;L$）表示该图像中灰度值为 $x$ 的像素个数。显然，$h[0]$ 到 $h[L−1]$ 的总和应等于图像中的像素总数 $n⋅m$。</p><p>已知一副图像的灰度矩阵 $A$，试计算其灰度直方图 $h[0],h[1],⋯,h[L−1]$。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入共 $n+1$ 行。</p><p>输入的第一行包含三个用空格分隔的正整数 $n$、$m$ 和 $L$，含义如前文所述。</p><p>第 $2$ 到第 $n+1$ 行输入矩阵 $A$。<br>第 $i+2$（$0≤i&lt;n$）行包含用空格分隔的 $m$ 个整数，依次为 $A<em>{i0},A</em>{i1},⋯,A_{i(m−1)}$。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出仅一行，包含用空格分隔的 $L$ 个整数 $h[0],h[1],⋯,h[L−1]$，表示输入图像的灰度直方图。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs data">4 4 16<br>0 1 2 3<br>4 5 6 7<br>8 9 10 11<br>12 13 14 15<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br></code></pre></td></tr></table></figure><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs data">7 11 8<br>0 7 0 0 0 7 0 0 7 7 0<br>7 0 7 0 7 0 7 0 7 0 7<br>7 0 0 0 7 0 0 0 7 0 7<br>7 0 0 0 0 7 0 0 7 7 0<br>7 0 0 0 0 0 7 0 7 0 0<br>7 0 7 0 7 0 7 0 7 0 0<br>0 7 0 0 0 7 0 0 7 0 0<br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">48 0 0 0 0 0 0 29<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>全部的测试数据满足 $0&lt;n,m≤500$ 且 $4≤L≤256$。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>模拟题</p><p>根据题意构建各变量然后统计即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m,L=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>A=[]<br>h=[<span class="hljs-number">0</span>]*L<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    A+=[<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> A:<br>    h[a]+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,h)))<br></code></pre></td></tr></table></figure><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T127">202104-2 邻域均值</a></p><h3 id="试题背景"><a href="#试题背景" class="headerlink" title="试题背景"></a>试题背景</h3><p>顿顿在学习了数字图像处理后，想要对手上的一副灰度图像进行降噪处理。不过该图像仅在较暗区域有很多噪点，如果贸然对全图进行降噪，会在抹去噪点的同时也模糊了原有图像。因此顿顿打算先使用<strong>邻域均值</strong>来判断一个像素是否处于<strong>较暗区域</strong>，然后仅对处于<strong>较暗区域</strong>的像素进行降噪处理。</p><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>待处理的灰度图像长宽皆为 $n$ 个像素，可以表示为一个 $n×n$ 大小的矩阵 $A$，其中每个元素是一个 $[0,L)$ 范围内的整数，表示对应位置像素的灰度值。<br>对于矩阵中任意一个元素 $Aij(0≤i,j&lt;n)$，其<strong>邻域</strong>定义为附近若干元素的集合：</p><script type="math/tex; mode=display">Neighbor(i, j, r) = \left\{ A_{xy} | 0 \le x, y < n \mathrm{~and~} |x-i| \le r \mathrm{~and~} |y-j| \le r \right\}</script><p>这里使用了一个额外的参数 $r$ 来指明 $Aij$ 附近元素的具体范围。根据定义，易知 $Neighbor(i,j,r)$ 最多有 $(2r+1)^2$ 个元素。</p><p>如果元素 $Aij$ <strong>邻域</strong>中所有元素的<strong>平均值</strong>小于或等于一个给定的阈值 $t$，我们就认为该元素对应位置的像素处于<strong>较暗区域</strong>。<br>下图给出了两个例子，左侧图像的较暗区域在右侧图像中展示为黑色，其余区域展示为白色。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111281731890.jpg" alt=""></p><p>现给定邻域参数 $r$ 和阈值 $t$，试统计输入灰度图像中有多少像素处于<strong>较暗区域</strong>。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入共 $n+1$ 行。</p><p>输入的第一行包含四个用空格分隔的正整数 $n、L、r $ 和 $t$，含义如前文所述。</p><p>第二到第 $n+1$ 行输入矩阵 $A$。<br>第 $i+2(0≤i&lt;n)$ 行包含用空格分隔的$n$个整数，依次为 $Ai0,Ai1,⋯,Ai(n−1)$。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数，表示输入灰度图像中处于较暗区域的像素总数。</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs data">4 16 1 6<br>0 1 2 3<br>4 5 6 7<br>8 9 10 11<br>12 13 14 15<br></code></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">7<br></code></pre></td></tr></table></figure><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs data">11 8 2 2<br>0 0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0 0<br>0 7 0 0 0 7 0 0 7 7 0<br>7 0 7 0 7 0 7 0 7 0 7<br>7 0 0 0 7 0 0 0 7 0 7<br>7 0 0 0 0 7 0 0 7 7 0<br>7 0 0 0 0 0 7 0 7 0 0<br>7 0 7 0 7 0 7 0 7 0 0<br>0 7 0 0 0 7 0 0 7 0 0<br>0 0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0 0<br></code></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">83<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>70% 的测试数据满足 $n≤100$、$r≤10$。</p><p>全部的测试数据满足 $0&lt;n≤600$、$0&lt;r≤100$ 且 $2≤t&lt;L≤256$。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>题目要求计算领域均值，那么首先要计算的是<script type="math/tex">\sum{Neighbor(i, j, r)}</script>，其次是$|Neighbor(i,j,r)|$，对于<script type="math/tex">\sum{Neighbor(i, j, r)}</script>，不难发现，如果对每一个元素进行暴力求解，将会计算大量重复区域，这样的话我们可以使用<strong>二维前缀和</strong>方法，即对于一个矩阵 $a$，我们定义一个矩阵 $psum$，使得 <script type="math/tex">psum_{x,y}=\sum\limits_{i=1}^{x}\sum\limits_{j=1}^{y}a_{i,j}</script>，那么，要求解某一个特定的子矩阵的和，只需使用容斥原理即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">n,L,r,t=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>A=[[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    A.append([<span class="hljs-number">0</span>]+[<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()])<br>psum=[[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        psum[i][j]=psum[i-<span class="hljs-number">1</span>][j]+psum[i][j-<span class="hljs-number">1</span>]-psum[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+A[i][j]<br>num=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        w=<span class="hljs-built_in">max</span>(j-r,<span class="hljs-number">1</span>)<br>        s=<span class="hljs-built_in">min</span>(j+r,n)<br>        a=<span class="hljs-built_in">max</span>(i-r,<span class="hljs-number">1</span>)<br>        d=<span class="hljs-built_in">min</span>(i+r,n)<br>        st=(psum[d][s]-psum[d][w-<span class="hljs-number">1</span>]-psum[a-<span class="hljs-number">1</span>][s]+psum[a-<span class="hljs-number">1</span>][w-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">if</span> st&lt;=t*((s-w+<span class="hljs-number">1</span>)*(d-a+<span class="hljs-number">1</span>)):<br>            num+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><h3 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T126"> 202104-3 DHCP服务器</a></p><h3 id="试题背景-1"><a href="#试题背景-1" class="headerlink" title="试题背景"></a>试题背景</h3><p><strong>动态主机配置协议</strong>（Dynamic Host Configuration Protocol, DHCP）是一种自动为网络客户端分配 IP 地址的网络协议。当支持该协议的计算机刚刚接入网络时，它可以启动一个 DHCP 客户端程序。后者可以通过一定的网络报文交互，从 DHCP 服务器上获得 IP 地址等网络配置参数，从而能够在用户不干预的情况下，自动完成对计算机的网络设置，方便用户连接网络。DHCP 协议的工作过程如下：</p><ol><li>当 DHCP 协议启动的时候，DHCP 客户端向网络中广播发送 Discover 报文，请求 IP 地址配置；</li><li>当 DHCP 服务器收到 Discover 报文时，DHCP 服务器根据报文中的参数选择一个尚未分配的 IP 地址，分配给该客户端。DHCP 服务器用 Offer 报文将这个信息传达给客户端；</li><li>客户端收集收到的 Offer 报文。由于网络中可能存在多于一个 DHCP 服务器，因此客户端可能收集到多个 Offer 报文。客户端从这些报文中选择一个，并向网络中广播 Request 报文，表示选择这个 DHCP 服务器发送的配置；</li><li>DHCP 服务器收到 Request 报文后，首先判断该客户端是否选择本服务器分配的地址：如果不是，则在本服务器上解除对那个 IP 地址的占用；否则则再次确认分配的地址有效，并向客户端发送 Ack 报文，表示确认配置有效，Ack 报文中包括配置的有效时间。如果 DHCP 发现分配的地址无效，则返回 Nak 报文；</li><li>客户端收到 Ack 报文后，确认服务器分配的地址有效，即确认服务器分配的地址未被其它客户端占用，则完成网络配置，同时记录配置的有效时间，出于简化的目的，我们不考虑被占用的情况。若客户端收到 Nak 报文，则从步骤 1 重新开始；</li><li>客户端在到达配置的有效时间前，再次向 DHCP 服务器发送 Request 报文，表示希望延长 IP 地址的有效期。DHCP 服务器按照步骤 4 确定是否延长，客户端按照步骤 5 处理后续的配置；</li></ol><p>在本题目中，你需要理解 DHCP 协议的工作过程，并按照题目的要求实现一个简单的 DHCP 服务器。</p><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><h4 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h4><p>为了便于实现，我们简化地规定 DHCP 数据报文的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">&lt;发送主机&gt; &lt;接收主机&gt; &lt;报文类型&gt; &lt;IP 地址&gt; &lt;过期时刻&gt;<br></code></pre></td></tr></table></figure><p>DHCP 数据报文的各个部分由空格分隔，其各个部分的定义如下：</p><ul><li>发送主机：是发送报文的主机名，<strong>主机名</strong>是由小写字母、数字组成的字符串，唯一地表示了一个主机；</li><li>接收主机：当有特定的接收主机时，是接收报文的主机名；当没有特定的接收主机时，为一个星号（<code>*</code>）；</li><li>报文类型：是三个大写字母，取值如下：<ul><li><code>DIS</code>：表示 Discover 报文；</li><li><code>OFR</code>：表示 Offer 报文；</li><li><code>REQ</code>：表示 Request 报文；</li><li><code>ACK</code>：表示 Ack 报文；</li><li><code>NAK</code>：表示 Nak 报文；</li></ul></li><li>IP 地址，是一个非负整数：<ul><li>对于 Discover 报文，该部分在发送的时候为 0，在接收的时候忽略；</li><li>对于其它报文，为正整数，表示一个 IP 地址；</li></ul></li><li>过期时刻，是一个非负整数：<ul><li>对于 Offer、Ack 报文，是一个正整数，表示服务器授予客户端的 IP 地址的过期时刻；</li><li>对于 Discover、Request 报文，若为正整数，表示客户端期望服务器授予的过期时刻；</li><li>对于其它报文，该部分在发送的时候为 0，在接收的时候忽略。</li></ul></li></ul><p>例如下列都是合法的 DHCP 数据报文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">a * DIS 0 0<br>d a ACK 50 1000<br></code></pre></td></tr></table></figure><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>为了 DHCP 服务器能够正确分配 IP 地址，DHCP 需要接受如下配置：</p><ul><li>地址池大小 N：表示能够分配给客户端的 IP 地址的数目，且能分配的 IP 地址是 1,2,…,N；</li><li>默认过期时间 Tdef：表示分配给客户端的 IP 地址的默认的过期时间长度；</li><li>过期时间的上限和下限 Tmax、Tmin：表示分配给客户端的 IP 地址的最长过期时间长度和最短过期时间长度，客户端不能请求比这个更长或更短的过期时间；</li><li>本机名称 H：表示运行 DHCP 服务器的主机名。</li></ul><h4 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h4><p>当客户端请求 IP 地址时，首先检查此前是否给该客户端分配过 IP 地址，且该 IP 地址在此后没有被分配给其它客户端。如果是这样的情况，则直接将 IP 地址分配给它，否则，<br>总是分配给它最小的尚未占用过的那个 IP 地址。如果这样的地址不存在，则分配给它最小的此时未被占用的那个 IP 地址。如果这样的地址也不存在，说明地址池已经分配完毕，因此拒绝分配地址。</p><h4 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h4><p>在 DHCP 启动时，首先初始化 IP 地址池，将所有地址设置状态为未分配，占用者为空，并清零过期时刻。<br>其中地址的状态有未分配、待分配、占用、过期四种。<br>处于未分配状态的 IP 地址没有占用者，而其余三种状态的 IP 地址均有一名占用者。<br>处于待分配和占用状态的 IP 地址拥有一个大于零的过期时刻。在到达该过期时刻时，若该地址的状态是待分配，则该地址的状态会自动变为未分配，且占用者清空，过期时刻清零；否则该地址的状态会由占用自动变为过期，且过期时刻清零。处于未分配和过期状态的 IP 地址过期时刻为零，即没有过期时刻。</p><p>对于收到的报文，设其收到的时刻为 t。处理细节如下：</p><ol><li>判断接收主机是否为本机，或者为 <code>*</code>，若不是，则判断类型是否为 Request，若不是，则不处理；</li><li>若类型不是 Discover、Request 之一，则不处理；</li><li>若接收主机为 <code>*</code>，但类型不是 Discover，或接收主机是本机，但类型是 Discover，则不处理。</li></ol><p>对于 Discover 报文，按照下述方法处理：</p><ol><li>检查是否有占用者为发送主机的 IP 地址：<ul><li>若有，则选取该 IP 地址；</li><li>若没有，则选取最小的状态为未分配的 IP 地址；</li><li>若没有，则选取最小的状态为过期的 IP 地址；</li><li>若没有，则不处理该报文，处理结束；</li></ul></li><li>将该 IP 地址状态设置为待分配，占用者设置为发送主机；</li><li>若报文中过期时刻为 0 ，则设置过期时刻为 t+Tdef；否则根据报文中的过期时刻和收到报文的时刻计算过期时间，判断是否超过上下限：若没有超过，则设置过期时刻为报文中的过期时刻；否则则根据超限情况设置为允许的最早或最晚的过期时刻；</li><li>向发送主机发送 Offer 报文，其中，IP 地址为选定的 IP 地址，过期时刻为所设定的过期时刻。</li></ol><p>对于 Request 报文，按照下述方法处理：</p><ol><li>检查接收主机是否为本机：<ul><li>若不是，则找到占用者为发送主机的所有 IP 地址，对于其中状态为待分配的，将其状态设置为未分配，并清空其占用者，清零其过期时刻，处理结束；</li></ul></li><li>检查报文中的 IP 地址是否在地址池内，且其占用者为发送主机，若不是，则向发送主机发送 Nak 报文，处理结束；</li><li>无论该 IP 地址的状态为何，将该 IP 地址的状态设置为占用；</li><li>与 Discover 报文相同的方法，设置 IP 地址的过期时刻；</li><li>向发送主机发送 Ack 报文。</li></ol><p>上述处理过程中，地址池中地址的状态的变化可以概括为如下图所示的状态转移图。为了简洁，该图中没有涵盖需要回复 Nak 报文的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111281721522.jfif" alt=""></p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含用空格分隔的四个正整数和一个字符串，分别是：N、Tdef、Tmax、Tmin 和 H，保证 Tmin≤Tdef≤Tmax。</p><p>输入的第二行是一个正整数 n，表示收到了 n 个报文。</p><p>输入接下来有 n 行，第 (i+2) 行有空格分隔的正整数 ti 和约定格式的报文 Pi。表示收到的第 i 个报文是在 ti 时刻收到的，报文内容是 Pi。保证 ti&lt;ti+1。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出有若干行，每行是一个约定格式的报文。依次输出 DHCP 服务器发送的报文。</p><h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs data">4 5 10 5 dhcp<br>16<br>1 a * DIS 0 0<br>2 a dhcp REQ 1 0<br>3 b a DIS 0 0<br>4 b * DIS 3 0<br>5 b * REQ 2 12<br>6 b dhcp REQ 2 12<br>7 c * DIS 0 11<br>8 c dhcp REQ 3 11<br>9 d * DIS 0 0<br>10 d dhcp REQ 4 20<br>11 a dhcp REQ 1 20<br>12 c dhcp REQ 3 20<br>13 e * DIS 0 0<br>14 e dhcp REQ 2 0<br>15 b dhcp REQ 2 25<br>16 b * DIS 0 0<br></code></pre></td></tr></table></figure><h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs data">dhcp a OFR 1 6<br>dhcp a ACK 1 7<br>dhcp b OFR 2 9<br>dhcp b ACK 2 12<br>dhcp c OFR 3 12<br>dhcp c ACK 3 13<br>dhcp d OFR 4 14<br>dhcp d ACK 4 20<br>dhcp a ACK 1 20<br>dhcp c ACK 3 20<br>dhcp e OFR 2 18<br>dhcp e ACK 2 19<br>dhcp b NAK 2 0<br></code></pre></td></tr></table></figure><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>输入第一行，分别设置了 DHCP 的相关参数，并收到了 16 个报文。</p><p>第 1 个报文和第 2 个报文是客户端 <code>a</code> 正常请求地址，服务器为其分配了地址 1，相应地设置了过期时刻是 7（即当前时刻 2 加上默认过期时间 5）。</p><p>第 3 个报文不符合 Discover 报文的要求，不做任何处理。</p><p>第 4 个报文 <code>b</code> 发送的 Discover 报文虽然有 IP 地址 3，但是按照处理规则，这个字段被忽略，因此服务器返回 Offer 报文，过期时刻是 9。</p><p>第 5 个报文中，Request 报文不符合接收主机是 DHCP 服务器本机的要求，因此不做任何处理。</p><p>第 6 个报文是 <code>b</code> 发送的 Request 报文，其中设置了过期时刻是 12，没有超过最长过期时间，因此返回的 Ack 报文中过期时刻也是 12。</p><p>第 7 个报文中，过期时刻 11 小于最短过期时间，因此返回的过期时刻是 12。虽然此时为 <code>a</code> 分配的地址 1 过期，但是由于还有状态为未分配的地址 3，因此为 <code>c</code> 分配地址 3。第 8 个报文同理，为 <code>c</code> 分配的地址过期时刻是 13。</p><p>第 9、10 两个报文中，为 <code>d</code> 分配了地址 4，过期时刻是 20。</p><p>第 11 个报文中，<code>a</code> 请求重新获取此前为其分配的地址 1，虽然为其分配的地址过期，但是由于尚未分配给其它客户端，因此 DHCP 服务器可以直接为其重新分配该地址，并重新设置过期时刻为 20。</p><p>第 12 个报文中，<code>c</code> 请求延长其地址的过期时刻为 20。DHCP 正常向其回复 Ack 报文。</p><p>第 13、14 个报文中，<code>e</code> 试图请求地址。此时地址池中已经没有处于“未分配”状态的地址了，但是有此前分配给 <code>b</code> 的地址 2 的状态是“过期”，因此把该地址重新分配给 <code>e</code>。</p><p>第 15 个报文中，<code>b</code> 试图重新获取此前为其分配的地址 2，但是此时该地址已经被分配给 <code>e</code>，因此返回 Nak 报文。</p><p>第 16 个报文中，<code>b</code> 试图重新请求分配一个 IP 地址，但是此时地址池中已经没有可用的地址了，因此忽略该请求。</p><h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs data">4 70 100 50 dhcp<br>6<br>5 a * OFR 2 100<br>10 b * DIS 0 70<br>15 b dhcp2 REQ 4 60<br>20 c * DIS 0 70<br>70 d * DIS 0 120<br>75 d dhcp REQ 1 125<br></code></pre></td></tr></table></figure><h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs data">dhcp b OFR 1 70<br>dhcp c OFR 1 70<br>dhcp d OFR 1 120<br>dhcp d ACK 1 125<br></code></pre></td></tr></table></figure><h3 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h3><p>在本样例中，DHCP 服务器一共收到了 6 个报文，处理情况如下：</p><p>第 1 个报文不是 DHCP 服务器需要处理的报文，因此不回复任何报文。</p><p>第 2 个报文中，<code>b</code> 请求分配 IP 地址，因此 DHCP 服务器将地址 1 分配给 <code>b</code>，此时，地址 1 进入待分配状态，DHCP 服务器向 <code>b</code> 发送 Offer 报文。</p><p>第 3 个报文中，<code>b</code> 发送的 REQ 报文是发给非本服务器的，因此需要将地址池中所有拥有者是 <code>b</code> 的待分配状态的地址修改为未分配。</p><p>第 4 个报文中，<code>c</code> 请求分配 IP 地址。由于地址 1 此时是未分配状态，因此将该地址分配给它，向它发送 Offer 报文，地址 1 进入待分配状态。</p><p>第 5、6 个报文中，<code>d</code> 请求分配 IP 地址。注意到在收到第 5 个报文时，已经是时刻 70，地址 1 的过期时刻已到，它的状态已经被修改为了未分配，因此 DHCP 服务器仍然将地址 1 分配给 <code>d</code>。</p><h3 id="评测用例规模与约定-2"><a href="#评测用例规模与约定-2" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 20% 的数据，有 N≤200，且 n≤N，且输入仅含 Discover 报文，且 t&lt;Tmin；</p><p>对于 50% 的数据，有 N≤200，且 n≤N，且 t&lt;Tmin，且报文的接收主机或为本机，或为 <code>*</code>；</p><p>对于 70% 的数据，有 N≤1000，且 n≤N，且报文的接收主机或为本机，或为 <code>*</code>；</p><p>对于 100% 的数据，有 N≤10000，且 n≤10000，主机名的长度不超过 20，且 t,Tmin,Tdefault,Tmax≤109，输入的报文格式符合题目要求，且数字不超过 109。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>模拟就是用计算机来模拟题目中要求的操作。</p><p>大模拟，也就是复杂模拟题，是CSP中T3的的固定题型。</p><p>代码对应的要求已经注释在了旁边，故这里略。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipAddress</span> &#123;</span><br>    <span class="hljs-keyword">int</span> time;<br>    <span class="hljs-keyword">int</span> state;  <span class="hljs-comment">// 1:未分配, 2:待分配, 3:占用, 4:过期</span><br>    string name;<br>&#125;;<br>ipAddress ipPool[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, tdef, tmax, tmin;<br>    string host;<br>    cin &gt;&gt; n &gt;&gt; tdef &gt;&gt; tmax &gt;&gt; tmin &gt;&gt; host;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ipPool[i].state = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">int</span> n2;<br>    cin &gt;&gt; n2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n2; k++) &#123;<br>        string lhost, rhost, type;<br>        <span class="hljs-keyword">int</span> seq, ip, time;<br>        cin &gt;&gt; seq &gt;&gt; lhost &gt;&gt; rhost &gt;&gt; type &gt;&gt; ip &gt;&gt; time;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-comment">// 在到达该过期时刻时</span><br>            <span class="hljs-keyword">if</span> (ipPool[i].time &lt;= seq) &#123;<br>                <span class="hljs-comment">// 若该地址的状态是待分配，则该地址的状态会自动变为未分配，且占用者清空，过期时刻清零；</span><br>                <span class="hljs-keyword">if</span> (ipPool[i].state == <span class="hljs-number">2</span>) &#123;<br>                    ipPool[i].state = <span class="hljs-number">1</span>;<br>                    ipPool[i].name = <span class="hljs-string">&quot;&quot;</span>;<br>                    ipPool[i].time = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-comment">// 否则该地址的状态会由占用自动变为过期，且过期时刻清零。</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ipPool[i].state == <span class="hljs-number">3</span>) &#123;<br>                    ipPool[i].state = <span class="hljs-number">4</span>;<br>                    ipPool[i].time = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 对于收到的报文</span><br>        <span class="hljs-comment">// 判断接收主机是否为本机，或者为 *，若不是，则判断类型是否为 Request，若不是，则不处理；</span><br>        <span class="hljs-comment">// 这里判断类型是否为 Request是在或条件后面，本身就是前两个都为假才判断的，可以写在一行</span><br>        <span class="hljs-keyword">if</span> ((rhost == host || rhost == <span class="hljs-string">&quot;*&quot;</span>) || type == <span class="hljs-string">&quot;REQ&quot;</span>) &#123;<br>            <span class="hljs-comment">// 若类型不是 Discover、Request 之一，则不处理；</span><br>            <span class="hljs-keyword">if</span> (type != <span class="hljs-string">&quot;DIS&quot;</span> &amp;&amp; type != <span class="hljs-string">&quot;REQ&quot;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 若接收主机为 *，但类型不是 Discover，或接收主机是本机，但类型是 Discover，则不处理。</span><br>            <span class="hljs-keyword">if</span> ((rhost == <span class="hljs-string">&quot;*&quot;</span> &amp;&amp; type != <span class="hljs-string">&quot;DIS&quot;</span>) || (rhost == host &amp;&amp; type == <span class="hljs-string">&quot;DIS&quot;</span>))<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 对于 Discover 报文</span><br>            <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;DIS&quot;</span>) &#123;<br>                <span class="hljs-keyword">int</span> select = <span class="hljs-number">-1</span>;<br>                <span class="hljs-comment">// 检查是否有占用者为发送主机的 IP 地址</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                    <span class="hljs-comment">// 若有，则选取该 IP 地址；</span><br>                    <span class="hljs-comment">// 加一条，IP地址应为未分配的</span><br>                    <span class="hljs-keyword">if</span> (ipPool[i].name == lhost &amp;&amp; ipPool[i].state != <span class="hljs-number">1</span>) &#123;<br>                        select = i;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                <span class="hljs-comment">// 若没有，则选取最小的状态为未分配的 IP 地址；</span><br>                <span class="hljs-keyword">if</span> (select == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                        <span class="hljs-keyword">if</span> (ipPool[i].state == <span class="hljs-number">1</span>) &#123;<br>                            select = i;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                &#125;<br>                <span class="hljs-comment">// 若没有，则选取最小的状态为过期的 IP 地址；</span><br>                <span class="hljs-keyword">if</span> (select == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                        <span class="hljs-keyword">if</span> (ipPool[i].state == <span class="hljs-number">4</span>) &#123;<br>                            select = i;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (select != <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-comment">// 将该 IP 地址状态设置为待分配，占用者设置为发送主机；</span><br>                    ipPool[select].state = <span class="hljs-number">2</span>;<br>                    ipPool[select].name = lhost;<br>                    <span class="hljs-comment">// 若报文中过期时刻为 0 ，则设置过期时刻为t+T_def；</span><br>                    <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>)<br>                        ipPool[select].time = seq + tdef;<br>                    <span class="hljs-comment">// 否则根据报文中的过期时刻和收到报文的时刻计算过期时间，判断是否超过上下限：</span><br>                    <span class="hljs-comment">// 计算方法：过期时刻-收到时刻=过期时间</span><br>                    <span class="hljs-comment">// 若没有超过，则设置过期时刻为报文中的过期时刻；</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmin &lt;= time - seq &amp;&amp; time - seq &lt;= tmax)<br>                        ipPool[select].time = time;<br>                    <span class="hljs-comment">// 若没有超过，则设置过期时刻为报文中的过期时刻；</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time - seq &lt; tmin)<br>                        ipPool[select].time = seq + tmin;<br>                    <span class="hljs-comment">// 否则则根据超限情况设置为允许的最早或最晚的过期时刻；</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time - seq &gt; tmax)<br>                        ipPool[select].time = seq + tmax;<br>                    <span class="hljs-comment">// 向发送主机发送 Offer 报文，其中，IP 地址为选定的 IP 地址，过期时刻为所设定的过期时刻。</span><br>                    cout &lt;&lt; host &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; lhost &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;OFR&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; select &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ipPool[select].time &lt;&lt; endl;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 对于 Request 报文</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;REQ&quot;</span>) &#123;<br>                <span class="hljs-comment">// 检查接收主机是否为本机：</span><br>                <span class="hljs-keyword">if</span> (rhost != host) &#123;<br>                    <span class="hljs-comment">// 若不是，则找到占用者为发送主机的所有 IP 地址，对于其中状态为待分配的，将其状态设置为未分配，并清空其占用者，清零其过期时刻，处理结束；</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                        <span class="hljs-keyword">if</span> (ipPool[i].name == lhost &amp;&amp; ipPool[i].state == <span class="hljs-number">2</span>) &#123;<br>                            ipPool[i].state = <span class="hljs-number">1</span>;<br>                            ipPool[i].name = <span class="hljs-string">&quot;&quot;</span>;<br>                            ipPool[i].time = <span class="hljs-number">0</span>;<br>                        &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 检查报文中的 IP 地址是否在地址池内，且其占用者为发送主机</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> &lt;= ip &amp;&amp; ip &lt;= n &amp;&amp; ipPool[ip].name == lhost) &#123;<br>                        <span class="hljs-comment">// 无论该 IP 地址的状态为何，将该 IP 地址的状态设置为占用；</span><br>                        ipPool[ip].state = <span class="hljs-number">3</span>;<br>                        <span class="hljs-comment">// 与 Discover 报文相同的方法，设置 IP 地址的过期时刻；</span><br>                        <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>)<br>                            ipPool[ip].time = seq + tdef;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmin &lt;= time - seq &amp;&amp; time - seq &lt;= tmax)<br>                            ipPool[ip].time = time;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time - seq &lt; tmin)<br>                            ipPool[ip].time = seq + tmin;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (time - seq &gt; tmax)<br>                            ipPool[ip].time = seq + tmax;<br>                        <span class="hljs-comment">// 向发送主机发送 Ack 报文。</span><br>                        cout &lt;&lt; host &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; lhost &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;ACK&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ip &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ipPool[ip].time &lt;&lt; endl;<br>                    &#125;<br>                    <span class="hljs-comment">//若不是，则向发送主机发送 Nak 报文，处理结束；</span><br>                    <span class="hljs-keyword">else</span><br>                        cout &lt;&lt; host &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; lhost &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;NAK&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ip &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;0&quot;</span> &lt;&lt; endl;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><h3 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T125">202104-4 校门外的树</a></p><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>X 校最近打算美化一下校园环境。前段时间因为修地铁，X 校大门外种的行道树全部都被移走了。现在 X 校打算重新再种一些树，为校园增添一抹绿意。</p><p>X 校大门外的道路是东西走向的，我们可以将其看成一条数轴。在这条数轴上有 n 个障碍物，例如电线杆之类的。虽然障碍物会影响树的生长，但是障碍物不一定能被随便移走，所以 X 校规定在障碍物的位置上<strong>不能</strong>种树。n 个障碍物的坐标都是整数；如果规定向东为正方向，则 n 个障碍物的坐标按照从西到东的顺序分别为 a1,a2,⋯,an。X 校打算在 [a1,an] 之间种一些树，使得这些树看起来比较美观。</p><p>X 校希望，在一定范围内，树应该是等间隔的。更具体地说，如果把 [a1,an) 划分成一些区间 [ap1,ap2),⋯,[apm−1,apm)（1=p1&lt;p2&lt;⋯&lt;pm=n），那么每个区间 [api,api+1) 内需要至少种一棵树，且该区间内种的树的坐标连同区间端点 api,api+1 应该构成一个等差数列。不同区间的公差，也就是树的间隔可以不相同。</p><p>例如，如果障碍物位于 0,2,6 这三处，那么我们可以选择在 [0,2) 和 [2,6) 分别种树，也可以选择在 [0,6) 等间隔种树。如果是分别在 [0,2) 和 [2,6) 种树，由于每个区间内至少要种一棵树，坐标 1 上必须种树；而 [2,6) 上的树可以按照 1 的间隔种下，也可以按照 2 的间隔种下。下图表示了这两种美观的种树方案，其中橙色的圆表示障碍物，绿色的圆表示需要在这个位置种树，箭头上的数字表示种下这棵树时对应的间隔为多少。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111280209683.png" alt=""></p><p>对区间 [0,2) 和 [2,6) 分别以 1 和 2 的间隔种树是美观的</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111280048528.png" alt=""></p><p>对区间 [0,2) 和 [2,6) 分别以 1 的间隔种树也是美观的</p><p>而如果选择在 [0,6) 区间等间隔种树，我们只能以 3 的间隔种树，因为无论是选择间隔 1 或者间隔 2，都需要在坐标 2 上种树，而这个位置已经有障碍物了。下图分别表示了间隔为 3,2,1 时的种树情况，红色箭头表示不能在这里种树。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111281919845.png" alt=""></p><p>对区间 [0,6) 以 3 的间隔种树是美观的</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111280049170.png" alt=""></p><p>对区间 [0,6) 以 2 的间隔种树是不美观的</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202111281921265.png" alt=""></p><p>对区间 [0,6) 以 1 的间隔种树也是不美观的</p><p>一般地，给定一个区间 $[al,ar)$，对于树的坐标的集合 $T⊂(al,ar)(T⊂Z)$，归纳定义 $T$ 在 $[al,ar)$ 上是<strong>美观的</strong>：</p><ol><li>如果 $T≠∅$，$T∩{al,al+1,⋯,ar}=∅$，并且存在一个公差 $d≥1$，使得 $T∪{al,ar}$ 中的元素按照从小到大的顺序排序后，可以构成一个公差为 $d$ 的等差数列（显然，这个等差数列的首项为 $al$，末项为 $ar$），则 $T$ 在 $[al,ar)$ 上是美观的；</li><li>如果 $T∩{al,al+1,⋯,ar}=∅$，并且存在一个下标 $m（l&lt;m&lt;r）$，使得 $T∩(al,am)$ 在 $[al,am)$ 上是美观的，且 $T∩(am,ar)$ 在 $[am,ar)$ 上是美观的，则 $T$ 在 $[al,ar)$ 上是美观的。</li></ol><p>根据这一定义，空集在任意区间上都不是美观的；另外，如果存在下标 $i$ 使得 $ai∈T$，那么 $T$ 一定不是美观的。</p><p>我们称两种种树的方案是<strong>本质不同的</strong>，当且仅当两种方案中，种树的坐标集合不同。请帮助 X 校对 $[a1,an)$ 求出所有本质不同的美观的种树方案。当然，由于方案可能很多，你只需要输出总方案数对 $10^9+7$ 取模的结果。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个正整数 $n$，表示障碍物的数量。</p><p>输入的第二行包括 $n$ 个非负整数 $a1,⋯,an$，表示每个障碍物的坐标。</p><p>保证对 $i=1,2,⋯,n−1$，$ai&lt;ai+1$。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个非负整数，表示本质不同的美观的种树方案的数量对 $10^9+7$ 取模的结果。</p><h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">3<br></code></pre></td></tr></table></figure><h3 id="样例说明-2"><a href="#样例说明-2" class="headerlink" title="样例说明"></a>样例说明</h3><p>这组样例即为题面描述中提到的那组。</p><h3 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">11<br>0 10 20 30 40 50 60 70 80 90 100<br></code></pre></td></tr></table></figure><h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">256507<br></code></pre></td></tr></table></figure><h3 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">333<brbr></code></pre></td></tr></table></figure><h3 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">7094396<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-3"><a href="#评测用例规模与约定-3" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 10% 的数据，保证 n=2；</p><p>对于 30% 的数据，保证 n≤10；</p><p>对于 60% 的数据，保证 n≤100,ai≤1000；</p><p>对于 100% 的数据，保证 2≤n≤1000,0≤ai≤100,000，且至少存在一种美观的种树方案。</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>动态规划+打表</p><p>设$dp[i]$为到第i个障碍物之间的方案总数，那么有状态转移方程</p><script type="math/tex; mode=display">dp[i]=\sum\limits_{j=1}^{i-1}dp[j]\times{calc(j,i)}</script><p>其中$calc(j,i)$为第$j$个障碍物到第$i$个障碍物的方案总数。</p><p>为了得出优化的calc函数进行如下分析：</p><ol><li><p>第j个障碍物到第i个障碍物的间隔必须为obstacles[i]-obstacles[j]的因子，否则树不是等间隔的，挑选撞不上障碍物的因子作为种树方案。</p></li><li><p>若从j从i-1开始倒着枚举，开始时i-1和i之间没有障碍物，即obstacles[i]-obstacles[i-1]的所有因子都是种树方案，将这些因子设为不可再用(false)，当j=i-2时，对因子进行筛选时不可使用false的因子，因为按这些间隔排序一定会撞到原先作为左端点的障碍物。</p><p>所以我们可以从i-1到1遍历j，如果obstacles[i]-obstacles[j]的因子可使用就数量+1并标记为false，否则啥也不干。</p><p>注意当i增长时要重置因子可用集合flag为true。</p></li><li><p>因为我们需要频繁地获取某区间长度的因子，所以可以用筛选法进行预处理，即将因子打个表</p><p>这个表可以从1打到最大长度AMAX，也可以进行时间复杂度的优化，因为</p><ol><li>种树间隔不会超过最大障碍物距离的一半</li><li>种树的区间不会超过最大障碍物距离</li></ol><p>注：最大障碍物距离只是我形象的说法，其实比真实的最大障碍物距离大，因为坐标0不一定有障碍物。</p></li></ol><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-comment">// #define DEBUG  // 定义空的宏，只可判断其是否被定义</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> AMAX = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">int</span> n, obstacles[N];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> dp[N];<br><span class="hljs-keyword">bool</span> flag[AMAX];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; v[AMAX];  <span class="hljs-comment">// 以向量为元素的数组</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = obstacles[y] - obstacles[x];<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d: v[len])<br>        <span class="hljs-keyword">if</span> (flag[d]) &#123;<br>            cnt++;<br>            flag[d] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    flag[len] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;obstacles[i]);<br><br>    <span class="hljs-comment">// 确定以i(种树间隔)为因数的j</span><br>    <span class="hljs-comment">// 经优化的打表，右界可以直接为AMAX</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= obstacles[n] / <span class="hljs-number">2</span>; i++)  <span class="hljs-comment">// 间隔不超过最大障碍物距离的一半</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span> * i; j &lt;= obstacles[n]; j += i)  <span class="hljs-comment">// 两障碍物间至少有一颗树，即间隔i不能为j自己（j=ki&lt;=最大障碍物距离,k=2,3,...）</span><br>            v[j].<span class="hljs-built_in">push_back</span>(i);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> DEBUG</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%2d: &quot;</span>, i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-keyword">int</span>) v[i].<span class="hljs-built_in">size</span>(); j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, v[i][j]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><span class="hljs-comment">// #else</span><br><span class="hljs-comment">//     printf(&quot;Not debugging\n&quot;);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">memset</span>(flag, <span class="hljs-literal">true</span>, <span class="hljs-keyword">sizeof</span> flag);  <span class="hljs-comment">// 刻板印象：sizeof其实是个关键字！后面括号是提优先级用的！</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">1</span>; j--)<br>            dp[i] = (dp[i] + dp[j] * <span class="hljs-built_in">calc</span>(j, i)) % MOD;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, dp[n]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><ol><li><p>宏定义可以定义一个空的宏，如<code>#define DEBUG</code>，这种宏只能被用来判断是否被定义，常用于DEBUG时运行一些不想在RELEASE运行的语句</p><p>使用方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> DEBUG</span><br>    定义了DEBUG时要做的<br>[<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>没定义DEBUG时要做的<br>]<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li><p><code>sizeof</code>其实是个关键字，一直认为它是函数的原因在于它经常加括号使用以区分操作对象</p><p>举个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span>* p=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zd\n&quot;</span>,<span class="hljs-keyword">sizeof</span> p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zd\n&quot;</span>,<span class="hljs-keyword">sizeof</span> p+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zd\n&quot;</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (p+<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">8<br>9<br>8<br></code></pre></td></tr></table></figure><p>注：%zd是sizeof的返回类型unsigned int的输出控制符</p></li></ol><h1 id="202012"><a href="#202012" class="headerlink" title="202012"></a>202012</h1><h2 id="期末预测之安全指数"><a href="#期末预测之安全指数" class="headerlink" title="期末预测之安全指数"></a>期末预测之安全指数</h2><h3 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T123">202012-1 期末预测之安全指数</a></p><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>考虑到安全指数是一个较大范围内的整数、小菜很可能搞不清楚自己是否真的安全，顿顿决定设置一个阈值 $θ$，以便将安全指数 $y$ 转化为一个具体的预测结果——“会挂科”或“不会挂科”。</p><p>因为安全指数越高表明小菜同学挂科的可能性越低，所以当 $y≥θ$ 时，顿顿会预测小菜这学期很安全、不会挂科；反之若 $y&lt;θ$，顿顿就会劝诫小菜：“你期末要挂科了，勿谓言之不预也。”</p><p>那么这个阈值该如何设定呢？顿顿准备从过往中寻找答案。</p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>具体来说，顿顿评估了 $m$ 位同学上学期的安全指数，其中第 $i$（$1≤i≤m$）位同学的安全指数为 $y_i$，是一个 $[0,108]$ 范围内的整数；同时，该同学上学期的挂科情况记作 $resulti∈0,1$，其中 $0$ 表示挂科、$1$ 表示未挂科。</p><p>相应地，顿顿用 <script type="math/tex">predict_{\theta} ( y )</script> 表示根据阈值 $θ$ 将安全指数 $y$ 转化为的具体预测结果。<br>如果 <script type="math/tex">predict_{\theta} ( y_j )</script> 与 $result_j$ 相同，则说明阈值为 $θ$ 时顿顿对第 $j$ 位同学是否挂科预测正确；不同则说明预测错误。</p><script type="math/tex; mode=display">\mathrm{predict}_{\theta} ( y ) = \left\{\begin{array}{cc}0& {(y < \theta)}\\1& {(y \ge \theta)}\end{array}\right.</script><p>最后，顿顿设计了如下公式来计算最佳阈值 $\theta^*$：</p><script type="math/tex; mode=display">\theta^* = \max { \mathop{\mathrm{argmax} }\limits_{\theta \in { y_i } } \sum\limits_{j=1}^{m} ( \mathrm{predict}_{\theta} ( y_j ) == result_j ) }</script><p>该公式亦可等价地表述为如下规则：</p><ol><li>最佳阈值仅在 ${ y_i }$ 中选取，即与某位同学的安全指数相同；</li><li>按照该阈值对这 $m$ 位同学上学期的挂科情况进行预测，预测正确的次数最多（即准确率最高）；</li><li>多个阈值均可以达到最高准确率时，选取其中最大的。</li></ol><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入读入数据。</p><p>输入的第一行包含一个正整数 $m$。</p><p>接下来输入 $m$ 行，其中第 $i$（$1≤i≤m$）行包括用空格分隔的两个整数 $y_i$ 和 $result_i$，含义如上文所述。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出到标准输出。</p><p>输出一个整数，表示最佳阈值 $\theta^∗$。</p><h3 id="样例1输入-1"><a href="#样例1输入-1" class="headerlink" title="样例1输入"></a>样例1输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs data">6<br>0 0<br>1 0<br>1 1<br>3 1<br>5 1<br>7 1<br></code></pre></td></tr></table></figure><h3 id="样例1输出-1"><a href="#样例1输出-1" class="headerlink" title="样例1输出"></a>样例1输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">3<br></code></pre></td></tr></table></figure><h3 id="样例1解释-1"><a href="#样例1解释-1" class="headerlink" title="样例1解释"></a>样例1解释</h3><p>按照规则一，最佳阈值的选取范围为 $0,1,3,5,7$。</p><p>$θ=0$ 时，预测正确次数为 $4$；</p><p>$θ=1$ 时，预测正确次数为 $5$；</p><p>$θ=3$ 时，预测正确次数为 $5$；</p><p>$θ=5$ 时，预测正确次数为 $4$；</p><p>$θ=7$ 时，预测正确次数为 $3$。</p><p>阈值选取为 $1$ 或 $3$ 时，预测准确率最高；<br>所以按照规则二，最佳阈值的选取范围缩小为 $1$,$3$。</p><p>依规则三，$\theta^* = \max { 1, 3 } = 3$。</p><h3 id="样例2输入-1"><a href="#样例2输入-1" class="headerlink" title="样例2输入"></a>样例2输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs data">8<br>5 1<br>5 0<br>5 0<br>2 1<br>3 0<br>4 0<br>100000000 1<br>1 0<br></code></pre></td></tr></table></figure><h3 id="样例2输出-1"><a href="#样例2输出-1" class="headerlink" title="样例2输出"></a>样例2输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs data">100000000<br></code></pre></td></tr></table></figure><h3 id="子任务-1"><a href="#子任务-1" class="headerlink" title="子任务"></a>子任务</h3><p>$70\%$ 的测试数据保证 $m≤200$；</p><p>全部的测试数据保证 $2≤m≤105$。</p><h3 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h3><p>模拟一个加权公式</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    w,score=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-built_in">sum</span>+=w*score<br>y=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">sum</span>)<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><h2 id="期末预测之最佳阈值"><a href="#期末预测之最佳阈值" class="headerlink" title="期末预测之最佳阈值"></a>期末预测之最佳阈值</h2><h3 id="题目链接-6"><a href="#题目链接-6" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T122"> 202012-2 期末预测之最佳阈值</a></p><h3 id="问题分析-3"><a href="#问题分析-3" class="headerlink" title="问题分析"></a>问题分析</h3><p>前缀和、后缀和</p><p>根据题意和用例规模可以知道很容易写出70分的$O(n^2)$解，其主要优化点在于：</p><ol><li>怎样跳过的相同安全指数$y_i$</li><li>怎样在遍历时确定选定阈值对应的预测正确次数</li></ol><p>不难发现，第一份代码中对于优化点1将<script type="math/tex">y_i</script>和<script type="math/tex">y_{i-1}</script>对比，如果相同则跳过<script type="math/tex">y_i</script>，对于优化点2没做处理，暴力地使用了遍历，在$O(n)$的时间内获取到了预测正确次数，很容易知道在阈值变为下一个的时候，前后两段的预测正确者重合度很高，对于这种情况一般可以使用前/后缀和+容斥原理（本题是一维列表，未用到容斥原理）进行优化。</p><p>第二份代码对于优化点1建立了一个“相等值的下标列表”，对于相等的几个安全指数采用第一个安全指数的下标，对于优化点2，使用前缀和及后缀和在$O(1)$的时间内获取到了预测正确次数。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><p>$O(n^2)$的70分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">m=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>y=[<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-inf&#x27;</span>)]<br>result=[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    y_i,result_i=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    y.append(y_i)<br>    result.append(result_i)<br>best_theta=<span class="hljs-number">0</span><br>best_num=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i,y_i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(y[<span class="hljs-number">1</span>:],<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> y_i==y[i-<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">continue</span><br>    num=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> y[j]&lt;y_i <span class="hljs-keyword">and</span> result[j]==<span class="hljs-number">0</span>:<br>            num+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> y[j]&gt;=y_i <span class="hljs-keyword">and</span> result[j]==<span class="hljs-number">1</span>:<br>            num+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> num&gt;best_num:<br>        best_theta=y_i<br>        best_num=num<br>    <span class="hljs-keyword">elif</span> num==best_num:<br>        best_theta=<span class="hljs-built_in">max</span>(best_theta,y_i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span>(best_theta)<br></code></pre></td></tr></table></figure><p>$O(n)$的100分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">m=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=[]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    a.append([<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()])<br>a.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>])<br>a=[[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]+a<br>prefix=[<span class="hljs-number">0</span>]*(m+<span class="hljs-number">1</span>)<br>suffix=[<span class="hljs-number">0</span>]*(m+<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>    prefix[i]=prefix[i-<span class="hljs-number">1</span>]+(<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> a[i][<span class="hljs-number">1</span>]==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m,<span class="hljs-number">1</span>-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    suffix[i]=suffix[i+<span class="hljs-number">1</span>]+(<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> a[i][<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)<br><br>pos=<span class="hljs-number">1</span><br>equal_position=[<span class="hljs-number">0</span>]*(m+<span class="hljs-number">1</span>)  <span class="hljs-comment"># 相等值的下标列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span>(a[i][<span class="hljs-number">0</span>]==a[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]):<br>        equal_position[i]=pos<br>    <span class="hljs-keyword">else</span>:<br>        pos=i<br>        equal_position[i]=pos<br><br>best_theta=<span class="hljs-number">0</span><br>best_num=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>    current_num=prefix[equal_position[i]-<span class="hljs-number">1</span>]+suffix[i]<br>    <span class="hljs-keyword">if</span> current_num&gt;=best_num:<br>        best_num=current_num<br>        best_theta=a[i][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(best_theta)<br></code></pre></td></tr></table></figure><h1 id="202006"><a href="#202006" class="headerlink" title="202006"></a>202006</h1><h2 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h2><h3 id="题目链接-7"><a href="#题目链接-7" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T105">202006-1 线性分类器</a></p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>简单模拟</p><p>按类别将输入分好类</p><p>然后使用judgeX函数分别判断A类B类点代入后是否都具有相同的符号。</p><p>这里用到了一点高中数学的知识，在同一侧的点代入函数后都应该有相同的符号，至于在某一侧是否有固定的符号我记不清了，所以我先获取了第一个点代入后的符号，然后看后面的点是否都跟这个符号相等，其实这两个符号应该是正负相反的，但是数据集好像没有考这里，有点混乱，做出来就行。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>pointsA=[]<br>pointsB=[]<br>lines=[]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">judgeX</span>(<span class="hljs-params">X</span>):</span><br>    pointsX=pointsA <span class="hljs-keyword">if</span> X==<span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">else</span> pointsB<br>    point=pointsX[<span class="hljs-number">0</span>]<br>    part1=<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]+line[<span class="hljs-number">1</span>]*point[<span class="hljs-number">0</span>]+line[<span class="hljs-number">2</span>]*point[<span class="hljs-number">1</span>]&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> pointsX[<span class="hljs-number">1</span>:]:<br>        part2=<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]+line[<span class="hljs-number">1</span>]*point[<span class="hljs-number">0</span>]+line[<span class="hljs-number">2</span>]*point[<span class="hljs-number">1</span>]&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> part2!=part1:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    expoint=<span class="hljs-built_in">input</span>().split()<br>    point=[<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> expoint[:<span class="hljs-number">2</span>]]<br>    <span class="hljs-keyword">if</span> expoint[<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27;A&#x27;</span>:<br>        pointsA.append(point)<br>    <span class="hljs-keyword">else</span>:<br>        pointsB.append(point)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    line=[<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br>    lines.append(line)<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-keyword">if</span> judgeX(<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-keyword">and</span> judgeX(<span class="hljs-string">&#x27;B&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="稀疏向量"><a href="#稀疏向量" class="headerlink" title="稀疏向量"></a>稀疏向量</h2><h3 id="题目链接-8"><a href="#题目链接-8" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T104">202006-2 稀疏向量</a></p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>基本思路是用映射把稀疏向量保存起来，只有两个向量的键上都有值时才求他们值的乘积，其余情况的乘积都是0，那么可以使用集合求键的交集来实现找相同元素，解法一基于此思路，但这样要考虑到求交集所需的时间，据<a href="https://wiki.python.org/moin/TimeComplexity">python wiki</a>，<code>Intersection s&amp;t</code>的平均时间复杂度为<code>O(min(len(s), len(t))</code>，而解法二的<code>k in d</code>的平均时间复杂度为<code>O(1)</code>，所以我们可以把“求交”替换为“属于”。</p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112041918065.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/WanpengXu/myPicGo/img/202112041918633.png" alt=""></p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><p>90分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">n,a,b=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>vector1=&#123;&#125;<br>v1index=<span class="hljs-built_in">set</span>()<br>vector2=&#123;&#125;<br>v2index=<span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a):<br>    indexi,valuei=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    vector1[indexi]=valuei<br>    v1index.add(indexi)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>    indexj,valuej=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    vector2[indexj]=valuej<br>    v2index.add(indexj)<br>sameindex=<span class="hljs-built_in">list</span>(v1index.intersection(v2index))  <span class="hljs-comment"># 求交集时间复杂度O(min(len(s), len(t))</span><br>mul=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> sameindex:<br>    mul+=vector1[index]*vector2[index]<br><span class="hljs-built_in">print</span>(mul)<br></code></pre></td></tr></table></figure><p>100分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">n,a,b=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>vector1=&#123;&#125;<br>mul=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a):<br>    indexi,valuei=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    vector1[indexi]=valuei<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>    indexj,valuej=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">if</span> indexj <span class="hljs-keyword">in</span> vector1.keys():<br>        mul+=vector1[indexj]*valuej<br><span class="hljs-built_in">print</span>(mul)<br></code></pre></td></tr></table></figure><h1 id="201709"><a href="#201709" class="headerlink" title="201709"></a>201709</h1><h2 id="通信网络"><a href="#通信网络" class="headerlink" title="通信网络"></a>通信网络</h2><h3 id="题目链接-9"><a href="#题目链接-9" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T60">201709-4 通信网络</a></p><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>DFS</p><p>一道比较简单的DFS，用C++11风格写的</p><p>首先要有</p><ol><li>一个二维long long向量，用来表示图</li><li>一个二维bool向量，用来表示i知道j</li><li>一个一维bool向量，用来表示“访问过”，这里本应是二维，为了降低空间复杂度把它设计成了一维，每次将它重新初始化为“未访问过”(false)</li></ol><p>接着设计一个DFS函数</p><ol><li>对于进入到函数中的点对，标记为“访问过”（true）</li><li>对于进入到函数中的点对，将他们标记为互相知道</li><li>对于点对中第一个点的每个出度点，若没被访问过，将他们扔入dfs函数</li></ol><p>最后在主函数中</p><ol><li>将输入构造为邻接表（由稀疏向量有感：邻接表其实就是稀疏的邻接矩阵）</li><li>将每一个点和它自己扔入dfs函数（每个点肯定知道自己）</li><li>最后按行遍历“二维知道向量”，如果某行知道所有点（true的数量等于点的数量），把结果自增1</li></ol><p>至于为什么这道题不取消visit标记，我不知道。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll=<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">const</span> ll MAX=<span class="hljs-number">1000</span>+<span class="hljs-number">5</span>;<br>ll ni,mi;<br>vector&lt;vector&lt;ll&gt;&gt; <span class="hljs-built_in">graph</span>(MAX);<br>vector&lt;vector&lt;<span class="hljs-keyword">bool</span>&gt;&gt; <span class="hljs-built_in">know</span>(MAX,vector&lt;<span class="hljs-keyword">bool</span>&gt;(MAX));<br><span class="hljs-function">vector&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">visit</span><span class="hljs-params">(MAX)</span></span>;  <span class="hljs-comment">// 邻接表的每行都复用它</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll v,ll s)</span></span>&#123;<br>    visit[v]=<span class="hljs-literal">true</span>;<br>    know[s][v]=know[v][s]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(ll i:graph[v])&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> visit[i])<br>            <span class="hljs-built_in">dfs</span>(i,s);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;ni&gt;&gt;mi;<br>    <span class="hljs-keyword">while</span>(mi--)&#123;<br>        ll ai,bi;<br>        cin&gt;&gt;ai&gt;&gt;bi;<br>        graph[ai].<span class="hljs-built_in">push_back</span>(bi);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=ni;i++)&#123;<br>        <span class="hljs-built_in">fill</span>(visit.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>,visit.<span class="hljs-built_in">begin</span>()+ni+<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>);<br>        <span class="hljs-built_in">dfs</span>(i,i);<br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=ni;i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">count</span>(know[i].<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>,know[i].<span class="hljs-built_in">begin</span>()+ni+<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>)==ni)<br>            ans++;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON查询"><a href="#JSON查询" class="headerlink" title="JSON查询"></a>JSON查询</h2><h3 id="题目链接-10"><a href="#题目链接-10" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://118.190.20.162/view.page?gpid=T61">201709-3 JSON查询</a></p><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>震惊我一整年的题，python花活太多了</p><p>一个是这个输入正好符合python中dict的样式，可以直接用exec将字符串作为语句执行</p><p>第二是可以直接导入json库，用本身的loads函数创建半结构数据</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><p>100分法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>op=<span class="hljs-string">&#x27;dic=&#x27;</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    op+=<span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">exec</span>(op)  <span class="hljs-comment"># 这个执行会自动转义&quot;却不会转义\，奇怪</span><br><span class="hljs-comment"># print(dic)</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    query=<span class="hljs-built_in">input</span>().replace(<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>)  <span class="hljs-comment"># 这第二个字符串参数竟然不支持转义</span><br>    op=<span class="hljs-string">&#x27;res=dic&#x27;</span><br>    obj=query.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> obj:<br>        op+=<span class="hljs-string">f&#x27;[<span class="hljs-subst">&#123;<span class="hljs-built_in">repr</span>(o)&#125;</span>]&#x27;</span><br>    <span class="hljs-comment"># print(op)</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">exec</span>(op)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NOTEXIST&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(res,<span class="hljs-built_in">str</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;STRING&#x27;</span>,res)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;OBJECT&#x27;</span>)<br></code></pre></td></tr></table></figure><p>100分法二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><br>json_str = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    json_str += <span class="hljs-built_in">input</span>()<br><br>data = json.loads(json_str)  <span class="hljs-comment"># 我勒个大草tmd竟然能直接载入</span><br><br><span class="hljs-comment"># type(data) # dict</span><br><span class="hljs-comment"># print(data)  # &#123;&#x27;firstName&#x27;: &#x27;John&#x27;, &#x27;lastName&#x27;: &#x27;Smith&#x27;, &#x27;address&#x27;: &#123;&#x27;streetAddress&#x27;: &#x27;2ndStreet&#x27;, &#x27;city&#x27;: &#x27;NewYork&#x27;, &#x27;state&#x27;: &#x27;NY&#x27;&#125;, &#x27;esc\\aped&#x27;: &#x27;&quot;hello&quot;&#x27;&#125;</span><br><br><span class="hljs-comment"># print(type(data[&#x27;firstName&#x27;]))  # &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-comment"># print(type(data[&#x27;address&#x27;]))  # &lt;class &#x27;dict&#x27;&gt;</span><br><span class="hljs-comment"># print(type(data[&#x27;address&#x27;][&#x27;city&#x27;]))  # &lt;class &#x27;str&#x27;&gt;</span><br><br>querys = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    querys.append(<span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;.&quot;</span>))<br><br><span class="hljs-comment"># json_type=&#123;</span><br><span class="hljs-comment">#     str:&quot;STRING&quot;,</span><br><span class="hljs-comment">#     dict:&quot;OBJECT&quot;</span><br><span class="hljs-comment">#     &#125;</span><br><br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> querys:<br>    search = <span class="hljs-string">&quot;data&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> q:<br>            search += <span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;<span class="hljs-built_in">repr</span>(x)&#125;</span>]&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(search)) == <span class="hljs-built_in">str</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;STRING&quot;</span>, <span class="hljs-built_in">eval</span>(search))<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(search)) == <span class="hljs-built_in">dict</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OBJECT&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception:  <span class="hljs-comment"># 这里单用KeyError只能得90，还有我没考虑到的异常，为了保险所有异常都从这走</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NOTEXIST&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>CSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/26/hello-world/"/>
    <url>/2021/11/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
